// src/pages/GamePage.jsx
import React, { useState } from 'react';
import CodeSnakeLevelsPage from '../components/codesnake/CodeSnakeLevelsPage';
import CodeMazeLevelsPage from '../components/codemaze/CodeMazeLevelsPage';
import AlgorithmConstructorLevelsPage from '../components/algorithmconstructor/AlgorithmConstructorLevelsPage';

export default function GamePage() {
  const [currentLevel, setCurrentLevel] = useState(null);

  const levels = [
    {
      id: 1,
      name: "–ó–º–µ–π–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
      difficulty: "easy",
      description: "–°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ —è–≥–æ–¥—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ",
      color: "from-green-500 to-emerald-600",
      icon: "üêç",
      gameType: "snake",
      disabled: true // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    },
    {
      id: 2,
      name: "–õ–∞–±–∏—Ä–∏–Ω—Ç –∫–æ–¥–∞",
      difficulty: "medium",
      description: "–ù–∞–π–¥–∏—Ç–µ –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥—É —á–µ—Ä–µ–∑ –ø–∞–∑–ª—ã",
      color: "from-blue-500 to-cyan-600",
      icon: "üó∫Ô∏è",
      gameType: "maze",
      disabled: true // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    },
    {
      id: 3,
      name: "–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä",
      difficulty: "progressive",
      description: "–°–æ–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∫–æ–¥–∞",
      color: "from-purple-500 to-pink-600",
      icon: "üß©",
      gameType: "algorithm",
      disabled: false // –î–æ—Å—Ç—É–ø–Ω–∞
    }
  ];

  const handleLevelSelect = (levelId) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —É—Ä–æ–≤–µ–Ω—å
    const level = levels.find(l => l.id === levelId);
    if (level && !level.disabled) {
      setCurrentLevel(levelId);
    }
  };

  const handleBack = () => {
    setCurrentLevel(null);
  };

  const handleExit = () => {
    window.history.back();
  };

  if (currentLevel === null) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
        {/* Header */}
        <header className="bg-black/20 backdrop-blur-sm border-b border-purple-500/20">
          <div className="container mx-auto px-6 py-4">
            <div className="flex items-center justify-between">
              <h1 className="text-2xl font-bold text-white">–ò–≥—Ä–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏</h1>
              <button 
                onClick={handleExit}
                className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors"
              >
                –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é
              </button>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="container mx-auto px-6 py-12">
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-12">
              <h2 className="text-4xl font-bold text-white mb-4">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É</h2>
              <p className="text-xl text-gray-300">
                –ü—Ä–æ–π–¥–∏—Ç–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–¥–æ–≤—ã–µ –∏–≥—Ä—ã –∏ —É–ª—É—á—à–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ Python
              </p>
            </div>

            {/* –£—Ä–æ–≤–Ω–∏ */}
            <div className="grid md:grid-cols-3 gap-8">
              {levels.map((level) => (
                <div 
                  key={level.id}
                  className={`bg-slate-800/50 backdrop-blur-sm rounded-2xl p-8 transition-all duration-300 cursor-pointer transform hover:scale-105 border ${
                    level.disabled 
                      ? 'border-gray-600 opacity-60' 
                      : 'border-slate-700/50 hover:bg-slate-800/70'
                  }`}
                  onClick={() => handleLevelSelect(level.id)}
                >
                  <div className={`w-16 h-16 bg-gradient-to-r ${level.color} rounded-xl flex items-center justify-center mx-auto mb-4`}>
                    <span className="text-2xl">{level.icon}</span>
                  </div>
                  <h3 className="text-2xl font-bold text-white mb-2">{level.name}</h3>
                  <p className="text-gray-300 mb-4">{level.description}</p>
                  
                  <div className="flex flex-wrap items-center justify-between gap-2">
                    <div className="text-sm">
                      <span className="px-3 py-1 bg-slate-700/50 rounded-full text-gray-300">
                        {level.difficulty}
                      </span>
                    </div>
                    
                    {level.disabled && (
                      <div className="text-xs px-2 py-1 bg-yellow-500/20 text-yellow-300 rounded-full border border-yellow-500/30">
                        –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </main>
      </div>
    );
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  const renderLevel = () => {
    switch (currentLevel) {
      case 1:
        return <CodeSnakeLevelsPage onBack={handleBack} />;
      case 2:
        return <CodeMazeLevelsPage onBack={handleBack} />;
      case 3:
        return <AlgorithmConstructorLevelsPage onBack={handleBack} />;
      default:
        return null;
    }
  };

  return <>{renderLevel()}</>;
}