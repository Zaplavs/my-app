export default [
  {
    question: "Что выведет print(type(5)) в Python?",
    options: ["<class 'int'>", "<class 'number'>", "<class 'float'>", "<class 'string'>"],
    answer: "<class 'int'>",
    explanation: {
      correct: "В Python тип целых чисел - int",
      incorrect: "Неверно, в Python тип целых чисел - int"
    }
  },
  {
    question: "Как правильно создать список в Python?",
    options: ["list = (1, 2, 3)", "list = [1, 2, 3]", "list = {1, 2, 3}", "list = <1, 2, 3>"],
    answer: "list = [1, 2, 3]",
    explanation: {
      correct: "Списки в Python создаются с помощью квадратных скобок []. Это упорядоченная изменяемая коллекция элементов.",
      incorrect: "Неверно. Круглые скобки () создают кортеж, фигурные {} - словарь или множество, а угловые <> не используются для коллекций."
    }
  },
  {
    question: "Какой оператор используется для определения функции в Python?",
    options: ["function", "def", "func", "method"],
    answer: "def",
    explanation: {
      correct: "Для определения функции в Python используется ключевое слово 'def', за которым следует имя функции и параметры в скобках.",
      incorrect: "Неверно. В Python для создания функций используется только 'def'."
    }
  },
  {
    question: "Что выведет выражение 10 / 3 в Python?",
    options: ["3", "3.3333333333333335", "3.0", "Ошибка"],
    answer: "3.3333333333333335",
    explanation: {
      correct: "В Python оператор / всегда возвращает число с плавающей точкой (float), даже если результат является целым числом.",
      incorrect: "Неверно. Оператор / возвращает float. Для целочисленного деления используется //."
    }
  },
  {
    question: "Как правильно создать словарь в Python?",
    options: ["dict = [key: value]", "dict = {key: value}", "dict = (key: value)", "dict = <key: value>"],
    answer: "dict = {key: value}",
    explanation: {
      correct: "Словари в Python создаются с помощью фигурных скобок {} и содержат пары ключ-значение, разделенные двоеточием.",
      incorrect: "Неверно. Только фигурные скобки {} используются для создания словарей."
    }
  },
  {
    question: "Какой метод используется для добавления элемента в конец списка?",
    options: ["list.add()", "list.append()", "list.insert()", "list.push()"],
    answer: "list.append()",
    explanation: {
      correct: "Метод append() добавляет элемент в конец списка. Это самый распространенный способ добавления одного элемента.",
      incorrect: "Неверно. В Python для добавления элемента в конец списка используется метод append()."
    }
  },
  {
    question: "Какой оператор используется для целочисленного деления в Python?",
    options: ["/", "%", "//", "**"],
    answer: "//",
    explanation: {
      correct: "Оператор // выполняет целочисленное деление, возвращая только целую часть результата без дробной части.",
      incorrect: "Неверно. / - обычное деление, % - остаток от деления, ** - возведение в степень."
    }
  },
  {
    question: "Как правильно создать строку в Python?",
    options: ['string = "Hello"', "string = 'Hello'", 'string = `Hello`', "Варианты 1 и 2"],
    answer: "Варианты 1 и 2",
    explanation: {
      correct: "В Python строки можно создавать как с одинарными, так и с двойными кавычками. Оба способа равнозначны.",
      incorrect: "Неверно. В Python можно использовать как одинарные, так и двойные кавычки для создания строк."
    }
  },
  {
    question: "Что делает функция len() в Python?",
    options: ["Измеряет длину строки в сантиметрах", "Возвращает количество элементов в объекте", "Определяет тип данных", "Преобразует число в строку"],
    answer: "Возвращает количество элементов в объекте",
    explanation: {
      correct: "Функция len() возвращает количество элементов в последовательности или коллекции: длину строки, количество элементов в списке, количество пар в словаре и т.д.",
      incorrect: "Неверно. len() возвращает количество элементов в объекте, а не физическую длину."
    }
  },
  {
    question: "Какой оператор используется для проверки равенства в Python?",
    options: ["=", "==", "===", "equals"],
    answer: "==",
    explanation: {
      correct: "Оператор == используется для сравнения двух значений на равенство. Он возвращает True, если значения равны, и False в противном случае.",
      incorrect: "Неверно. = используется для присваивания, === не существует в Python, equals - не оператор."
    }
  },
  {
    question: "Как правильно создать комментарий в Python?",
    options: ["// комментарий", "/* комментарий */", "# комментарий", "<!-- комментарий -->"],
    answer: "# комментарий",
    explanation: {
      correct: "В Python комментарии создаются с помощью символа #. Всё, что следует после # до конца строки, игнорируется интерпретатором.",
      incorrect: "Неверно. В Python для комментариев используется только символ #."
    }
  },
  {
    question: "Что выведет print(type('Hello'))?",
    options: ["<class 'str'>", "<class 'string'>", "<class 'text'>", "<class 'char'>"],
    answer: "<class 'str'>",
    explanation: {
      correct: "В Python строки имеют тип str. Это основной тип для работы с текстовыми данными.",
      incorrect: "Неверно. В Python строки имеют тип str, а не string."
    }
  },
  {
    question: "Какой метод преобразует строку в нижний регистр?",
    options: ["string.lowercase()", "string.tolower()", "string.lower()", "string.downcase()"],
    answer: "string.lower()",
    explanation: {
      correct: "Метод lower() преобразует все символы строки в нижний регистр. Это часто используется для нормализации текста перед сравнением.",
      incorrect: "Неверно. Правильный метод - lower()."
    }
  },
  {
    question: "Что такое переменная в Python?",
    options: ["Контейнер для хранения данных", "Функция для вычислений", "Тип данных", "Оператор"],
    answer: "Контейнер для хранения данных",
    explanation: {
      correct: "Переменная - это имя, которое ссылается на значение в памяти. Это контейнер для хранения данных, к которому можно обращаться по имени.",
      incorrect: "Неверно. Переменная - это контейнер для хранения данных, а не функция, тип или оператор."
    }
  },
  {
    question: "Как правильно импортировать модуль в Python?",
    options: ["import module", "require module", "include module", "using module"],
    answer: "import module",
    explanation: {
      correct: "Для импорта модуля в Python используется ключевое слово 'import' за которым следует имя модуля. Например: import math.",
      incorrect: "Неверно. В Python для импорта модулей используется только 'import'."
    }
  },
  {
    question: "Какой тип данных используется для хранения последовательности чисел от 0 до 4?",
    options: ["list", "tuple", "range", "Все варианты"],
    answer: "Все варианты",
    explanation: {
      correct: "Все три типа могут хранить последовательность чисел: list - изменяемая, tuple - неизменяемая, range - специальный тип для последовательностей чисел.",
      incorrect: "Неверно. Все три типа данных могут хранить последовательность чисел."
    }
  },
  {
    question: "Что делает оператор 'in' в Python?",
    options: ["Проверяет наличие элемента в последовательности", "Добавляет элемент", "Удаляет элемент", "Заменяет элемент"],
    answer: "Проверяет наличие элемента в последовательности",
    explanation: {
      correct: "Оператор 'in' проверяет, содержится ли элемент в последовательности (строке, списке, кортеже и т.д.) и возвращает True или False.",
      incorrect: "Неверно. 'in' используется только для проверки наличия элемента."
    }
  },
  {
    question: "Как правильно создать пустой список?",
    options: ["list = []", "list = list()", "list = {}", "Варианты 1 и 2"],
    answer: "Варианты 1 и 2",
    explanation: {
      correct: "Пустой список можно создать либо с помощью пустых квадратных скобок [], либо с помощью конструктора list(). Оба способа равнозначны.",
      incorrect: "Неверно. Пустой список можно создать двумя способами: [] и list()."
    }
  },
  {
    question: "Что выведет print(2 ** 3)?",
    options: ["6", "8", "9", "5"],
    answer: "8",
    explanation: {
      correct: "Оператор ** означает возведение в степень. 2 ** 3 = 2³ = 2 × 2 × 2 = 8.",
      incorrect: "Неверно. Оператор ** означает возведение в степень, а не умножение."
    }
  },
  {
    question: "Какой метод используется для удаления последнего элемента из списка?",
    options: ["list.remove()", "list.delete()", "list.pop()", "list.clear()"],
    answer: "list.pop()",
    explanation: {
      correct: "Метод pop() удаляет и возвращает последний элемент списка. Если указан индекс, удаляет элемент с этим индексом.",
      incorrect: "Неверно. pop() удаляет последний элемент, remove() удаляет по значению, clear() очищает весь список."
    }
  },
  {
    question: "Что такое PEP 8?",
    options: ["Версия Python", "Стандарт кодирования", "Библиотека", "Тип данных"],
    answer: "Стандарт кодирования",
    explanation: {
      correct: "PEP 8 - это официальный стиль кодирования для Python. Он определяет правила форматирования кода для улучшения читаемости и согласованности.",
      incorrect: "Неверно. PEP 8 - это руководство по стилю написания кода на Python."
    }
  },
  {
    question: "Как правильно создать кортеж в Python?",
    options: ["tuple = [1, 2, 3]", "tuple = (1, 2, 3)", "tuple = {1, 2, 3}", "tuple = <1, 2, 3>"],
    answer: "tuple = (1, 2, 3)",
    explanation: {
      correct: "Кортежи в Python создаются с помощью круглых скобок (). Это упорядоченная неизменяемая коллекция элементов.",
      incorrect: "Неверно. Кортежи создаются с помощью круглых скобок ()."
    }
  },
  {
    question: "Что делает функция print() в Python?",
    options: ["Считывает ввод пользователя", "Выводит данные на экран", "Выполняет математические операции", "Создает переменные"],
    answer: "Выводит данные на экран",
    explanation: {
      correct: "Функция print() выводит переданные ей аргументы на экран или в стандартный поток вывода. Это основной способ отображения информации.",
      incorrect: "Неверно. print() используется только для вывода данных."
    }
  },
  {
    question: "Какой тип данных имеет результат выражения 5.0?",
    options: ["<class 'int'>", "<class 'float'>", "<class 'double'>", "<class 'decimal'>"],
    answer: "<class 'float'>",
    explanation: {
      correct: "Числа с десятичной точкой в Python имеют тип float. Даже если после точки нули, это все равно float.",
      incorrect: "Неверно. Любое число с десятичной точкой имеет тип float, даже 5.0."
    }
  },
  {
    question: "Как правильно получить элемент из списка по индексу?",
    options: ["list.get(0)", "list[0]", "list.item(0)", "list.at(0)"],
    answer: "list[0]",
    explanation: {
      correct: "Для доступа к элементу списка по индексу используется квадратная скобка с индексом внутри. Индексация начинается с 0.",
      incorrect: "Неверно. В Python для доступа к элементам списка используется синтаксис [индекс]."
    }
  },
  {
    question: "Что такое строка в Python?",
    options: ["Последовательность символов", "Число", "Функция", "Оператор"],
    answer: "Последовательность символов",
    explanation: {
      correct: "Строка в Python - это последовательность символов, заключенная в кавычки. Это неизменяемый тип данных для хранения текстовой информации.",
      incorrect: "Неверно. Строка - это последовательность символов, а не число, функция или оператор."
    }
  },
  {
    question: "Какой оператор используется для остатка от деления?",
    options: ["/", "//", "%", "**"],
    answer: "%",
    explanation: {
      correct: "Оператор % возвращает остаток от деления одного числа на другое. Например, 10 % 3 = 1, потому что 10 = 3×3 + 1.",
      incorrect: "Неверно. % возвращает остаток от деления, / - обычное деление, // - целочисленное деление."
    }
  },
  {
    question: "Как правильно создать многострочный комментарий в Python?",
    options: ["/* комментарий */", "'''комментарий'''", '"""комментарий"""', "Варианты 2 и 3"],
    answer: "Варианты 2 и 3",
    explanation: {
      correct: "В Python нет специального синтаксиса для многострочных комментариев, но можно использовать тройные одинарные или двойные кавычки для создания строк, которые игнорируются, если не присвоены переменной.",
      incorrect: "Неверно. В Python для многострочных комментариев можно использовать тройные кавычки."
    }
  },
  {
    question: "Что делает метод split() для строки?",
    options: ["Объединяет строки", "Разделяет строку на части", "Заменяет символы", "Удаляет пробелы"],
    answer: "Разделяет строку на части",
    explanation: {
      correct: "Метод split() разделяет строку на список подстрок по указанному разделителю (по умолчанию - пробелы). Например, 'a b c'.split() вернет ['a', 'b', 'c'].",
      incorrect: "Неверно. split() разделяет строку на части, а не объединяет или заменяет."
    }
  },
  {
    question: "Какой тип данных используется для хранения истинности в Python?",
    options: ["<class 'bool'>", "<class 'boolean'>", "<class 'logic'>", "<class 'truefalse'>"],
    answer: "<class 'bool'>",
    explanation: {
      correct: "Логические значения в Python имеют тип bool и могут принимать значения True или False. Это основной тип для условных выражений.",
      incorrect: "Неверно. В Python логические значения имеют тип bool, а не boolean."
    }
  }
];