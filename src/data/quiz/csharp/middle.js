export default [
  {
    question: "Что такое LINQ и для чего он используется?",
    options: [
      "Language Integrated Query для запросов к коллекциям и данным",
      "Библиотека для сетевых запросов",
      "Система логирования",
      "Метод оптимизации"
    ],
    answer: "Language Integrated Query для запросов к коллекциям и данным",
    explanation: {
      correct: "LINQ (Language Integrated Query) предоставляет унифицированный синтаксис для выполнения запросов к различным источникам данных, включая коллекции, базы данных и XML",
      incorrect: "Неверно, LINQ - это мощная система запросов, интегрированная в C#, для работы с коллекциями и другими источниками данных"
    }
  },
  {
    question: "Чем отличается List<T> от IEnumerable<T>?",
    options: [
      "List<T> - конкретная коллекция с методами, IEnumerable<T> - интерфейс для перечисления",
      "List<T> быстрее",
      "IEnumerable<T> позволяет модификацию",
      "List<T> не поддерживает LINQ"
    ],
    answer: "List<T> - конкретная коллекция с методами, IEnumerable<T> - интерфейс для перечисления",
    explanation: {
      correct: "List<T> - это конкретная реализация изменяемой коллекции, IEnumerable<T> - интерфейс, предоставляющий возможность перечисления элементов",
      incorrect: "Неверно, List<T> - это конкретная коллекция с методами добавления/удаления, IEnumerable<T> - интерфейс для последовательного доступа"
    }
  },
  {
    question: "Что такое async/await в C#?",
    options: [
      "Синтаксис для асинхронного программирования без блокировки потока",
      "Новый тип данных",
      "Метод многопоточности",
      "Система таймеров"
    ],
    answer: "Синтаксис для асинхронного программирования без блокировки потока",
    explanation: {
      correct: "Async/await позволяет писать асинхронный код, который выглядит синхронно, не блокируя поток при ожидании операций ввода-вывода",
      incorrect: "Неверно, async/await - это синтаксис для упрощения асинхронного программирования, позволяющий писать неблокирующий код"
    }
  },
  {
    question: "Что такое delegates в C#?",
    options: [
      "Тип, представляющий ссылку на метод",
      "Делегаты для управления",
      "Методы для наследования",
      "Система событий"
    ],
    answer: "Тип, представляющий ссылку на метод",
    explanation: {
      correct: "Delegate - это тип, который представляет ссылку на метод с определенной сигнатурой, позволяя передавать методы как параметры",
      incorrect: "Неверно, delegate - это тип-указатель на метод, позволяющий инкапсулировать методы и передавать их как параметры"
    }
  },
  {
    question: "Чем отличается Dictionary<TKey, TValue> от Hashtable?",
    options: [
      "Dictionary - типобезопасная обобщенная коллекция",
      "Hashtable быстрее",
      "Dictionary не позволяет null",
      "Hashtable современнее"
    ],
    answer: "Dictionary - типобезопасная обобщенная коллекция",
    explanation: {
      correct: "Dictionary<TKey, TValue> является обобщенной (generic) коллекцией, обеспечивающей типобезопасность, в отличие от Hashtable, который работает с объектами",
      incorrect: "Неверно, основное различие в типобезопасности: Dictionary работает с конкретными типами, Hashtable - с object"
    }
  },
  {
    question: "Что такое events в C# и как они связаны с delegates?",
    options: [
      "Специальные delegates для реализации шаблона издатель-подписчик",
      "События системы",
      "Методы для многопоточности",
      "Тип данных для времени"
    ],
    answer: "Специальные delegates для реализации шаблона издатель-подписчик",
    explanation: {
      correct: "Events - это специализированные delegates, предназначенные для реализации шаблона проектирования 'наблюдатель' или 'издатель-подписчик'",
      incorrect: "Неверно, events в C# - это механизм, построенный на delegates, для реализации шаблона издатель-подписчик"
    }
  },
  {
    question: "Что такое garbage collection в .NET?",
    options: [
      "Автоматическое управление памятью и удаление недостижимых объектов",
      "Удаление всех объектов",
      "Ручное управление памятью",
      "Система оптимизации"
    ],
    answer: "Автоматическое управление памятью и удаление недостижимых объектов",
    explanation: {
      correct: "Garbage collector в .NET автоматически управляет памятью, находя и освобождая память от объектов, на которые больше нет ссылок",
      incorrect: "Неверно, garbage collection - это автоматическая система управления памятью в .NET"
    }
  },
  {
    question: "Что такое boxing и unboxing?",
    options: [
      "Преобразование значимых типов в ссылочные и обратно",
      "Упаковка приложения",
      "Оптимизация памяти",
      "Шифрование данных"
    ],
    answer: "Преобразование значимых типов в ссылочные и обратно",
    explanation: {
      correct: "Boxing - преобразование значимого типа в object или интерфейс, unboxing - обратный процесс, что связано с выделением памяти в куче",
      incorrect: "Неверно, boxing и unboxing - это преобразования между значимыми и ссылочными типами, связанные с производительностью"
    }
  },
  {
    question: "Чем отличается string от StringBuilder?",
    options: [
      "string неизменяемый, StringBuilder изменяемый",
      "StringBuilder быстрее для одиночных операций",
      "string позволяет модификацию",
      "StringBuilder устарел"
    ],
    answer: "string неизменяемый, StringBuilder изменяемый",
    explanation: {
      correct: "String в C# является неизменяемым, каждая операция создает новый объект, StringBuilder предназначен для эффективной модификации строк",
      incorrect: "Неверно, основное различие в изменяемости: string неизменяем, StringBuilder позволяет эффективно модифицировать строку"
    }
  },
  {
    question: "Что такое extension methods?",
    options: [
      "Методы, добавляющие функциональность к существующим типам без изменения их кода",
      "Расширения для IDE",
      "Новые типы данных",
      "Методы для наследования"
    ],
    answer: "Методы, добавляющие функциональность к существующим типам без изменения их кода",
    explanation: {
      correct: "Extension methods позволяют добавлять методы к существующим типам, не изменяя их исходный код и не используя наследование",
      incorrect: "Неверно, extension methods - это статические методы, которые можно вызывать как экземплярные, добавляя функциональность к существующим типам"
    }
  },
  {
    question: "Что такое nullable types в C#?",
    options: [
      "Типы, которые могут содержать null в дополнение к своему значению",
      "Новые типы данных",
      "Методы для проверки null",
      "Система безопасности"
    ],
    answer: "Типы, которые могут содержать null в дополнение к своему значению",
    explanation: {
      correct: "Nullable types (например, int?) позволяют значимым типам принимать значение null, что полезно для баз данных и необязательных значений",
      incorrect: "Неверно, nullable types - это обертки, позволяющие значимым типам иметь значение null"
    }
  },
  {
    question: "Что такое async state machine в C#?",
    options: [
      "Автоматически создаваемая машина состояний для реализации async/await",
      "Состояние асинхронного потока",
      "Метод многопоточности",
      "Система управления"
    ],
    answer: "Автоматически создаваемая машина состояний для реализации async/await",
    explanation: {
      correct: "Компилятор C# преобразует async методы в state machine, которая управляет состоянием асинхронной операции и продолжением выполнения после await",
      incorrect: "Неверно, async state machine - это код, генерируемый компилятором для реализации механизма async/await"
    }
  },
  {
    question: "Что такое covariance и contravariance в generic-ах?",
    options: [
      "Возможность преобразования обобщенных типов на основе иерархии типов",
      "Изменение типов",
      "Метод оптимизации",
      "Система наследования"
    ],
    answer: "Возможность преобразования обобщенных типов на основе иерархии типов",
    explanation: {
      correct: "Covariance (out) позволяет использовать более производный тип, contravariance (in) - более базовый, что полезно для делегатов и интерфейсов",
      incorrect: "Неверно, covariance и contravariance - это возможности преобразования обобщенных типов на основе отношений наследования"
    }
  },
  {
    question: "Что такое IDisposable и using statement?",
    options: [
      "Интерфейс для освобождения неуправляемых ресурсов и блок для автоматического освобождения",
      "Система управления памятью",
      "Метод оптимизации",
      "Тип данных"
    ],
    answer: "Интерфейс для освобождения неуправляемых ресурсов и блок для автоматического освобождения",
    explanation: {
      correct: "IDisposable определяет метод Dispose() для освобождения ресурсов, using statement обеспечивает автоматический вызов Dispose() в блоке finally",
      incorrect: "Неверно, IDisposable и using - это механизм для корректного освобождения неуправляемых ресурсов"
    }
  },
  {
    question: "Что такое reflection в C#?",
    options: [
      "Возможность анализировать и модифицировать типы во время выполнения",
      "Отражение ошибок",
      "Метод оптимизации",
      "Система логирования"
    ],
    answer: "Возможность анализировать и модифицировать типы во время выполнения",
    explanation: {
      correct: "Reflection позволяет получать информацию о типах, создавать экземпляры, вызывать методы и получать доступ к полям во время выполнения",
      incorrect: "Неверно, reflection - это мощный механизм для анализа и работы с типами во время выполнения"
    }
  },
  {
    question: "Что такое attributes в C#?",
    options: [
      "Декларативные метаданные, добавляемые к элементам кода",
      "Свойства классов",
      "Методы доступа",
      "Типы данных"
    ],
    answer: "Декларативные метаданные, добавляемые к элементам кода",
    explanation: {
      correct: "Attributes - это классы, позволяющие добавлять декларативные метаданные к типам, методам, свойствам и другим элементам кода",
      incorrect: "Неверно, attributes - это способ добавления метаданных к элементам кода для последующей обработки через reflection"
    }
  },
  {
    question: "Что такое lambda expressions в C#?",
    options: [
      "Анонимные функции, используемые для создания делегатов",
      "Новые типы данных",
      "Методы для многопоточности",
      "Оптимизация кода"
    ],
    answer: "Анонимные функции, используемые для создания делегатов",
    explanation: {
      correct: "Lambda expressions позволяют создавать анонимные функции, которые могут быть преобразованы в делегаты или деревья выражений",
      incorrect: "Неверно, lambda expressions - это компактный способ создания анонимных функций для делегатов и LINQ"
    }
  },
  {
    question: "Что такое async void и когда его следует использовать?",
    options: [
      "Только для обработчиков событий, так как не позволяет отслеживать выполнение",
      "Для всех асинхронных методов",
      "Для методов без возвращаемого значения",
      "Всегда предпочтительнее Task"
    ],
    answer: "Только для обработчиков событий, так как не позволяет отслеживать выполнение",
    explanation: {
      correct: "Async void следует использовать только для обработчиков событий, так как исключения из таких методов не могут быть перехвачены стандартными средствами",
      incorrect: "Неверно, async void следует использовать с осторожностью, только для событий, так как он не позволяет отслеживать выполнение и обрабатывать исключения"
    }
  },
  {
    question: "Что такое CancellationToken в асинхронных методах?",
    options: [
      "Механизм для отмены асинхронных операций",
      "Токен безопасности",
      "Метод оптимизации",
      "Система управления"
    ],
    answer: "Механизм для отмены асинхронных операций",
    explanation: {
      correct: "CancellationToken позволяет запросить отмену асинхронной операции, что важно для пользовательского интерфейса и долгих операций",
      incorrect: "Неверно, CancellationToken - это механизм для кооперативной отмены асинхронных операций"
    }
  },
  {
    question: "Что такое Task Parallel Library (TPL)?",
    options: [
      "Библиотека для параллельного и асинхронного программирования",
      "Система потоков",
      "Метод оптимизации",
      "Фреймворк для GUI"
    ],
    answer: "Библиотека для параллельного и асинхронного программирования",
    explanation: {
      correct: "TPL предоставляет высокоуровневые абстракции для параллельного выполнения, включая Task, Parallel классы и другие средства",
      incorrect: "Неверно, TPL - это набор API для упрощения параллельного и асинхронного программирования в .NET"
    }
  },
  {
    question: "Что такое async local storage?",
    options: [
      "Контекст, сохраняющийся через асинхронные вызовы",
      "Локальные переменные",
      "Метод хранения",
      "Система памяти"
    ],
    answer: "Контекст, сохраняющийся через асинхронные вызовы",
    explanation: {
      correct: "AsyncLocal<T> позволяет сохранять контекст, который будет доступен через цепочку асинхронных вызовов, полезно для логирования и трассировки",
      incorrect: "Неверно, async local storage - это механизм для сохранения контекста через асинхронные операции"
    }
  },
  {
    question: "Что такое expression trees?",
    options: [
      "Представление кода в виде дерева, используемое LINQ to SQL",
      "Деревья выражений",
      "Метод оптимизации",
      "Система вычислений"
    ],
    answer: "Представление кода в виде дерева, используемое LINQ to SQL",
    explanation: {
      correct: "Expression trees представляют код в виде данных, что позволяет анализировать и преобразовывать его, например, для преобразования LINQ запросов в SQL",
      incorrect: "Неверно, expression trees - это представление кода в виде иерархической структуры, используемое для анализа и трансформации"
    }
  },
  {
    question: "Что такое IAsyncEnumerable<T>?",
    options: [
      "Интерфейс для асинхронных потоков данных",
      "Асинхронная коллекция",
      "Метод многопоточности",
      "Система потоков"
    ],
    answer: "Интерфейс для асинхронных потоков данных",
    explanation: {
      correct: "IAsyncEnumerable<T> позволяет создавать и потреблять асинхронные потоки данных с использованием await foreach",
      incorrect: "Неверно, IAsyncEnumerable<T> - это интерфейс для работы с асинхронными последовательностями, где элементы могут быть получены асинхронно"
    }
  },
  {
    question: "Что такое value tasks и когда их использовать?",
    options: [
      "Альтернатива Task для оптимизации, когда операция часто завершается синхронно",
      "Быстрые задачи",
      "Метод оптимизации",
      "Система управления"
    ],
    answer: "Альтернатива Task для оптимизации, когда операция часто завершается синхронно",
    explanation: {
      correct: "ValueTask<T> может избежать выделения памяти в куче, когда операция завершается синхронно, что полезно для высокопроизводительных сценариев",
      incorrect: "Неверно, ValueTask<T> используется для оптимизации, когда асинхронная операция часто завершается синхронно и можно избежать аллокаций"
    }
  },
  {
    question: "Что такое channels в System.Threading.Channels?",
    options: [
      "Механизм для передачи данных между производителями и потребителями",
      "Сетевые каналы",
      "Метод многопоточности",
      "Система связи"
    ],
    answer: "Механизм для передачи данных между производителями и потребителями",
    explanation: {
      correct: "Channels предоставляют асинхронную очередь для передачи данных между производителями и потребителями, полезно для producer-consumer сценариев",
      incorrect: "Неверно, channels - это высокоуровневая абстракция для передачи данных между асинхронными компонентами"
    }
  },
  {
    question: "Что такое source generators в C#?",
    options: [
      "Инструмент для генерации кода во время компиляции",
      "Генераторы данных",
      "Метод оптимизации",
      "Система сборки"
    ],
    answer: "Инструмент для генерации кода во время компиляции",
    explanation: {
      correct: "Source generators позволяют анализировать код и генерировать дополнительный код во время компиляции, что устраняет накладные расходы времени выполнения",
      incorrect: "Неверно, source generators - это механизм, позволяющий генерировать код во время компиляции на основе анализа существующего кода"
    }
  },
  {
    question: "Что такое ref structs и когда их использовать?",
    options: [
      "Структуры, которые могут существовать только на стеке",
      "Ссылочные типы",
      "Метод оптимизации",
      "Система памяти"
    ],
    answer: "Структуры, которые могут существовать только на стеке",
    explanation: {
      correct: "Ref structs (например, Span<T>) могут существовать только на стеке и не могут быть полем в классе, что позволяет создавать безопасные высокоэффективные абстракции",
      incorrect: "Неверно, ref structs - это структуры, ограниченные стеком, используемые для создания эффективных и безопасных абстракций над памятью"
    }
  },
  {
    question: "Что такое pattern matching в C#?",
    options: [
      "Сопоставление с образцом для анализа и извлечения данных",
      "Поиск шаблонов",
      "Метод оптимизации",
      "Система типов"
    ],
    answer: "Сопоставление с образцом для анализа и извлечения данных",
    explanation: {
      correct: "Pattern matching позволяет проверять типы и извлекать данные в одном выражении, используя конструкции вроде 'is', 'switch expression' и деструктуризацию",
      incorrect: "Неверно, pattern matching - это мощная фича C#, позволяющая анализировать структуру данных и извлекать значения"
    }
  },
  {
    question: "Что такое default interface methods?",
    options: [
      "Возможность предоставлять реализацию по умолчанию в интерфейсах",
      "Методы по умолчанию",
      "Методы для наследования",
      "Система реализации"
    ],
    answer: "Возможность предоставлять реализацию по умолчанию в интерфейсах",
    explanation: {
      correct: "Default interface methods позволяют добавлять реализованные методы в интерфейсы, не нарушая существующие реализации",
      incorrect: "Неверно, default interface methods - это возможность добавлять реализованные методы в интерфейсы, что помогает с эволюцией API"
    }
  },
  {
    question: "Что такое nullable reference types?",
    options: [
      "Система для аннотирования ссылочных типов как nullable или non-nullable",
      "Новые типы данных",
      "Метод оптимизации",
      "Система безопасности"
    ],
    answer: "Система для аннотирования ссылочных типов как nullable или non-nullable",
    explanation: {
      correct: "Nullable reference types позволяют аннотировать ссылочные типы, указывая, могут ли они быть null, что помогает обнаруживать потенциальные NullReferenceException",
      incorrect: "Неверно, nullable reference types - это система аннотаций, помогающая обнаруживать потенциальные ошибки с null на этапе компиляции"
    }
  }
];