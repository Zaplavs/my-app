export default [
  {
    question: "Как правильно объявить переменную в JavaScript?",
    options: ["var myVar", "variable myVar", "declare myVar", "let myVar"],
    answer: "let myVar",
    explanation: {
      correct: "В современном JavaScript переменные объявляются с помощью let, const или var. let и const являются предпочтительными, так как имеют блочную область видимости.",
      incorrect: "Неверно. В JavaScript переменные объявляются с помощью let, const или var, а не с помощью слова 'variable' или 'declare'."
    }
  },
  {
    question: "Какой тип данных имеет значение 42 в JavaScript?",
    options: ["integer", "number", "int", "float"],
    answer: "number",
    explanation: {
      correct: "В JavaScript все числа имеют тип 'number', независимо от того, целые они или с плавающей точкой. Нет отдельных типов для целых и дробных чисел.",
      incorrect: "Неверно. В JavaScript существует только один числовой тип - 'number'."
    }
  },
  {
    question: "Как правильно создать массив в JavaScript?",
    options: ["array = (1, 2, 3)", "array = [1, 2, 3]", "array = {1, 2, 3}", "array = <1, 2, 3>"],
    answer: "array = [1, 2, 3]",
    explanation: {
      correct: "Массивы в JavaScript создаются с помощью квадратных скобок []. Это упорядоченная коллекция элементов, к которым можно обращаться по индексу.",
      incorrect: "Неверно. В JavaScript массивы создаются с помощью квадратных скобок []."
    }
  },
  {
    question: "Какой оператор используется для строгого сравнения в JavaScript?",
    options: ["==", "===", "=", "equals"],
    answer: "===",
    explanation: {
      correct: "Оператор === сравнивает значения по значению и типу, не выполняя приведение типов. Это предотвращает неожиданное поведение при сравнении.",
      incorrect: "Неверно. == выполняет приведение типов, === сравнивает по значению и типу без приведения."
    }
  },
  {
    question: "Как правильно создать функцию в JavaScript?",
    options: ["function myFunction()", "def myFunction()", "func myFunction()", "method myFunction()"],
    answer: "function myFunction()",
    explanation: {
      correct: "Функции в JavaScript объявляются с помощью ключевого слова 'function', за которым следует имя функции и параметры в круглых скобках.",
      incorrect: "Неверно. В JavaScript для создания функций используется только ключевое слово 'function'."
    }
  },
  {
    question: "Что выведет console.log(typeof 'hello')?",
    options: ["string", "text", "char", "object"],
    answer: "string",
    explanation: {
      correct: "Оператор typeof возвращает строку, описывающую тип значения. Для строковых значений он возвращает 'string'.",
      incorrect: "Неверно. typeof для строк возвращает 'string', а не 'text' или 'char'."
    }
  },
  {
    question: "Как правильно создать объект в JavaScript?",
    options: ["obj = [key: value]", "obj = {key: value}", "obj = (key: value)", "obj = <key: value>"],
    answer: "obj = {key: value}",
    explanation: {
      correct: "Объекты в JavaScript создаются с помощью фигурных скобок {} и содержат пары ключ-значение, разделенные двоеточием.",
      incorrect: "Неверно. Объекты создаются с помощью фигурных скобок {}."
    }
  },
  {
    question: "Какой метод добавляет элемент в конец массива?",
    options: ["array.add()", "array.push()", "array.append()", "array.insert()"],
    answer: "array.push()",
    explanation: {
      correct: "Метод push() добавляет один или несколько элементов в конец массива и возвращает новую длину массива.",
      incorrect: "Неверно. В JavaScript для добавления элемента в конец массива используется метод push()."
    }
  },
  {
    question: "Как правильно создать строку в JavaScript?",
    options: ['string = "Hello"', "string = 'Hello'", 'string = `Hello`', "Все варианты"],
    answer: "Все варианты",
    explanation: {
      correct: "В JavaScript строки можно создавать с помощью одинарных, двойных кавычек или обратных кавычек (шаблонные строки). Все три способа корректны.",
      incorrect: "Неверно. В JavaScript можно использовать все три типа кавычек для создания строк."
    }
  },
  {
    question: "Что делает оператор 'typeof' в JavaScript?",
    options: ["Изменяет тип данных", "Возвращает строку с названием типа данных", "Преобразует тип", "Удаляет переменную"],
    answer: "Возвращает строку с названием типа данных",
    explanation: {
      correct: "Оператор typeof возвращает строковое представление типа переданного значения, например 'number', 'string', 'object', 'function' и т.д.",
      incorrect: "Неверно. typeof не изменяет тип, а только возвращает его название в виде строки."
    }
  },
  {
    question: "Как правильно создать комментарий в JavaScript?",
    options: ["// комментарий", "/* комментарий */", "# комментарий", "Варианты 1 и 2"],
    answer: "Варианты 1 и 2",
    explanation: {
      correct: "В JavaScript можно создавать однострочные комментарии с помощью // и многострочные с помощью /* */. Оба способа широко используются.",
      incorrect: "Неверно. В JavaScript используются // и /* */ для комментариев, а не #."
    }
  },
  {
    question: "Что выведет console.log(2 + '2')?",
    options: ["4", "22", "NaN", "Ошибка"],
    answer: "22",
    explanation: {
      correct: "При сложении числа и строки JavaScript преобразует число в строку и выполняет конкатенацию. Поэтому 2 + '2' становится '2' + '2' = '22'.",
      incorrect: "Неверно. JavaScript выполняет конкатенацию строк, а не математическое сложение, когда один из операндов - строка."
    }
  },
  {
    question: "Какой метод преобразует строку в число?",
    options: ["string.toNumber()", "parseInt()", "string.toInt()", "number()"],
    answer: "parseInt()",
    explanation: {
      correct: "Функция parseInt() преобразует строку в целое число. Также можно использовать parseFloat() для чисел с плавающей точкой или унарный плюс (+).",
      incorrect: "Неверно. В JavaScript для преобразования строки в число используется parseInt(), parseFloat() или унарный оператор +."
    }
  },
  {
    question: "Что такое переменная в JavaScript?",
    options: ["Контейнер для хранения данных", "Функция", "Тип данных", "Оператор"],
    answer: "Контейнер для хранения данных",
    explanation: {
      correct: "Переменная в JavaScript - это именованная ссылка на значение в памяти. Это контейнер, в котором можно хранить данные и к которому можно обращаться по имени.",
      incorrect: "Неверно. Переменная - это контейнер для данных, а не функция, тип или оператор."
    }
  },
  {
    question: "Как правильно получить элемент из массива по индексу?",
    options: ["array.get(0)", "array[0]", "array.item(0)", "array.at(0)"],
    answer: "array[0]",
    explanation: {
      correct: "Для доступа к элементу массива по индексу используется квадратная скобка с индексом внутри. Индексация начинается с 0.",
      incorrect: "Неверно. В JavaScript для доступа к элементам массива используется синтаксис [индекс]."
    }
  },
  {
    question: "Что делает функция console.log()?",
    options: ["Считывает ввод пользователя", "Выводит данные в консоль", "Выполняет математические операции", "Создает переменные"],
    answer: "Выводит данные в консоль",
    explanation: {
      correct: "Функция console.log() выводит переданные ей аргументы в консоль браузера или среды выполнения. Это основной способ отладки и просмотра значений.",
      incorrect: "Неверно. console.log() используется только для вывода данных в консоль."
    }
  },
  {
    question: "Какой тип данных имеет значение null в JavaScript?",
    options: ["null", "object", "undefined", "none"],
    answer: "object",
    explanation: {
      correct: "Хотя null представляет 'ничего', typeof null возвращает 'object'. Это известная ошибка в JavaScript, сохраненная для обратной совместимости.",
      incorrect: "Неверно. typeof null возвращает 'object' из-за исторической ошибки в JavaScript."
    }
  },
  {
    question: "Как правильно создать пустой объект?",
    options: ["obj = {}", "obj = new Object()", "obj = Object.create(null)", "Все варианты"],
    answer: "Все варианты",
    explanation: {
      correct: "Пустой объект можно создать тремя способами: с помощью литерала {}, конструктора new Object() или Object.create(null). Все три способа корректны.",
      incorrect: "Неверно. Все три способа создания пустого объекта являются правильными в JavaScript."
    }
  },
  {
    question: "Что делает оператор '===' в JavaScript?",
    options: ["Присваивает значение", "Сравнивает по значению с приведением типов", "Сравнивает по значению и типу без приведения", "Проверяет на null"],
    answer: "Сравнивает по значению и типу без приведения",
    explanation: {
      correct: "Оператор === (строгое равенство) сравнивает два значения по их значению и типу, не выполняя приведение типов. Если типы разные, возвращает false.",
      incorrect: "Неверно. === сравнивает по значению и типу без приведения, в отличие от ==."
    }
  },
  {
    question: "Какой метод удаляет последний элемент из массива?",
    options: ["array.remove()", "array.delete()", "array.pop()", "array.clear()"],
    answer: "array.pop()",
    explanation: {
      correct: "Метод pop() удаляет и возвращает последний элемент массива. Это противоположность методу push().",
      incorrect: "Неверно. В JavaScript для удаления последнего элемента массива используется метод pop()."
    }
  },
  {
    question: "Что такое строка в JavaScript?",
    options: ["Последовательность символов", "Число", "Функция", "Оператор"],
    answer: "Последовательность символов",
    explanation: {
      correct: "Строка в JavaScript - это последовательность символов, заключенная в кавычки. Это неизменяемый тип данных для хранения текстовой информации.",
      incorrect: "Неверно. Строка - это последовательность символов, а не число, функция или оператор."
    }
  },
  {
    question: "Как правильно проверить, является ли значение массивом?",
    options: ["typeof array === 'array'", "array.isArray()", "Array.isArray(array)", "array.isArray()"],
    answer: "Array.isArray(array)",
    explanation: {
      correct: "Метод Array.isArray() - это правильный способ проверки, является ли значение массивом. typeof для массива возвращает 'object', что не помогает.",
      incorrect: "Неверно. Правильный способ - Array.isArray(), так как typeof возвращает 'object' для массивов."
    }
  },
  {
    question: "Что делает оператор '!' в JavaScript?",
    options: ["Увеличивает на 1", "Преобразует в число", "Инвертирует логическое значение", "Удаляет переменную"],
    answer: "Инвертирует логическое значение",
    explanation: {
      correct: "Оператор ! (логическое НЕ) инвертирует логическое значение операнда. !true становится false, !false становится true. Также приводит значение к логическому типу.",
      incorrect: "Неверно. ! инвертирует логическое значение, а не увеличивает число или удаляет переменную."
    }
  },
  {
    question: "Как правильно создать шаблонную строку в JavaScript?",
    options: ['`Hello ${name}`', '"Hello ${name}"', "'Hello ${name}'", "Все варианты"],
    answer: "`Hello ${name}`",
    explanation: {
      correct: "Шаблонные строки создаются с помощью обратных кавычек (`) и позволяют вставлять выражения с помощью ${}. Это современный способ форматирования строк.",
      incorrect: "Неверно. Только обратные кавычки создают шаблонные строки с возможностью интерполяции."
    }
  },
  {
    question: "Что делает метод length для строки?",
    options: ["Измеряет длину в пикселях", "Возвращает количество символов", "Определяет тип данных", "Преобразует в число"],
    answer: "Возвращает количество символов",
    explanation: {
      correct: "Свойство length возвращает количество символов в строке. Это свойство, а не метод, поэтому вызывается без круглых скобок.",
      incorrect: "Неверно. length возвращает количество символов, а не измеряет физическую длину."
    }
  },
  {
    question: "Как правильно объявить константу в JavaScript?",
    options: ["const myVar", "let myVar", "var myVar", "constant myVar"],
    answer: "const myVar",
    explanation: {
      correct: "Константы объявляются с помощью ключевого слова 'const'. После инициализации значение константы нельзя изменить (для примитивов).",
      incorrect: "Неверно. Для констант используется ключевое слово 'const', а не 'constant'."
    }
  },
  {
    question: "Что такое объект в JavaScript?",
    options: ["Коллекция пар ключ-значение", "Число", "Функция", "Оператор"],
    answer: "Коллекция пар ключ-значение",
    explanation: {
      correct: "Объект в JavaScript - это коллекция неупорядоченных пар ключ-значение, где ключи - строки или символы, а значения могут быть любого типа.",
      incorrect: "Неверно. Объект - это коллекция пар ключ-значение, а не просто число или функция."
    }
  },
  {
    question: "Как правильно вызвать функцию в JavaScript?",
    options: ["myFunction", "call myFunction", "myFunction()", "function(myFunction)"],
    answer: "myFunction()",
    explanation: {
      correct: "Функция вызывается с помощью имени функции и круглых скобок (). Если функция принимает аргументы, они передаются внутри скобок.",
      incorrect: "Неверно. Функция вызывается с помощью имени и круглых скобок ()."
    }
  },
  {
    question: "Что делает оператор '&&' в JavaScript?",
    options: ["Логическое И", "Логическое ИЛИ", "Логическое НЕ", "Сравнение"],
    answer: "Логическое И",
    explanation: {
      correct: "Оператор && (логическое И) возвращает true, если оба операнда истинны. Также используется для условного выполнения (short-circuit evaluation).",
      incorrect: "Неверно. && означает логическое И, || - логическое ИЛИ, ! - логическое НЕ."
    }
  },
  {
    question: "Как правильно проверить, определена ли переменная?",
    options: ["typeof variable !== 'undefined'", "variable.exists()", "isDefined(variable)", "variable !== null"],
    answer: "typeof variable !== 'undefined'",
    explanation: {
      correct: "Проверка typeof variable !== 'undefined' безопасно проверяет, определена ли переменная, даже если она не была объявлена (избегает ReferenceError).",
      incorrect: "Неверно. Правильный способ - использовать typeof, так как он не вызывает ошибку при необъявленных переменных."
    }
  }
];