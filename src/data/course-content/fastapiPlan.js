export const fastapiPlan = [
  // МОДУЛЬ 1: ВВЕДЕНИЕ В FASTAPI — Основы и первые шаги
  {
    id: 'module-1',
    title: 'Введение в FastAPI: создание первого веб-API',
    description: 'Познакомимся с FastAPI, установим необходимые инструменты и создадим простое API.',
    lessons: [
      {
        id: 1,
        title: 'Что такое FastAPI и почему он хорош',
        content: `
          FastAPI — это современный, быстрый (высокопроизводительный) веб-фреймворк для создания API с использованием Python 3.7+.
          Основные преимущества:
          - Высокая скорость (сопоставима с Node.js и Go)
          - Автоматическая генерация документации (Swagger UI, ReDoc)
          - Простота использования и интуитивность
          - Поддержка асинхронного программирования
          - Строгая проверка типов данных
        `,
        task: 'Изучите официальную документацию FastAPI (https://fastapi.tiangolo.com/). Понимание того, что такое API и HTTP-запросы, приветствуется.'
      },
      {
        id: 2,
        title: 'Установка и настройка окружения',
        content: `
          Для работы с FastAPI вам понадобится Python 3.7+.
          Установка FastAPI и сервера (например, Uvicorn):
          pip install "fastapi[all]"
          Это установит FastAPI, Uvicorn (сервер), Pydantic и другие полезные зависимости.
          Рекомендуется использовать виртуальное окружение:
          python -m venv venv
          source venv/bin/activate # Linux/macOS
          venv\\Scripts\\activate # Windows
        `,
        task: 'Создайте виртуальное окружение, активируйте его и установите FastAPI с помощью pip.'
      },
      {
        id: 3,
        title: 'Первое приложение: "Hello, World!" API',
        content: `
          Создайте файл main.py.
          Импортируйте FastAPI: from fastapi import FastAPI
          Создайте экземпляр приложения: app = FastAPI()
          Определите маршрут с помощью декоратора @app.get("/"):
          @app.get("/")
          def read_root():
              return {"Hello": "World"}
          Запустите сервер: uvicorn main:app --reload
          Перейдите по адресу http://127.0.0.1:8000
        `,
        task: 'Создайте и запустите простое FastAPI приложение, которое возвращает JSON {"message": "Welcome to FastAPI!"} по корневому пути.'
      },
      {
        id: 4,
        title: 'Документация API: Swagger UI и ReDoc',
        content: `
          Одна из ключевых фишек FastAPI — автоматическая генерация интерактивной документации.
          Перейдите по адресам:
          - http://127.0.0.1:8000/docs — это Swagger UI, интерактивная документация.
          - http://127.0.0.1:8000/redoc — это ReDoc, альтернативный вариант документации.
          Здесь вы можете тестировать свои эндпоинты прямо в браузере.
        `,
        task: 'Откройте автоматически сгенерированную документацию вашего приложения. Изучите, как она выглядит и как с ней взаимодействовать.'
      }
    ]
  },
  // МОДУЛЬ 2: МАРШРУТЫ И ЗАПРОСЫ — Обработка входящих данных
  {
    id: 'module-2',
    title: 'Маршруты и обработка HTTP-запросов',
    description: 'Научимся создавать разные типы маршрутов и работать с параметрами запросов и путей.',
    lessons: [
      {
        id: 5,
        title: 'Методы HTTP: GET, POST, PUT, DELETE',
        content: `
          Основные HTTP-методы:
          - GET: Запрашивает представление ресурса. Должен использоваться только для получения данных.
          - POST: Используется для создания нового ресурса.
          - PUT: Заменяет текущее представление ресурса новым.
          - DELETE: Удаляет указанный ресурс.
          В FastAPI вы используете соответствующие декораторы: @app.get(), @app.post(), @app.put(), @app.delete().
        `,
        task: 'Создайте по одному маршруту для каждого из основных HTTP-методов (GET, POST, PUT, DELETE). Пусть каждый возвращает информацию о методе.'
      },
      {
        id: 6,
        title: 'Параметры пути (Path Parameters)',
        content: `
          Переменные части URL определяются с помощью фигурных скобок: {item_id}
          FastAPI автоматически извлекает эти параметры и передаёт их в функцию.
          Вы можете указать тип данных: def read_item(item_id: int):
          Это обеспечивает автоматическую проверку типов и преобразование данных.
          Пример: @app.get("/items/{item_id}")
        `,
        task: 'Создайте маршрут /items/{item_id}, который принимает целое число. Функция должна возвращать JSON с этим ID и каким-то сообщением.'
      },
      {
        id: 7,
        title: 'Параметры запроса (Query Parameters)',
        content: `
          Параметры строки запроса — это пары ключ-значение, которые идут после ? в URL.
          Пример: /items/?skip=0&limit=10
          В FastAPI их можно определить как обычные параметры функции:
          def read_item(skip: int = 0, limit: int = 10):
          Установка значений по умолчанию делает параметры необязательными.
        `,
        task: 'Создайте маршрут /items/, который принимает необязательные параметры skip (по умолчанию 0) и limit (по умолчанию 10). Верните словарь с этими значениями.'
      },
      {
        id: 8,
        title: 'Объединение параметров пути и запроса',
        content: `
          Вы можете комбинировать path и query параметры в одной функции.
          FastAPI различает их по тому, как они определены в пути и в сигнатуре функции.
          Path-параметры обязательны и являются частью пути.
          Query-параметры определяются как обычные аргументы функции и могут быть обязательными или необязательными.
        `,
        task: 'Создайте маршрут /users/{user_id}/items/, который принимает path-параметр user_id и query-параметры skip и limit. Верните информацию, объединяющую эти данные.'
      }
    ]
  },
  // МОДУЛЬ 3: МОДЕЛИ И ВАЛИДАЦИЯ — Работа со структурированными данными
  {
    id: 'module-3',
    title: 'Модели Pydantic и валидация данных',
    description: 'Научимся определять структуру данных с помощью моделей и автоматически проверять входящие данные.',
    lessons: [
      {
        id: 9,
        title: 'Создание моделей данных с помощью Pydantic',
        content: `
          Pydantic используется для определения структуры данных (моделей).
          Импортируйте BaseModel: from pydantic import BaseModel
          Создайте класс, наследующийся от BaseModel:
          class Item(BaseModel):
              name: str
              description: str | None = None
              price: float
              tax: float | None = None
          Это определяет структуру и типы данных для объекта Item.
        `,
        task: 'Создайте модель Pydantic для представления пользователя (User) с полями: id (int), name (str), email (str), is_active (bool, по умолчанию True).'
      },
      {
        id: 10,
        title: 'Получение и валидация тела запроса (Request Body)',
        content: `
          Для создания ресурсов (POST) данные часто передаются в теле запроса.
          FastAPI автоматически читает тело запроса, парсит его как JSON и валидирует согласно модели.
          Просто объявите параметр функции с типом вашей модели:
          @app.post("/items/")
          async def create_item(item: Item):
              return item
          FastAPI также генерирует примеры в документации на основе моделей.
        `,
        task: 'Создайте POST-маршрут /users/, который принимает объект User в теле запроса. Верните этот объект обратно клиенту.'
      },
      {
        id: 11,
        title: 'Валидация данных и ограничения полей',
        content: `
          Pydantic позволяет добавлять ограничения к полям:
          from pydantic import Field
          class Item(BaseModel):
              name: str = Field(..., min_length=1, max_length=50)
              price: float = Field(..., gt=0) # greater than 0
          Также можно использовать аннотации типов:
          from typing import Annotated
          name: Annotated[str, Field(min_length=1, max_length=50)]
          Это обеспечивает автоматическую проверку данных на стороне сервера.
        `,
        task: 'Модифицируйте модель User, добавив ограничения: длина имени от 2 до 50 символов, email должен быть валидным (Pydantic это проверяет автоматически), id должен быть положительным.'
      }
    ]
  },
  // МОДУЛЬ 4: ЗАВИСИМОСТИ И БАЗЫ ДАННЫХ — Интеграция с внешними ресурсами
  {
    id: 'module-4',
    title: 'Зависимости и работа с базами данных',
    description: 'Освоим внедрение зависимостей и подключим наше API к базе данных.',
    lessons: [
      {
        id: 12,
        title: 'Внедрение зависимостей (Dependencies) в FastAPI',
        content: `
          Зависимости позволяют внедрять повторно используемый код (например, проверку аутентификации, подключение к БД).
          Определяются с помощью функций и декоратора Depends.
          Пример:
          from fastapi import Depends
          def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
              return {"q": q, "skip": skip, "limit": limit}
          @app.get("/items/")
          async def read_items(commons: dict = Depends(common_parameters)):
        `,
        task: 'Создайте зависимость, которая проверяет наличие заголовка X-API-Key. Используйте эту зависимость в одном из ваших маршрутов.'
      },
      {
        id: 13,
        title: 'Подключение к базе данных (SQLite пример)',
        content: `
          Для работы с БД можно использовать различные ORM/драйверы.
          Пример с SQLite и SQLAlchemy (или простым sqlite3):
          1. Установите зависимости: pip install sqlalchemy
          2. Определите модель SQLAlchemy.
          3. Создайте engine и session.
          4. Используйте сессии в ваших маршрутах.
          Для простоты можно начать с sqlite3.
          Важно: подключение к БД часто реализуется через зависимости.
        `,
        task: 'Создайте простую базу данных SQLite в памяти. Определите таблицу для пользователей. Создайте маршруты для добавления и получения пользователей из БД.'
      },
      {
        id: 14,
        title: 'CRUD-операции: Создание, Чтение, Обновление, Удаление',
        content: `
          CRUD — основные операции для работы с данными.
          Create (POST): Создание нового ресурса.
          Read (GET): Получение одного или списка ресурсов.
          Update (PUT/PATCH): Обновление существующего ресурса.
          Delete (DELETE): Удаление ресурса.
          В FastAPI это реализуется с помощью соответствующих HTTP-методов и взаимодействия с БД.
        `,
        task: 'Реализуйте полный CRUD для сущности (например, Item) с использованием вашей базы данных. Создайте маршруты для создания, получения (всех и по ID), обновления и удаления элементов.'
      }
    ]
  },
  // МОДУЛЬ 5: БЕЗОПАСНОСТЬ И ОШИБКИ — Защита и корректная обработка
  {
    id: 'module-5',
    title: 'Безопасность и обработка ошибок',
    description: 'Сделаем наше API безопасным и научимся правильно обрабатывать ошибки.',
    lessons: [
      {
        id: 15,
        title: 'Обработка ошибок и исключений',
        content: `
          FastAPI предоставляет удобные способы возврата ошибок.
          Импортируйте HTTPException: from fastapi import HTTPException
          Вызывайте её внутри функции маршрута:
          raise HTTPException(status_code=404, detail="Item not found")
          FastAPI автоматически преобразует её в правильный HTTP-ответ.
          Также можно использовать Response-модели и коды состояния в декораторах.
        `,
        task: 'В ваших CRUD-операциях добавьте проверки и возвращайте HTTP 404, если ресурс не найден, и HTTP 400 при неверных данных.'
      },
      {
        id: 16,
        title: 'Аутентификация и авторизация (базовый уровень)',
        content: `
          Аутентификация — проверка личности пользователя (например, по логину/паролю).
          Авторизация — проверка прав доступа.
          Простой способ: HTTP Basic Auth.
          from fastapi.security import HTTPBasic, HTTPBasicCredentials
          security = HTTPBasic()
          Используйте Depends(security) в маршруте.
          Для продакшена рекомендуются токены (JWT) и более сложные схемы.
        `,
        task: 'Добавьте базовую HTTP Basic Auth к одному из ваших маршрутов. Проверьте её работу через Swagger UI или Postman.'
      }
    ]
  },
  // МОДУЛЬ 6: ПРАКТИКА — Создание мини-проекта
  {
    id: 'module-6',
    title: 'Практика: создание RESTful API для блога',
    description: 'Применим все полученные знания для создания полноценного API для блога.',
    lessons: [
      {
        id: 17,
        title: 'Проектирование API для блога',
        content: `
          Определим основные сущности: User, Post, Comment.
          Продумаем эндпоинты:
          - /users/, /users/{id}
          - /posts/, /posts/{id}
          - /posts/{post_id}/comments/, /comments/{id}
          Определим, какие операции (CRUD) доступны для каждой сущности.
          Продумаем структуру моделей данных.
        `,
        task: 'Создайте спецификацию (список) эндпоинтов и моделей данных для вашего блог-API. Определите, какие зависимости могут понадобиться.'
      },
      {
        id: 18,
        title: 'Реализация блог-API',
        content: `
          Объедините всё, что вы узнали:
          - Модели Pydantic и SQLAlchemy
          - Маршруты для всех сущностей
          - Валидация данных
          - Работа с БД
          - Обработка ошибок
          - Базовая аутентификация (по желанию)
          - Хорошо структурированный код
        `,
        task: 'Реализуйте полноценное API для блога по вашей спецификации. Убедитесь, что оно работает корректно, документация доступна, а ошибки обрабатываются.'
      }
    ]
  }
];