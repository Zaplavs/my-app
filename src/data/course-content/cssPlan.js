export const cssPlan = [
  // МОДУЛЬ 1: ОСНОВЫ CSS — Что такое CSS и как с ним работать
  {
    id: 'module-1',
    title: 'Основы CSS: как делать сайты красивыми',
    description: 'Научимся подключать стили и задавать базовый внешний вид страницы.',
    lessons: [
      {
        id: 1,
        title: 'Что такое CSS и как его подключить',
        content: `
          CSS (Cascading Style Sheets) — это язык, который отвечает за внешний вид сайта: цвета, шрифты, отступы и многое другое.
          Без CSS сайт выглядит как сухой текст. С ним — как красивый дизайн.

          Есть три способа подключить CSS:
          - Внешний файл (наиболее правильный)
          - Внутри тега <style> в HTML
          - Прямо в атрибуте style элемента (инлайн)

          Совет: всегда используйте внешний файл — так удобнее управлять стилями.
        `,
        task: 'Создайте файл style.css, подключите его к HTML и измените фон страницы на светло-серый, а текст — на тёмно-синий.'
      },
      {
        id: 2,
        title: 'Как устроен CSS: селекторы и правила',
        content: `
          Каждое правило в CSS состоит из двух частей:
          - Селектор — что мы хотим стилизовать (например, все абзацы)
          - Блок объявлений — какие стили применить (цвет, размер и т.д.)

          Пример:
          p {
            color: red;
            font-size: 16px;
          }

          Также можно добавлять комментарии: /* Это комментарий */
        `,
        task: 'Напишите 3 CSS-правила для тегов h1, p и body. Добавьте пояснения в комментариях.'
      },
      {
        id: 3,
        title: 'Как выбирать элементы: селекторы',
        content: `
          Чтобы применить стиль, нужно "найти" нужный элемент. Помогают селекторы:
          - p — все теги <p>
          - .title — все элементы с class="title"
          - #header — элемент с id="header"
          - * — все элементы на странице (универсальный)

          Селекторы можно объединять: h1, p, .note — стили для всех сразу.
        `,
        task: 'Создайте три разных элемента (заголовок, абзац, div) и примените к ним стили с помощью разных селекторов.'
      },
      {
        id: 4,
        title: 'Кто главный? Приоритет стилей',
        content: `
          Что будет, если два правила пытаются изменить один и тот же элемент?
          Браузер решает это по правилам:
          - Более конкретный селектор побеждает (id > class > тег)
          - Позже написанное правило имеет приоритет
          - !important — "суперсила", но использовать его нужно редко

          Совет: старайтесь обходиться без !important — это признак плохой структуры.
        `,
        task: 'Примените разные стили к одному элементу разными способами. Посмотрите, какой стиль "победит".'
      }
    ]
  },

  // МОДУЛЬ 2: ТЕКСТ И БЛОКИ — Делаем контент приятным для глаз
  {
    id: 'module-2',
    title: 'Оформление текста и блоков',
    description: 'Научимся красиво оформлять текст и понимать, как устроены элементы на странице.',
    lessons: [
      {
        id: 5,
        title: 'Цвета и шрифты',
        content: `
          Цвета можно задавать по-разному:
          - HEX: #ff6347 (томатный)
          - RGB: rgb(255, 99, 71)
          - HSL: hsl(9, 100%, 64%)
          - Названия: red, blue, green

          Шрифты:
          - font-family: 'Arial', sans-serif
          - font-size: 16px
          - font-weight: bold (или 700)
          - color: цвет текста
        `,
        task: 'Установите для страницы шрифт Arial, размер 18px, жирность — нормальную, цвет текста — серый, фон — белый.'
      },
      {
        id: 6,
        title: 'Как выглядит текст: выравнивание, интервалы и декор',
        content: `
          Текст можно улучшить с помощью:
          - text-align: left, center, right
          - line-height: расстояние между строками
          - text-decoration: underline, none (для ссылок)
          - letter-spacing: расстояние между буквами
          - text-shadow: тень текста
        `,
        task: 'Создайте абзац с выравниванием по центру, межстрочным интервалом 1.6, тенью и увеличенным расстоянием между буквами.'
      },
      {
        id: 7,
        title: 'Блочная модель: как устроены элементы',
        content: `
          Каждый элемент — как коробка:
          - content — содержимое (текст, картинка)
          - padding — внутренние отступы
          - border — граница
          - margin — внешние отступы

          Общая ширина = ширина + padding + border + margin
        `,
        task: 'Создайте несколько div-блоков, добавьте им padding, border и margin. Включите border: 1px solid red, чтобы видеть границы.'
      }
    ]
  },

  // МОДУЛЬ 3: РАСПОЛОЖЕНИЕ — Как размещать элементы на странице
  {
    id: 'module-3',
    title: 'Позиционирование и компоновка',
    description: 'Научимся управлять расположением элементов: от простых до сложных макетов.',
    lessons: [
      {
        id: 8,
        title: 'Как двигать элементы: position',
        content: `
          Свойство position определяет, как элемент ведёт себя на странице:
          - static — обычное положение
          - relative — сдвиг относительно своего места
          - absolute — позиционирование внутри родителя
          - fixed — "прилипает" к окну (например, шапка)
          - sticky — прилипает при прокрутке

          Свойства top, right, bottom, left — указывают смещение.
        `,
        task: 'Создайте элемент, который "прилипает" к верху при прокрутке (position: sticky).'
      },
      {
        id: 9,
        title: 'Как элементы ведут себя: display и поток',
        content: `
          Свойство display определяет, как элемент отображается:
          - block: занимает всю ширину, переносится на новую строку
          - inline: идёт в строку, не переносится
          - inline-block: как inline, но с padding/margin
          - none: скрывает элемент

          "Поток документа" — как элементы естественно располагаются.
        `,
        task: 'Превратите ссылки в блоки, чтобы они занимали всю ширину. Сделайте блоки inline — посмотрите, как меняется поведение.'
      },
      {
        id: 10,
        title: 'Flexbox: гибкие строки и столбцы',
        content: `
          Flexbox — идеален для выравнивания элементов в строку или столбец.
          Просто задайте контейнеру display: flex — и управляйте:
          - justify-content: как элементы ведут себя по основной оси
          - align-items: по поперечной оси
          - flex-direction: строка или столбец

          Отлично подходит для навигации, карточек и центрирования.
        `,
        task: 'Создайте контейнер с 3 блоками. Выровняйте их по центру и распределите равномерно по ширине.'
      },
      {
        id: 11,
        title: 'CSS Grid: сетка для сложных макетов',
        content: `
          Grid — как таблица, но мощнее. Позволяет создавать двумерные макеты (и по горизонтали, и по вертикали).
          grid-template-columns: задаёт столбцы
          grid-gap: отступы между ячейками
          grid-area: можно задать имя области (header, sidebar и т.д.)

          Идеально для целых страниц.
        `,
        task: 'Создайте макет из 3 строк и 3 столбцов. Разместите в нём блоки: шапка, меню, контент, боковая панель, футер.'
      }
    ]
  },

  // МОДУЛЬ 4: АДАПТИВНОСТЬ И ЕДИНИЦЫ — Сайт под любой экран
  {
    id: 'module-4',
    title: 'Адаптивность и современные техники',
    description: 'Сделаем сайт красивым на телефоне, планшете и компьютере.',
    lessons: [
      {
        id: 12,
        title: 'Адаптивный дизайн: медиазапросы',
        content: `
          @media — позволяет задавать стили только при определённых условиях.
          Например: "если ширина экрана меньше 768px — сделать шрифт меньше".

          Частые брейкпоинты:
          - Мобильные: до 768px
          - Планшеты: 768–1024px
          - Десктоп: от 1024px

          Это основа адаптивности!
        `,
        task: 'Сделайте так, чтобы на узких экранах текст становился меньше, а блоки — занимали всю ширину.'
      },
      {
        id: 13,
        title: 'Единицы измерения: px, em, rem, %, vw и др.',
        content: `
          px — фиксированный размер
          % — относительно родителя
          em — относительно шрифта родителя
          rem — относительно корня (html)
          vw/vh — 1% от ширины/высоты экрана

          Совет: используйте rem для шрифтов и отступов — это удобно для адаптивности.
        `,
        task: 'Задайте шрифт в rem, отступы — в %, а ширину блока — в vw. Проверьте, как всё меняется при масштабировании.'
      },
      {
        id: 14,
        title: 'Псевдоклассы и псевдоэлементы',
        content: `
          :hover — когда наводим мышь
          :focus — когда элемент в фокусе (например, при вводе)
          ::before и ::after — добавляют "виртуальные" элементы
          ::first-line — стилизует первую строку абзаца

          Отлично для интерактива и декора.
        `,
        task: 'Добавьте эффект при наведении на кнопку. Через ::before добавьте иконку перед ссылкой.'
      }
    ]
  },

  // МОДУЛЬ 5: ИНТЕРАКТИВНОСТЬ — Красивые кнопки и анимации
  {
    id: 'module-5',
    title: 'Интерактивность: формы, кнопки и анимации',
    description: 'Оживим сайт: красивые формы, кнопки и плавные эффекты.',
    lessons: [
      {
        id: 15,
        title: 'Стилизация форм и кнопок',
        content: `
          Поля ввода, кнопки, чекбоксы — всё можно стилизовать.
          border-radius — скруглённые углы
          outline: none — убираем стандартное выделение
          cursor: pointer — меняем курсор

          Совет: делайте кнопки кликабельными и понятными.
        `,
        task: 'Создайте форму с полями и кнопкой. Сделайте кнопку с закруглёнными углами и эффектом при наведении.'
      },
      {
        id: 16,
        title: 'Анимации и плавные переходы',
        content: `
          transition — плавное изменение свойств (например, цвета)
          animation + @keyframes — сложные анимации (вращение, появление)

          Пример: при наведении кнопка плавно меняет цвет.
        `,
        task: 'Добавьте плавное изменение цвета кнопки при наведении. Сделайте анимацию "появления" блока при загрузке.'
      }
    ]
  },

  // МОДУЛЬ 6: ПРАКТИКА — Применяем всё на реальном проекте
  {
    id: 'module-6',
    title: 'Практика: создание адаптивного лендинга',
    description: 'Соберём всё вместе и создадим настоящий сайт.',
    lessons: [
      {
        id: 17,
        title: 'Как организовать CSS-код',
        content: `
          По мере роста проекта важно не запутаться.
          Методологии:
          - BEM: block__element--modifier (например, btn__text--big)
          - SMACSS/ITCSS: разделение на категории (базовые стили, макет, компоненты)

          Также помогают:
          - Комментарии
          - Группировка стилей
          - Отдельные файлы для больших проектов
        `,
        task: 'Разделите свой CSS на секции: "Общие стили", "Шапка", "Форма", "Футер". Добавьте комментарии.'
      },
      {
        id: 18,
        title: 'Итоговый проект: адаптивный лендинг',
        content: `
          Время применить всё, что вы узнали!
          Создайте одностраничный сайт с:
          - Адаптивным меню
          - Секциями: приветствие, услуги, отзывы, форма
          - Анимацией при прокрутке
          - Поддержкой мобильных устройств

          Это ваш первый полноценный сайт!
        `,
        task: 'Разработайте лендинг с использованием Flexbox, Grid, медиазапросов, анимаций и адаптивных единиц. Проверьте его на разных устройствах.'
      }
    ]
  }
];