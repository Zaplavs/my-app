export const jsPlan = [
  {
    id: 'module-1',
    title: 'Введение в JavaScript и настройка среды',
    lessons: [
      {
        id: 1,
        title: 'Что такое JavaScript и зачем он нужен?',
        content:
          'Объяснение роли JavaScript во вебе: интерактивность, динамическое обновление страниц. Разница между HTML, CSS и JS. Где ещё используется JS (сервер, мобильные приложения).',
        task: 'Напишите 2–3 предложения о том, где вы уже видели JavaScript в действии (например, на сайтах, в приложениях).'
      },
      {
        id: 2,
        title: 'Подключение JavaScript к HTML',
        content:
          'Способы подключения: внутренний <script>, внешний файл .js, атрибут src. Размещение тега <script> — в <head> или перед </body>. Понятие DOM.',
        task: 'Создайте HTML-файл и подключите к нему внешний JS-файл. Выведите сообщение через console.log().'
      },
      {
        id: 3,
        title: 'Работа с консолью браузера',
        content:
          'Открытие DevTools (F12). Использование console.log(), alert(), prompt(). Основы отладки. Понимание синтаксических ошибок.',
        task: 'Откройте консоль и выполните: alert("Привет, мир!"); console.log("Проверка"); prompt("Как вас зовут?");'
      }
    ]
  },
  {
    id: 'module-2',
    title: 'Переменные и типы данных',
    lessons: [
      {
        id: 4,
        title: 'Переменные: let, const, var',
        content:
          'Объявление переменных. Разница между let, const и var. Область видимости. Правила именования переменных.',
        task: 'Создайте переменные для имени, возраста и города проживания. Выведите их через console.log().'
      },
      {
        id: 5,
        title: 'Типы данных в JavaScript',
        content:
          'Основные типы: string, number, boolean, undefined, null. Проверка типа через typeof. Динамическая типизация.',
        task: 'Создайте переменные всех типов и выведите их типы с помощью typeof.'
      },
      {
        id: 6,
        title: 'Операторы и выражения',
        content:
          'Арифметические операторы (+, -, *, /, %). Операторы присваивания (+=, -=). Сравнение: ==, ===, !=, !==. Логические операторы: &&, ||, !.',
        task: 'Напишите выражения, которые проверяют: 5 + 3 === 8, строка "hello" !== "world", и результат логического И для двух условий.'
      }
    ]
  },
  {
    id: 'module-3',
    title: 'Условия и логика программы',
    lessons: [
      {
        id: 7,
        title: 'Условный оператор if...else',
        content:
          'Синтаксис if, else, else if. Блоки кода в фигурных скобках. Проверка условий и ветвление логики.',
        task: 'Напишите программу, которая проверяет возраст и выводит, можно ли голосовать (возраст >= 18).'
      },
      {
        id: 8,
        title: 'Тернарный оператор и switch',
        content:
          'Краткая запись условия: условие ? значение1 : значение2. Конструкция switch для множественных проверок.',
        task: 'Перепишите if-проверку возраста через тернарный оператор. Создайте switch для вывода названия дня недели по числу.'
      },
      {
        id: 9,
        title: 'Логические значения и приведение типов',
        content:
          'Понятие true и false. Falsy-значения: 0, "", null, undefined, NaN. Приведение типов в условиях.',
        task: 'Проверьте, как ведут себя разные значения (0, "0", null, undefined) в if-условии.'
      }
    ]
  },
  {
    id: 'module-4',
    title: 'Циклы и повторение действий',
    lessons: [
      {
        id: 10,
        title: 'Цикл for',
        content:
          'Синтаксис for: инициализация, условие, шаг. Использование для перебора чисел, массивов. Инкремент и декремент.',
        task: 'Напишите цикл, выводящий числа от 1 до 10. Затем — только чётные от 1 до 20.'
      },
      {
        id: 11,
        title: 'Цикл while и do...while',
        content:
          'Цикл while: проверка условия перед выполнением. do...while — выполнение хотя бы раз. Когда использовать каждый.',
        task: 'Создайте счётчик, который увеличивается, пока не достигнет 5. Используйте while и do...while.'
      },
      {
        id: 12,
        title: 'break и continue',
        content:
          'Управление ходом цикла: break — выход, continue — пропуск итерации. Полезно при поиске или фильтрации.',
        task: 'Напишите цикл от 1 до 10, который пропускает 5 и останавливается на 8.'
      }
    ]
  },
  {
    id: 'module-5',
    title: 'Функции — кирпичики кода',
    lessons: [
      {
        id: 13,
        title: 'Создание и вызов функций',
        content:
          'Объявление функций: function name(). Параметры и аргументы. Возврат значения через return. Повторное использование кода.',
        task: 'Напишите функцию add(a, b), возвращающую сумму двух чисел. Вызовите её с разными значениями.'
      },
      {
        id: 14,
        title: 'Функциональные выражения и стрелочные функции',
        content:
          'Функция как значение: let func = function(){}. Стрелочные функции: (a, b) => a + b. Отличия и области применения.',
        task: 'Перепишите функцию add через стрелочную функцию. Создайте функцию greet(name), выводящую приветствие.'
      },
      {
        id: 15,
        title: 'Область видимости и замыкания (на базовом уровне)',
        content:
          'Глобальная и локальная область видимости. Переменные внутри функции. Замыкание: функция запоминает окружение.',
        task: 'Создайте функцию, которая возвращает другую функцию, использующую переменную из внешней функции.'
      }
    ]
  },
  {
    id: 'module-6',
    title: 'Массивы и объекты',
    lessons: [
      {
        id: 16,
        title: 'Массивы: хранение списков',
        content:
          'Создание массива: []. Доступ по индексу. Длина: length. Методы: push(), pop(), shift(), unshift(), slice().',
        task: 'Создайте массив с 5 именами. Добавьте ещё одно, удалите первое, выведите длину.'
      },
      {
        id: 17,
        title: 'Объекты: хранение данных с ключами',
        content:
          'Создание объекта: {}. Свойства и методы. Доступ через точку (obj.name) и скобки (obj["name"]). Изменение и добавление свойств.',
        task: 'Создайте объект "человек" с именем, возрастом и методом introduce(), выводящим приветствие.'
      },
      {
        id: 18,
        title: 'Перебор массивов и объектов',
        content:
          'Цикл for...of для массивов. Цикл for...in для объектов. Метод forEach(). Практика итерации.',
        task: 'Переберите массив имён через for...of и объект свойств через for...in.'
      }
    ]
  },
  {
    id: 'module-7',
    title: 'Работа с DOM — управление страницей',
    lessons: [
      {
        id: 19,
        title: 'Что такое DOM и как к нему обращаться?',
        content:
          'DOM как дерево элементов. Поиск элементов: document.getElementById(), querySelector(), querySelectorAll().',
        task: 'Найдите элемент по id и классу, выведите его в консоль.'
      },
      {
        id: 20,
        title: 'Изменение содержимого и стилей',
        content:
          'Изменение текста: innerHTML, textContent. Управление стилями: element.style.color. Работа с атрибутами: getAttribute, setAttribute.',
        task: 'Измените текст абзаца и цвет заголовка на странице с помощью JavaScript.'
      },
      {
        id: 21,
        title: 'Обработка событий',
        content:
          'События: click, input, submit. Метод addEventListener(). Обработчик события. this в контексте события.',
        task: 'Создайте кнопку, при клике на которую меняется фон страницы.'
      }
    ]
  },
  {
    id: 'module-8',
    title: 'Итоговый проект и закрепление',
    lessons: [
      {
        id: 22,
        title: 'Создание To-Do List (список дел)',
        content:
          'Проект: добавление, удаление и отметка задач как выполненных. Использование массива для хранения, DOM, событий и функций.',
        task: 'Реализуйте простой список дел с интерфейсом на HTML и логикой на JavaScript.'
      },
      {
        id: 23,
        title: 'Улучшение проекта: сохранение в localStorage',
        content:
          'Сохранение данных между перезагрузками: localStorage.setItem(), getItem(). Ограничения и безопасность.',
        task: 'Добавьте сохранение задач в localStorage, чтобы они оставались после перезагрузки страницы.'
      },
      {
        id: 24,
        title: 'Итоговое задание: интерактивный калькулятор',
        content:
          'Создание калькулятора с кнопками +, -, *, / и полем ввода. Обработка событий, вычисления, вывод результата.',
        task: 'Реализуйте калькулятор, который работает через кнопки и обновляет результат в реальном времени.'
      },
      {
        id: 25,
        title: 'Что дальше? Путь в веб-разработку',
        content:
          'Обзор следующих шагов: изучение CSS, фреймворков (React), Node.js, Git, сборщиков. Ресурсы: MDN, freeCodeCamp, YouTube.',
        task: 'Составьте план из 3 следующих шагов в изучении JavaScript и веб-разработки.'
      }
    ]
  }
];