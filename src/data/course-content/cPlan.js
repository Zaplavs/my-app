// src/data/cPlan.js
export const cPlan = [
    {
      id: 'module-0',
      title: 'Введение: Что такое C и зачем он тебе?',
      description: 'Разберёмся, что такое C, почему он важен и как настроить среду разработки.',
      lessons: [
        {
          id: 1,
          title: 'Что такое C и почему он — основа всего',
          content: `
            C — это системный язык программирования, созданный в 1970-х. 
            Он лежит в основе операционных систем (включая Linux), драйверов, микроконтроллеров и даже других языков (Python, PHP).

            В C нет магии. Каждая строка — это команда процессору.
            Ты учишься не просто писать код, а **понимать, как работает компьютер**.

            Пример: ОС Linux написана почти полностью на C.
          `,
          task: 'Напишите в 3–4 предложениях, почему, по вашему мнению, важно изучать C, даже если вы не планируете им пользоваться каждый день.'
        },
        {
          id: 2,
          title: 'Установка среды: GCC и ваш первый компилятор',
          content: `
            Чтобы писать на C, нужен компилятор. Самый популярный — **GCC** (GNU Compiler Collection).

            Установка:
            - **Linux (Ubuntu/Debian):**  
              Откройте терминал:  
              \`\`\`bash
              sudo apt update && sudo apt install build-essential
              \`\`\`
            - **Windows:**  
              Установите MinGW или WSL (Windows Subsystem for Linux)
            - **macOS:**  
              \`\`\`bash
              xcode-select --install
              \`\`\`

            Проверка:  
            \`\`\`bash
            gcc --version
            \`\`\`
          `,
          task: 'Установите GCC и проверьте его версию. Сделайте скриншот терминала с результатом.'
        },
        {
          id: 3,
          title: 'Первая программа: Hello, Proletariat!',
          content: `
            Создайте файл **main.c**:

            \`\`\`c
            #include <stdio.h>

            int main() {
                printf("Hello, Proletariat!\\n");
                return 0;
            }
            \`\`\`

            Скомпилируйте:
            \`\`\`bash
            gcc main.c -o hello
            \`\`\`

            Запустите:
            \`\`\`bash
            ./hello
            \`\`\`

            Если видите сообщение — вы победили!
          `,
          task: 'Создайте программу, которая выводит ваше имя и призыв к революции. Скомпилируйте и запустите её.'
        }
      ]
    },

    // МОДУЛЬ 1: ОСНОВЫ СИНТАКСИСА
    {
      id: 'module-1',
      title: 'Основы синтаксиса: переменные, типы и вывод',
      description: 'Научимся работать с данными: числами, текстом и операциями.',
      lessons: [
        {
          id: 4,
          title: 'Переменные и типы данных',
          content: `
            В C нужно явно указывать тип переменной:
            - int — целые числа
            - float — дробные
            - char — один символ
            - double — более точные дробные

            Пример:
            \`\`\`c
            int age = 25;
            float salary = 1500.50;
            char grade = 'A';
            \`\`\`

            Память ограничена — выбирайте тип осознанно.
          `,
          task: 'Объявите три переменные: возраст, имя (первый символ) и среднюю зарплату. Выведите их с помощью printf.'
        },
        {
          id: 5,
          title: 'Форматированный вывод: printf и спецификаторы',
          content: `
            Функция printf() выводит данные. Используйте спецификаторы:
            - %d — для int
            - %f — для float/double
            - %c — для char
            - %s — для строк (пока просто символ)

            Пример:
            \`\`\`c
            printf("Возраст: %d, Зарплата: %.2f\\n", age, salary);
            \`\`\`
            \\.2f — означает 2 знака после запятой.
          `,
          task: 'Выведите данные о рабочем в формате: "Рабочий Иван, 30 лет, зарабатывает 2500.00 руб."'
        },
        {
          id: 6,
          title: 'Ввод с клавиатуры: scanf',
          content: `
            Функция scanf() позволяет вводить данные.
            Важно: перед переменной ставится & (адрес).

            Пример:
            \`\`\`c
            int number;
            printf("Введите число: ");
            scanf("%d", &number);
            printf("Вы ввели: %d\\n", number);
            \`\`\`
          `,
          task: 'Напишите программу, которая спрашивает у пользователя его возраст и выводит: "Через 5 лет вам будет X лет".'
        }
      ]
    },

    // МОДУЛЬ 2: УСЛОВИЯ И ЦИКЛЫ
    {
      id: 'module-2',
      title: 'Управление ходом программы: if и циклы',
      description: 'Научимся принимать решения и повторять действия.',
      lessons: [
        {
          id: 7,
          title: 'Условия: if, else, else if',
          content: `
            Условия позволяют выполнять код только при выполнении условия.

            Пример:
            \`\`\`c
            if (age >= 18) {
                printf("Можно работать на заводе.\\n");
            } else {
                printf("Еще учишься.\\n");
            }
            \`\`\`

            Операторы сравнения: ==, !=, >, <, >=, <=
            Логические: && (и), || (или), ! (не)
          `,
          task: 'Проверьте, может ли человек выйти на митинг (возраст > 16 и здоровье в порядке).'
        },
        {
          id: 8,
          title: 'Циклы: while и for',
          content: `
            Цикл выполняет код несколько раз.

            while:
            \`\`\`c
            int i = 1;
            while (i <= 5) {
                printf("%d. Продолжаем борьбу!\\n", i);
                i++;
            }
            \`\`\`

            for:
            \`\`\`c
            for (int i = 1; i <= 5; i++) {
                printf("%d. Продолжаем борьбу!\\n", i);
            }
            \`\`\`
          `,
          task: 'Напишите цикл, который выводит числа от 10 до 1 (обратный отсчёт).'
        }
      ]
    },

    // МОДУЛЬ 3: ФУНКЦИИ И МАССИВЫ
    {
      id: 'module-3',
      title: 'Функции и массивы: порядок в коде',
      description: 'Разделяй и властвуй: пиши модульный код и работай с коллекциями.',
      lessons: [
        {
          id: 9,
          title: 'Функции: делай, что умеешь',
          content: `
            Функция — это именованный блок кода.

            Пример:
            \`\`\`c
            int add(int a, int b) {
                return a + b;
            }

            int result = add(5, 3);
            \`\`\`

            Прототип: можно объявить функцию до main().
          `,
          task: 'Создайте функцию multiply(a, b), которая возвращает произведение двух чисел. Вызовите её в main().'
        },
        {
          id: 10,
          title: 'Массивы: коллекция рабочих',
          content: `
            Массив — это список элементов одного типа.

            Пример:
            \`\`\`c
            int ages[5] = {25, 30, 22, 35, 28};
            printf("Первый рабочий: %d лет\\n", ages[0]);
            \`\`\`

            Цикл по массиву:
            \`\`\`c
            for (int i = 0; i < 5; i++) {
                printf("Рабочий %d: %d лет\\n", i+1, ages[i]);
            }
            \`\`\`
          `,
          task: 'Создайте массив из 3 зарплат и найдите среднюю.'
        }
      ]
    },

    // МОДУЛЬ 4: УКАЗАТЕЛИ И ПАМЯТЬ
    {
      id: 'module-4',
      title: 'Указатели и память: власть над железом',
      description: 'Поймёшь указатели — поймёшь C. Учимся управлять памятью напрямую.',
      lessons: [
        {
          id: 11,
          title: 'Указатели: что такое & и *',
          content: `
            Указатель — это переменная, хранящая адрес другой переменной.

            \`\`\`c
            int x = 10;
            int *ptr = &x;  // ptr хранит адрес x
            printf("Значение x: %d\\n", *ptr);  // разыменование
            \`\`\`

            Указатели — основа системного программирования.
          `,
          task: 'Создайте указатель на переменную и измените значение через него.'
        },
        {
          id: 12,
          title: 'Динамическая память: malloc и free',
          content: `
            Иногда нужно выделить память во время выполнения.

            \`\`\`c
            int *arr = malloc(5 * sizeof(int));
            if (arr != NULL) {
                arr[0] = 100;
                free(arr);  // не забывайте освобождать!
            }
            \`\`\`

            Утечки памяти — враги революции.
          `,
          task: 'Выделите память под массив из 3 чисел, заполните его и освободите.'
        }
      ]
    },

    // МОДУЛЬ 5: СТРУКТУРЫ И ФАЙЛЫ
    {
      id: 'module-5',
      title: 'Структуры и работа с файлами',
      description: 'Создаём сложные данные и сохраняем правду в файлах.',
      lessons: [
        {
          id: 13,
          title: 'Структуры: создай своего рабочего',
          content: `
            Структура — это способ объединить разные данные.

            \`\`\`c
            struct Worker {
                char name[50];
                int age;
                float salary;
            };

            struct Worker w1 = {"Иван", 30, 2500.0};
            printf("Имя: %s\\n", w1.name);
            \`\`\`
          `,
          task: 'Создайте структуру Worker и заполните данные для двух рабочих.'
        },
        {
          id: 14,
          title: 'Файлы: запиши правду в архив',
          content: `
            Работа с файлами — важная часть C.

            \`\`\`c
            FILE *file = fopen("workers.txt", "w");
            if (file != NULL) {
                fprintf(file, "Имя: %s, Возраст: %d\\n", w1.name, w1.age);
                fclose(file);
            }
            \`\`\`

            Режимы: "w" (запись), "r" (чтение), "a" (добавление).
          `,
          task: 'Запишите данные о рабочем в файл. Затем прочитайте их обратно.'
        }
      ]
    },

    // МОДУЛЬ 6: ФИНАЛ — ПРОЕКТ
    {
      id: 'module-6',
      title: 'Финальный проект: Система учёта труда',
      description: 'Примени всё, что узнал: функции, структуры, файлы, указатели.',
      lessons: [
        {
          id: 15,
          title: 'Постановка задачи',
          content: `
            Создайте программу для завода:
            - Добавление рабочих (имя, возраст, зарплата)
            - Просмотр всех
            - Поиск по имени
            - Сохранение в файл
            - Выход

            Требования:
            - Используйте массив структур (или динамический)
            - Меню в цикле
            - Запись и чтение из файла
          `,
          task: 'Начните проект: создайте структуру, меню и заглушки для функций.'
        },
        {
          id: 16,
          title: 'Реализация и тестирование',
          content: `
            Доделайте все функции:
            - addWorker()
            - showAllWorkers()
            - findWorker()
            - saveToFile()
            - loadFromFile()

            Проверьте:
            - Нет ли утечек памяти
            - Корректно ли сохраняются данные
            - Работает ли на разных системах
          `,
          task: 'Завершите проект. Продемонстрируйте его работу на примере 3 рабочих.'
        }
      
    
  ]
}];