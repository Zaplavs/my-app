export default [
  {
    q: "Что такое JavaScript и для чего он используется?",
    a: "JavaScript — это динамический, интерпретируемый язык программирования, в основном используемый для создания интерактивных страниц в браузере. Также применяется на сервере (Node.js), мобильной и десктоп-разработке.",
    tags: ["введение", "основы"],
    level: "junior"
  },
  {
    q: "Какие типы данных существуют в JavaScript?",
    a: "В JavaScript есть 7 примитивных типов: number, string, boolean, null, undefined, symbol, bigint. Также есть объекты (object) и функции (function).",
    tags: ["типы данных", "основы"],
    level: "junior"
  },
  {
    q: "Чем отличаются let, const и var?",
    a: "var имеет функциональную область видимости и поднимается (hoisting), но не инициализируется. let и const имеют блочную область видимости. const нельзя переназначить после объявления.",
    tags: ["переменные", "область видимости"],
    level: "junior"
  },
  {
    q: "Что такое hoisting?",
    a: "Hoisting — это механизм, при котором переменные и функции поднимаются в начало области видимости перед выполнением кода. При этом переменные, объявленные через var, инициализируются как undefined.",
    tags: ["функции", "переменные", "концепции"],
    level: "junior"
  },
  {
    q: "Как работает typeof и что он возвращает?",
    a: "typeof возвращает строку, указывающую тип значения. Например: typeof 42 — 'number', typeof 'hello' — 'string'. Для null возвращает 'object' из-за исторической ошибки.",
    tags: ["типы данных", "операторы"],
    level: "junior"
  },
  {
    q: "Что такое оператор == и ===? В чём разница?",
    a: "'==' сравнивает значения с приведением типов, а '===' — строгое сравнение без приведения. Рекомендуется использовать === для избежания неожиданных результатов.",
    tags: ["операторы", "сравнение"],
    level: "junior"
  },
  {
    q: "Какие структуры данных вы знаете в JavaScript?",
    a: "Основные структуры: массивы (Array), объекты (Object), Map, Set, WeakMap, WeakSet. Массивы используются для хранения упорядоченных данных, объекты — для ключ-значение.",
    tags: ["коллекции", "структуры данных"],
    level: "junior"
  },
  {
    q: "Что такое функция в JavaScript?",
    a: "Функция — это блок кода, который может быть вызван по имени, принимать параметры и возвращать значение. Функции являются объектами первого класса.",
    tags: ["функции", "основы"],
    level: "junior"
  },
  {
    q: "Как создать функцию в JavaScript?",
    a: "Функцию можно создать с помощью function declaration, function expression или arrow function. Пример: function greet() { console.log('Hello'); }",
    tags: ["функции", "синтаксис"],
    level: "junior"
  },
  {
    q: "Что такое замыкание?",
    a: "Замыкание — это функция, которая имеет доступ к переменным внешней функции даже после её завершения. Это происходит потому, что внутренняя функция сохраняет ссылку на область видимости внешней функции.",
    tags: ["функции", "замыкание"],
    level: "junior"
  },
  {
    q: "Как работают массивы в JavaScript?",
    a: "Массивы — это упорядоченные коллекции значений, к которым можно обращаться по индексу. Они поддерживают методы добавления, удаления и изменения элементов: push(), pop(), shift(), unshift(), slice(), splice() и др.",
    tags: ["массивы", "коллекции"],
    level: "junior"
  },
  {
    q: "Что такое объект в JavaScript?",
    a: "Объект — это коллекция пар ключ-значение. Ключи обычно строки или символы, значения могут быть любого типа. Объекты создаются с помощью литерала {} или new Object().",
    tags: ["объекты", "коллекции"],
    level: "junior"
  },
  {
    q: "Как получить доступ к свойству объекта?",
    a: "Можно использовать точечную нотацию (obj.key) или квадратные скобки (obj['key']). Второй способ полезен, если имя ключа хранится в переменной или содержит пробелы.",
    tags: ["объекты", "доступ"],
    level: "junior"
  },
  {
    q: "Что такое условный оператор if-else?",
    a: "if-else — это конструкция, позволяющая выполнять разные блоки кода в зависимости от истинности условия. Условие преобразуется в логическое значение.",
    tags: ["условия", "ветвление"],
    level: "junior"
  },
  {
    q: "Как работает цикл for?",
    a: "Цикл for повторяет блок кода заданное количество раз. Синтаксис: for (начало; условие; шаг) { ... }. Чаще всего используется для перебора массивов.",
    tags: ["циклы", "итерация"],
    level: "junior"
  },
  {
    q: "Как работает DOM в браузере?",
    a: "DOM (Document Object Model) представляет HTML-документ как дерево объектов, которые можно изменять с помощью JavaScript. Это позволяет динамически обновлять содержимое и стиль страницы.",
    tags: ["dom", "браузер"],
    level: "junior"
  },
  {
    q: "Как найти элемент на странице с помощью JavaScript?",
    a: "Для этого используются методы: document.getElementById(), document.querySelector(), document.querySelectorAll(). Они возвращают один или несколько найденных элементов.",
    tags: ["dom", "поиск элементов"],
    level: "junior"
  },
  {
    q: "Как добавить обработчик события клика?",
    a: "Это можно сделать с помощью addEventListener: element.addEventListener('click', function() { ... }); Можно также использовать inline-свойства, например onclick.",
    tags: ["события", "обработчики"],
    level: "junior"
  },
  {
    q: "Что такое callback-функция?",
    a: "Callback-функция — это функция, переданная в другую функцию в качестве аргумента и вызываемая внутри неё. Используется часто в асинхронном программировании и обработке событий.",
    tags: ["функции", "асинхронность"],
    level: "junior"
  },
  {
    q: "Что такое стрелочные функции?",
    a: "Arrow functions — это более короткий способ записи функций. Не имеют собственного this, arguments, super и new.target. Идеальны для использования в методах массивов и колбэках.",
    tags: ["стрелочные функции", "синтаксис"],
    level: "junior"
  },
  {
    q: "Как проверить, является ли значение NaN?",
    a: "Для этого используется функция isNaN() или Number.isNaN(). Однако Number.isNaN() предпочтительнее, так как не пытается приводить типы перед проверкой.",
    tags: ["типы данных", "проверки"],
    level: "junior"
  },
  {
    q: "Что означает undefined и null?",
    a: "'undefined' означает, что переменная объявлена, но не присвоено значение. 'null' — это специальное значение, представляющее «ничего» или «пустое значение». Типы различаются: typeof undefined — 'undefined', typeof null — 'object'.",
    tags: ["типы данных", "значения"],
    level: "junior"
  }
];