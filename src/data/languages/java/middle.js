export default [
  {
    q: "Что такое JVM, JRE и JDK? В чём их различия?",
    a: "JVM (Java Virtual Machine) — это виртуальная машина, которая исполняет Java-байткод. JRE (Java Runtime Environment) содержит JVM и библиотеки, необходимые для запуска Java-приложений. JDK (Java Development Kit) — это полный комплект разработчика, включающий JRE, компилятор (`javac`), отладчик и другие инструменты."
  },
  {
    q: "Что такое байткод и зачем он нужен?",
    a: "Байткод — это промежуточное представление Java-программы, которое генерируется компилятором `javac`. Он исполняется на JVM, что обеспечивает кроссплатформенность: один и тот же байткод может выполняться на любой платформе с подходящей JVM."
  },
  {
    q: "Какие существуют принципы ООП и как они реализованы в Java?",
    a: "Основные принципы ООП: **инкапсуляция** (ограничение доступа через модификаторы), **наследование** (передача свойств через `extends`), **полиморфизм** (разное поведение методов через переопределение), **абстракция** (выделение ключевых свойств через абстрактные классы и интерфейсы)."
  },
  {
    q: "Что такое интерфейсы и абстрактные классы? В чём разница?",
    a: "Интерфейс — это полностью абстрактный тип (до Java 8), который может содержать методы и константы. С Java 8 появились `default` и `static` методы. Абстрактный класс может иметь реализацию и состояние. Класс может реализовывать несколько интерфейсов, но наследоваться только от одного класса."
  },
  {
    q: "Что такое перегрузка (overloading) и переопределение (overriding) методов?",
    a: "Перегрузка — это создание методов с одинаковым именем, но разными параметрами (количество или тип). Переопределение — это изменение реализации метода в подклассе, который был унаследован от родителя. Переопределяемые методы должны совпадать по сигнатуре."
  },
  {
    q: "Что такое полиморфизм? Приведите пример.",
    a: "Полиморфизм — это способность объекта вести себя по-разному в зависимости от контекста. Пример: метод `draw()` в классах `Circle`, `Square` — вызывается разный код, но через один и тот же интерфейс. Реализуется через наследование и переопределение методов."
  },
  {
    q: "Что такое статические методы и переменные?",
    a: "Статические методы и переменные принадлежат классу, а не его экземпляру. Они создаются один раз и доступны без создания объекта. Обращение происходит через имя класса: `ClassName.variableName`. Статические методы не могут использовать `this` и не имеют доступа к нестатическим полям."
  },
  {
    q: "Что такое final в Java? Где и как используется?",
    a: "Ключевое слово `final` может применяться к переменным, методам и классам. `final` переменная не может быть изменена, `final` метод не может быть переопределён, `final` класс не может быть унаследован. Используется для защиты от изменений и оптимизации."
  },
  {
    q: "Что такое обобщения (generics)? Зачем нужны?",
    a: "Generics позволяют указывать типы данных при объявлении классов, интерфейсов и методов. Это даёт безопасность типов на этапе компиляции и устраняет необходимость приведения типов. Пример: `List<String> list = new ArrayList<>();` гарантирует, что можно добавлять только строки."
  },
  {
    q: "Что такое коллекции в Java? Назовите основные интерфейсы и их реализации.",
    a: "Коллекции — это структуры данных, используемые для хранения и обработки групп объектов. Основные интерфейсы: `List` (ArrayList, LinkedList), `Set` (HashSet, TreeSet), `Queue` (PriorityQueue), `Map` (HashMap, TreeMap)."
  },
  {
    q: "В чём разница между HashMap и TreeMap?",
    a: "HashMap — хранит элементы в произвольном порядке, работает за O(1) при хорошем хэшировании. TreeMap — реализует `SortedMap`, хранит элементы в отсортированном порядке (красно-чёрное дерево), работает за O(log n)."
  },
  {
    q: "Что такое fail-fast и fail-safe итераторы?",
    a: "Fail-fast итераторы выбрасывают `ConcurrentModificationException`, если коллекция была изменена во время итерации (например, `ArrayList`). Fail-safe итераторы (например, `CopyOnWriteArrayList`) работают с копией коллекции и не выбрасывают исключений."
  },
  {
    q: "Что такое String, StringBuilder и StringBuffer? В чём разница?",
    a: "`String` — неизменяемый. `StringBuilder` — изменяемый, не потокобезопасный, быстрый. `StringBuffer` — изменяемый, потокобезопасный. Используется, когда нужно много раз модифицировать строку."
  },
  {
    q: "Что такое equals() и hashCode()? Зачем они нужны?",
    a: "`equals()` проверяет логическое равенство объектов. `hashCode()` возвращает хэш-код объекта. Эти методы должны быть переопределены вместе, чтобы объекты правильно работали в коллекциях, таких как `HashMap` и `HashSet`."
  },
  {
    q: "Что такое сборка мусора (garbage collection) в Java? Какие типы сборщиков есть?",
    a: "Garbage Collection — автоматическое управление памятью. JVM удаляет объекты, на которые нет ссылок. Типы GC: Serial, Parallel, CMS, G1, ZGC. Выбор зависит от целей приложения: низкая задержка или высокая пропускная способность."
  },
  {
    q: "Что такое стек и куча в Java?",
    a: "Стек хранит примитивные переменные и ссылки на объекты. Он управляется автоматически и ограничен по размеру. Куча — область памяти, где создаются объекты. Управление осуществляется через garbage collector."
  },
  {
    q: "Что такое многопоточность? Как создать поток в Java?",
    a: "Многопоточность позволяет выполнять несколько задач одновременно. Поток можно создать через наследование от `Thread` или реализацию интерфейса `Runnable`. Также можно использовать `ExecutorService` для управления пулом потоков."
  },
  {
    q: "Что такое synchronized и volatile в Java?",
    a: "`synchronized` — ключевое слово, обеспечивающее потокобезопасный доступ к методам или блокам кода. `volatile` — гарантирует видимость переменной между потоками, но не обеспечивает атомарности."
  },
  {
    q: "Что такое deadlock и как его избежать?",
    a: "Deadlock — ситуация, когда несколько потоков блокируют друг друга, ожидая освобождения ресурсов. Чтобы избежать: избегать вложенных блокировок, использовать таймауты, следить за порядком захвата ресурсов."
  },
  {
    q: "Что такое Java Memory Model?",
    a: "Java Memory Model (JMM) — это набор правил, определяющих, как потоки взаимодействуют с памятью. Определяет, как и когда изменения, сделанные одним потоком, становятся видимыми другим. Важно для многопоточности."
  },
  {
    q: "Что такое лямбда-выражения и зачем они нужны?",
    a: "Лямбда-выражения — это анонимные функции, которые позволяют писать более чистый и читаемый код. Используются для реализации функциональных интерфейсов. Пример: `list.forEach(item -> System.out.println(item));`"
  },
  {
    q: "Что такое Stream API? Приведите пример использования.",
    a: "Stream API — это набор методов для работы с коллекциями в функциональном стиле. Позволяет фильтровать, преобразовывать и агрегировать данные. Пример: `List<String> filtered = list.stream().filter(s -> s.length() > 3).toList();`"
  },
  {
    q: "Что такое Optional в Java?",
    a: "`Optional` — это контейнер, который может содержать или не содержать значение. Используется для избежания `NullPointerException`. Позволяет писать более безопасный и читаемый код: `optional.ifPresent(System.out::println);`"
  },
  {
    q: "Что такое аннотации? Приведите примеры встроенных аннотаций.",
    a: "Аннотации — это метаданные, добавляемые к классам, методам, полям. Примеры: `@Override`, `@Deprecated`, `@SuppressWarnings`. Позволяют упростить код, добавлять метаинформацию и управлять поведением фреймворков."
  },
  {
    q: "Что такое принципы SOLID?",
    a: "SOLID — это 5 принципов проектирования объектно-ориентированных систем: **S**ingle Responsibility, **O**pen/Closed, **L**iskov Substitution, **I**nterface Segregation, **D**ependency Inversion. Они помогают создавать гибкие и поддерживаемые системы."
  },
  {
    q: "Что такое паттерн Singleton и как его реализовать в Java?",
    a: "Singleton — это порождающий паттерн, гарантирующий создание только одного экземпляра класса. Реализуется через приватный конструктор, статическое поле и метод `getInstance()`. Для многопоточности можно использовать `synchronized`, `enum` или `Double-Checked Locking`."
  },
  {
    q: "Что такое паттерн Factory и когда его использовать?",
    a: "Factory — это порождающий паттерн, который инкапсулирует создание объектов. Используется, когда логика создания сложная или зависит от внешних факторов. Позволяет абстрагироваться от конкретных классов и упрощает расширение."
  },
  {
    q: "Что такое JDBC и как с ним работать?",
    a: "JDBC (Java Database Connectivity) — это API для работы с базами данных. Используется через `Connection`, `Statement`, `ResultSet`. Позволяет выполнять SQL-запросы, обрабатывать результаты. Рекомендуется использовать `PreparedStatement` для предотвращения SQL-инъекций."
  },
  {
    q: "Что такое Maven и зачем он нужен?",
    a: "Maven — это инструмент автоматизации сборки проекта. Управляет зависимостями, жизненным циклом сборки, тестированием. Зависимости описываются в файле `pom.xml`. Упрощает подключение библиотек и управление проектом."
  },
  {
    q: "Что такое Spring Framework? Какие модули вы знаете?",
    a: "Spring — это мощный фреймворк для разработки Java-приложений. Основные модули: Spring Core (IoC), Spring AOP (аспекты), Spring MVC (веб), Spring Boot (автоконфигурация), Spring Data (работа с БД), Spring Security (аутентификация)."
  }
];