export default [
  {
    q: "Что такое JVM и зачем она нужна?",
    a: "JVM (Java Virtual Machine) — это виртуальная машина, которая выполняет Java-байткод. Она позволяет запускать Java-программы на любой платформе, где установлена подходящая реализация JVM. Это обеспечивает принцип 'write once, run anywhere'."
  },
  {
    q: "Чем отличаются JDK, JRE и JVM?",
    a: "JVM — это часть JRE, которая отвечает за выполнение байткода. JRE содержит библиотеки и компоненты, необходимые для запуска Java-приложений. JDK — это полноценный набор разработчика, включающий JRE, компилятор (`javac`), отладчик и другие инструменты."
  },
  {
    q: "Какие примитивные типы данных существуют в Java?",
    a: "В Java есть 8 примитивных типов: `byte`, `short`, `int`, `long` (для целых чисел), `float`, `double` (для дробей), `char` (символы), `boolean` (логические значения true/false). Эти типы не являются объектами."
  },
  {
    q: "Что такое ООП и какие его основные принципы?",
    a: "ООП (Объектно-ориентированное программирование) — парадигма, основанная на объектах, которые содержат данные (поля) и поведение (методы). Основные принципы: инкапсуляция, наследование, полиморфизм и абстракция."
  },
  {
    q: "Что такое класс и объект?",
    a: "Класс — это шаблон или чертёж, описывающий свойства и поведение объекта. Объект — это экземпляр класса. Например, если `Car` — класс, то `myCar = new Car()` — это объект этого класса."
  },
  {
    q: "Что такое конструктор в Java?",
    a: "Конструктор — это специальный метод, который вызывается при создании объекта. Он используется для инициализации состояния объекта. Имя конструктора совпадает с именем класса и не имеет возвращаемого типа."
  },
  {
    q: "Что такое перегрузка методов (method overloading)?",
    a: "Method Overloading — это возможность иметь несколько методов с одинаковым именем, но разными параметрами (разное количество или тип аргументов). Компилятор определяет, какой метод вызвать, исходя из переданных аргументов."
  },
  {
    q: "Что такое перезапись методов (method overriding)?",
    a: "Method Overriding — это переопределение метода родительского класса в дочернем классе. Позволяет изменить поведение унаследованного метода. Для этого имя, тип возвращаемого значения и сигнатура должны совпадать."
  },
  {
    q: "Что такое статический метод и переменная?",
    a: "Статические методы и переменные принадлежат классу, а не конкретному объекту. Они создаются один раз и доступны без создания экземпляра класса. Доступ к ним осуществляется через имя класса: `ClassName.methodName()`. Статические методы не могут использовать `this`."
  },
  {
    q: "Что такое final в Java?",
    a: "`final` — это модификатор, который может применяться к переменным, методам и классам. Если переменная объявлена как `final`, её значение нельзя изменить. Метод, объявленный как `final`, не может быть переопределён. Класс, помеченный `final`, не может быть унаследован."
  },
  {
    q: "Что такое обобщения (generics) в Java?",
    a: "Generics позволяют указывать тип данных при использовании классов и методов, обеспечивая безопасность типов на этапе компиляции. Пример: `List<String> list = new ArrayList<>();` гарантирует, что в список можно добавлять только строки."
  },
  {
    q: "Что такое сборка мусора (garbage collection) в Java?",
    a: "Garbage Collection — это автоматическое управление памятью в Java. JVM периодически освобождает память, удаляя объекты, на которые нет ссылок. Разработчику не нужно вручную выделять и освобождать память."
  },
  {
    q: "Что такое массив в Java?",
    a: "Массив — это структура данных, хранящая элементы одного типа по индексу. Размер массива фиксирован. Элементы массива можно получить по индексу начиная с 0. Пример: `int[] numbers = new int[5];`"
  },
  {
    q: "Что такое коллекции в Java? Назовите основные интерфейсы.",
    a: "Коллекции — это структуры данных, используемые для хранения и управления группами объектов. Основные интерфейсы: `List`, `Set`, `Queue`, `Map`. Реализации: `ArrayList`, `HashSet`, `HashMap`, `LinkedList` и другие."
  },
  {
    q: "В чём разница между List и Set?",
    a: "`List` — упорядоченная коллекция, допускающая дубликаты. `Set` — коллекция уникальных элементов, порядок может быть не важен (`HashSet`) или сохранён (`LinkedHashSet`)."
  },
  {
    q: "Что такое String, StringBuilder и StringBuffer?",
    a: "`String` — неизменяемый класс для работы со строками. `StringBuilder` — изменяемый, не потокобезопасный, быстрый. `StringBuffer` — изменяемый, потокобезопасный. Используется, когда нужно много раз модифицировать строку."
  },
  {
    q: "Что такое наследование в Java?",
    a: "Наследование — это механизм, позволяющий одному классу (потомку) наследовать поля и методы другого класса (родителя). Это помогает повторно использовать код и строить иерархию классов. Используется ключевое слово `extends`."
  },
  {
    q: "Что такое интерфейс в Java?",
    a: "Интерфейс — это абстрактный тип, который содержит только публичные абстрактные методы (до Java 8) и константы. В Java 8+ можно добавлять дефолтные и статические методы. Класс реализует интерфейс с помощью `implements`."
  },
  {
    q: "Что такое абстрактный класс?",
    a: "Абстрактный класс — это класс, который не может быть создан напрямую. Может содержать абстрактные методы (без реализации) и обычные методы. Подкласс обязан реализовать все абстрактные методы или быть абстрактным сам."
  },
  {
    q: "В чём разница между интерфейсом и абстрактным классом?",
    a: "Абстрактный класс может иметь состояние (поля), конструкторы и частичную реализацию. Интерфейс до Java 8 был полностью абстрактным, но теперь поддерживает дефолтные и статические методы. Класс может реализовывать несколько интерфейсов, но наследоваться только от одного класса."
  },
  {
    q: "Что такое пакет (package) в Java?",
    a: "Пакет — это способ организации классов в пространства имён. Помогает избежать конфликтов имён и логически группировать классы. Объявляется в начале файла с помощью ключевого слова `package`."
  },
  {
    q: "Что такое модификаторы доступа в Java?",
    a: "Модификаторы доступа управляют видимостью классов, методов и переменных. Основные: `private` (только внутри класса), `default` (по умолчанию, внутри пакета), `protected` (внутри пакета и подклассов), `public` (везде)."
  },
  {
    q: "Что такое исключения (exceptions) в Java?",
    a: "Исключения — это объекты, представляющие ошибки во время выполнения программы. В Java есть checked (проверяемые) и unchecked (непроверяемые) исключения. Исключения обрабатываются с помощью блоков `try-catch-finally` или пробрасываются с помощью `throws`."
  },
  {
    q: "В чём разница между checked и unchecked исключениями?",
    a: "Checked исключения (например, `IOException`) должны быть либо обработаны, либо объявлены в `throws`. Unchecked исключения (например, `NullPointerException`, `ArrayIndexOutOfBoundsException`) не требуют обязательной обработки и обычно связаны с программными ошибками."
  },
  {
    q: "Что такое многопоточность в Java?",
    a: "Многопоточность позволяет выполнять несколько потоков одновременно. Поток — это минимальная единица процесса. В Java потоки создаются через наследование от `Thread` или реализацию `Runnable`. Помогает повысить производительность и отзывчивость приложений."
  },
  {
    q: "Что такое synchronized в Java?",
    a: "`synchronized` — это ключевое слово, которое используется для предотвращения одновременного доступа нескольких потоков к одному ресурсу. Может применяться к методам и блокам кода, чтобы сделать их потокобезопасными."
  },
  {
    q: "Что такое autoboxing и unboxing?",
    a: "Autoboxing — это автоматическое преобразование примитивного типа в соответствующий ему объектный (например, `int` в `Integer`). Unboxing — обратный процесс: преобразование объекта в примитив."
  },
  {
    q: "Как работает цикл for-each в Java?",
    a: "Цикл `for-each` (enhanced for loop) используется для итерации по массивам и коллекциям. Упрощает чтение кода и скрывает реализацию итератора. Пример: `for (String name : names) { ... }`."
  },
  {
    q: "Что такое аннотации в Java?",
    a: "Аннотации — это метаданные, добавляемые к коду. Они предоставляют информацию компилятору, среде выполнения или другим инструментам. Примеры: `@Override`, `@Deprecated`, `@SuppressWarnings`. Аннотации не влияют на логику программы напрямую."
  },
  {
    q: "Что такое Java Streams API?",
    a: "Stream API — это функциональный подход к обработке данных из коллекций и других источников. Позволяет выполнять операции фильтрации, сортировки, преобразования с помощью методов вроде `filter()`, `map()`, `collect()`. Работает с лямбда-выражениями."
  }
];