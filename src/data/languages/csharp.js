export default [
  {
    q: "Что такое C# и в чём его основные особенности?",
    a: "C# — это современный, объектно-ориентированный язык программирования от Microsoft, работающий на платформе .NET. Основные особенности: строгая типизация, автоматическое управление памятью (GC), поддержка LINQ, асинхронного программирования и широкое использование в десктоп-, веб- и игровой разработке.",
    tags: ["введение", "особенности"],
    level: "junior"
  },
  {
    q: "Какие примитивные типы данных существуют в C#?",
    a: "В C# есть следующие примитивные типы: int, double, float, decimal, bool, char, string, byte, short, long и другие. Все они являются структурами (struct) и относятся к типам значений.",
    tags: ["типы данных", "основы"],
    level: "junior"
  },
  {
    q: "Чем отличаются типы значений от ссылочных типов?",
    a: "Типы значений хранят данные непосредственно в переменной (например, int, bool). Ссылочные типы (class, object, string) хранят ссылку на область памяти, где находится объект.",
    tags: ["типы данных", "ООП"],
    level: "junior"
  },
  {
    q: "Что такое var и когда его использовать?",
    a: "'var' позволяет компилятору автоматически определить тип переменной на основе значения при инициализации. Используется, когда тип очевиден из контекста, например: var list = new List<string>();",
    tags: ["переменные", "синтаксис"],
    level: "junior"
  },
  {
    q: "Что такое класс и объект?",
    a: "Класс — это шаблон или чертёж, описывающий поведение и состояние. Объект — это экземпляр класса, который содержит конкретные данные и может вызывать методы.",
    tags: ["классы", "объекты"],
    level: "junior"
  },
  {
    q: "Что такое конструктор?",
    a: "Конструктор — это специальный метод, который вызывается при создании объекта. Он используется для инициализации состояния объекта. Может быть перегружен.",
    tags: ["конструкторы", "методы"],
    level: "junior"
  },
  {
    q: "Что такое метод и как его объявить?",
    a: "Метод — это блок кода, который выполняет определённую задачу. Объявляется с указанием модификатора доступа, возвращаемого типа, имени и параметров. Пример: public void PrintMessage() { ... }",
    tags: ["методы", "основы"],
    level: "junior"
  },
  {
    q: "Что такое перегрузка методов?",
    a: "Перегрузка методов — это возможность иметь несколько методов с одинаковым именем, но разными параметрами (тип и/или количество). Это не относится к возвращаемому типу.",
    tags: ["методы", "полиморфизм"],
    level: "junior"
  },
  {
    q: "Что такое наследование?",
    a: "Наследование — это механизм, при котором один класс (потомок) наследует поля и методы другого класса (родителя). Позволяет повторно использовать код и строить иерархию классов.",
    tags: ["наследование", "ООП"],
    level: "junior"
  },
  {
    q: "Что такое инкапсуляция?",
    a: "Инкапсуляция — это принцип ООП, позволяющий скрывать детали реализации класса от внешнего мира. Доступ к внутреннему состоянию осуществляется через методы и свойства.",
    tags: ["ООП", "принципы"],
    level: "junior"
  },
  {
    q: "Что такое полиморфизм?",
    a: "Полиморфизм — это способность объекта принимать разные формы. В C# реализуется через перегрузку методов (compile-time) и переопределение методов (run-time).",
    tags: ["ООП", "принципы"],
    level: "junior"
  },
  {
    q: "Что такое интерфейс?",
    a: "Интерфейс — это полностью абстрактный тип, который содержит только сигнатуры методов, свойств, событий и индексаторов. Класс может реализовать несколько интерфейсов.",
    tags: ["интерфейсы", "ООП"],
    level: "junior"
  },
  {
    q: "Что такое абстрактный класс?",
    a: "Абстрактный класс — это класс, который не может быть создан напрямую и может содержать как реализованные, так и абстрактные методы. Используется как базовый класс для других классов.",
    tags: ["классы", "ООП"],
    level: "junior"
  },
  {
    q: "Что такое String и StringBuilder?",
    a: "String — неизменяемый тип для работы со строками. StringBuilder — изменяемый тип, позволяющий эффективно выполнять множество операций над строкой без создания множества промежуточных объектов.",
    tags: ["строки", "коллекции"],
    level: "junior"
  },
  {
    q: "Как работают массивы в C#?",
    a: "Массив — это коллекция элементов одного типа, доступ к которым осуществляется по индексу. Создаётся с помощью new int[5]. Индексы начинаются с 0.",
    tags: ["массивы", "коллекции"],
    level: "junior"
  },
  {
    q: "Что такое List<T> и чем он отличается от массива?",
    a: "List<T> — это динамический список, который может менять размер. В отличие от массива, позволяет добавлять и удалять элементы без указания размера заранее. Является частью пространства имён System.Collections.Generic.",
    tags: ["коллекции", "List<T>"],
    level: "junior"
  },
  {
    q: "Что такое обобщения (Generics)?",
    a: "Generics — это механизм, позволяющий писать код, независимый от конкретного типа. Например: List<string> list = new List<string>();",
    tags: ["Generics", "коллекции"],
    level: "junior"
  },
  {
    q: "Что такое исключения и как они обрабатываются в C#?",
    a: "Исключения — это ошибки во время выполнения программы. Обрабатываются с помощью блока try-catch-finally. Также можно использовать finally для гарантированного выполнения кода и throw для выброса исключений.",
    tags: ["исключения", "обработка ошибок"],
    level: "junior"
  },
  {
    q: "Что такое свойства (Properties) и зачем они нужны?",
    a: "Свойства — это специальные члены класса, которые предоставляют гибкий механизм для чтения, записи или вычисления значений закрытых полей. Они обеспечивают контроль доступа к данным.",
    tags: ["свойства", "ООП"],
    level: "junior"
  },
  {
    q: "Что такое модификаторы доступа в C#?",
    a: "Модификаторы доступа определяют видимость членов класса. Основные: private, protected, internal, public, protected internal и private protected.",
    tags: ["модификаторы", "ООП"],
    level: "junior"
  },
  {
    q: "Как запустить C#-приложение из командной строки?",
    a: "Для этого можно использовать .NET CLI: dotnet run — если проект создан через dotnet new. Для компиляции используется dotnet build, а для запуска — dotnet run.",
    tags: ["компиляция", "запуск"],
    level: "junior"
  }
];