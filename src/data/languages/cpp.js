export default [
  {
    q: "Что такое C++ и в чём его основные особенности?",
    a: "C++ — это статически типизированный, компилируемый язык программирования с поддержкой объектно-ориентированного, процедурного и обобщённого программирования. Основные особенности: высокая производительность, прямой доступ к памяти, множественное наследование, перегрузка операторов.",
    tags: ["введение", "особенности"],
    level: "junior"
  },
  {
    q: "Какие примитивные типы данных существуют в C++?",
    a: "Основные примитивные типы: int (целые числа), float и double (дробные), char (символ), bool (логический тип), void. Также есть модификаторы: short, long, signed, unsigned.",
    tags: ["типы данных", "основы"],
    level: "junior"
  },
  {
    q: "Что такое переменная и как её объявить?",
    a: "Переменная — это именованная область памяти, которая хранит значение определённого типа. Пример объявления: int age = 25;",
    tags: ["переменные", "синтаксис"],
    level: "junior"
  },
  {
    q: "Что такое указатель и зачем он нужен?",
    a: "Указатель — это переменная, которая хранит адрес другой переменной в памяти. Указатели позволяют напрямую управлять памятью и работать с массивами, строками, динамическими структурами данных.",
    tags: ["указатели", "память"],
    level: "junior"
  },
  {
    q: "Что такое ссылка и чем она отличается от указателя?",
    a: "Ссылка — это альтернативное имя для существующей переменной. В отличие от указателя, ссылку нельзя изменить после инициализации, и она всегда ссылается на один и тот же объект.",
    tags: ["указатели", "ссылки"],
    level: "junior"
  },
  {
    q: "Как работает оператор new и delete?",
    a: "Оператор new выделяет память динамически во время выполнения программы. Оператор delete освобождает эту память, когда она больше не нужна. Используется для работы с указателями.",
    tags: ["память", "операторы"],
    level: "junior"
  },
  {
    q: "Что такое класс и объект?",
    a: "Класс — это пользовательский тип данных, описывающий поведение и состояние. Объект — это экземпляр класса, который содержит конкретные данные и может вызывать методы.",
    tags: ["классы", "объекты"],
    level: "junior"
  },
  {
    q: "Что такое конструктор и деструктор?",
    a: "Конструктор — это специальный метод, вызываемый при создании объекта для его инициализации. Деструктор вызывается при уничтожении объекта для освобождения ресурсов.",
    tags: ["конструкторы", "деструкторы"],
    level: "junior"
  },
  {
    q: "Что такое перегрузка функций?",
    a: "Перегрузка функций позволяет иметь несколько функций с одинаковым именем, но разными параметрами (тип и/или количество). Компилятор выбирает подходящую версию на основе переданных аргументов.",
    tags: ["функции", "полиморфизм"],
    level: "junior"
  },
  {
    q: "Что такое наследование?",
    a: "Наследование — это механизм, при котором один класс (производный) наследует поля и методы другого класса (базового). Позволяет повторно использовать код и строить иерархию классов.",
    tags: ["наследование", "ООП"],
    level: "junior"
  },
  {
    q: "Что такое инкапсуляция?",
    a: "Инкапсуляция — это принцип ООП, позволяющий скрывать детали реализации класса от внешнего мира. Доступ к внутреннему состоянию осуществляется через открытые методы и свойства.",
    tags: ["ООП", "принципы"],
    level: "junior"
  },
  {
    q: "Что такое полиморфизм?",
    a: "Полиморфизм — это способность объекта принимать разные формы. В C++ реализуется через перегрузку функций и использование виртуальных функций с переопределением в производных классах.",
    tags: ["ООП", "принципы"],
    level: "junior"
  },
  {
    q: "Что такое массив?",
    a: "Массив — это коллекция элементов одного типа, доступ к которым осуществляется по индексу. Создаётся с помощью int arr[5]; или динамически через new. Индексы начинаются с 0.",
    tags: ["массивы", "коллекции"],
    level: "junior"
  },
  {
    q: "Что такое std::vector и чем он отличается от массива?",
    a: "std::vector — это динамический массив из STL (Standard Template Library), который автоматически управляет своим размером. Поддерживает добавление, удаление элементов и другие удобные методы.",
    tags: ["STL", "коллекции"],
    level: "junior"
  },
  {
    q: "Что такое пространство имён (namespace)?",
    a: "Пространство имён используется для группировки связанных классов, функций и переменных, чтобы избежать конфликтов имён. Например: namespace MyNamespace { ... }",
    tags: ["пространства имён", "организация кода"],
    level: "junior"
  },
  {
    q: "Что такое шаблоны (templates)?",
    a: "Шаблоны позволяют писать универсальный код, независимый от конкретного типа данных. Используются для создания обобщённых функций и классов, например: template <typename T> T max(T a, T b);",
    tags: ["шаблоны", "Generics"],
    level: "junior"
  },
  {
    q: "Что такое исключения и как они обрабатываются в C++?",
    a: "Исключения — это ошибки, возникающие во время выполнения программы. Обрабатываются с помощью блоков try и catch. Исключения могут быть любого типа, включая собственные классы.",
    tags: ["исключения", "обработка ошибок"],
    level: "junior"
  },
  {
    q: "Как скомпилировать и запустить C++ программу из командной строки?",
    a: "Для компиляции можно использовать g++: g++ main.cpp -o program. Для запуска: ./program",
    tags: ["компиляция", "запуск"],
    level: "junior"
  },
  {
    q: "Что такое const и где он применяется?",
    a: "const используется для объявления констант — значений, которые нельзя изменить после инициализации. Может применяться к переменным, параметрам функций и методам классов.",
    tags: ["константы", "модификаторы"],
    level: "junior"
  },
  {
    q: "Что такое перегрузка операторов?",
    a: "Перегрузка операторов позволяет изменить поведение стандартных операторов (+, -, == и т.д.) для пользовательских типов, таких как классы и структуры.",
    tags: ["операторы", "ООП"],
    level: "junior"
  },
  {
    q: "Что такое структура (struct) и чем она отличается от класса?",
    a: "struct и class почти идентичны, но по умолчанию члены struct имеют модификатор доступа public, а в class — private. struct чаще используется для хранения данных без логики.",
    tags: ["структуры", "классы"],
    level: "junior"
  }
];