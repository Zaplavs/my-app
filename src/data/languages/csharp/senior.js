export default [
  {
    q: "Что такое Common Language Runtime (CLR) и как он устроен под капотом?",
    a: "CLR — это исполняющая среда .NET, отвечающая за выполнение кода, управление памятью, безопасность, сборку мусора и обработку исключений. Он загружает IL-код, компилирует его в машинный код с помощью JIT-компилятора, управляет типами через CTS и обеспечивает безопасность через CAS."
  },
  {
    q: "Как работает Garbage Collector в .NET? Какие поколения объектов и алгоритмы сборки вы знаете?",
    a: "GC в .NET делит объекты на три поколения: Gen 0 (новые), Gen 1 (промежуточные), Gen 2 (долгоживущие). Используются алгоритмы Mark & Sweep, Compact, Copying. Сборка проводится при нехватке памяти или вызове `GC.Collect()`. Также есть WKS GC и Server GC для многопоточных серверных приложений."
  },
  {
    q: "Что такое Finalize и Dispose? В чём разница между ними?",
    a: "`Finalize` — метод, вызываемый GC перед удалением объекта из памяти, используется для освобождения неуправляемых ресурсов. `Dispose` — часть интерфейса `IDisposable`, вызывается явно или через `using`, позволяет освобождать ресурсы немедленно. `Dispose` более предпочтителен для контроля над ресурсами."
  },
  {
    q: "Что такое async/await и как он реализован внутри CLR?",
    a: "`async/await` — это синтаксический сахар над Task-based Asynchronous Pattern. При компиляции метод помечается как `async`, а `await` превращается в автоматическую машину состояний (`AsyncMethodBuilder`). После завершения задачи продолжение выполняется в том же контексте синхронизации (например, UI поток)."
  },
  {
    q: "Что такое thread pool и как он управляется в .NET?",
    a: "Thread Pool — это набор фоновых потоков, используемых для выполнения коротких задач. Управляется планировщиком CLR. Позволяет избежать накладных расходов на создание новых потоков. Используется в `Task.Run`, `Parallel.For`, асинхронных операциях. Может быть ограничен или расширен через `ThreadPool.SetMinThreads()`."
  },
  {
    q: "Что такое TPL (Task Parallel Library)? Какие классы и методы она предоставляет?",
    a: "TPL — это высокоуровневая библиотека для параллельного программирования. Основные классы: `Task`, `Task<T>`, `Parallel`, `CancellationToken`, `ConcurrentBag`, `BlockingCollection`. Методы: `Task.Run()`, `Task.WaitAll()`, `Parallel.ForEach()`, `PLINQ.AsParallel()`. Позволяет писать эффективный и масштабируемый код."
  },
  {
    q: "Что такое CancellationTokenSource и как использовать cancellation в асинхронном коде?",
    a: "`CancellationTokenSource` создаёт токен (`CancellationToken`), который может быть использован для отмены задач. Передаётся в метод, и если вызван `Cancel()`, задача может быть прервана. Используется в ASP.NET Core, Background Services, долгих вычислениях и I/O."
  },
  {
    q: "Что такое Memory и Span<T>? Зачем они нужны?",
    a: "`Span<T>` и `Memory<T>` — это структуры, позволяющие работать с блоками памяти без копирования. `Span<T>` работает со стеком и кучей, `Memory<T>` — только с кучей. Полезны для оптимизации производительности, особенно в сетевых и файловых операциях."
  },
  {
    q: "Что такое Unsafe Code и когда его использовать?",
    a: "Unsafe Code — это возможность использовать указатели и работать напрямую с памятью в C#. Требует ключа `/unsafe` и запуска в доверенной среде. Используется для высокопроизводительных задач, например, работы с массивами, графой, шифрованием или взаимодействием с native API."
  },
  {
    q: "Что такое AOT и JIT компиляция в .NET? В чём их отличие?",
    a: "JIT (Just-In-Time) — компиляция в машинный код во время выполнения. Быстрая разработка, но медленный старт. AOT (Ahead-Of-Time) — компиляция заранее, как в NativeAOT. Ускоряет запуск, уменьшает потребление памяти, но теряет динамизм (Reflection, IL Emit)."
  },
  {
    q: "Что такое Reflection и как он влияет на производительность?",
    a: "Reflection — это механизм, позволяющий анализировать и вызывать методы, свойства и конструкторы во время выполнения. Используется в DI, сериализаторах, ORM. Однако имеет низкую производительность и должен использоваться осторожно."
  },
  {
    q: "Что такое Source Generators и CodeDOM в .NET?",
    a: "Source Generators — это инструменты, которые анализируют код и генерируют дополнительный C# код на этапе компиляции, улучшая производительность и уменьшая runtime overhead. CodeDOM — старый способ генерации кода, который сейчас менее популярен."
  },
  {
    q: "Что такое Roslyn и какие возможности он предоставляет?",
    a: "Roslyn — это открытый компилятор C#, предоставляющий API для анализа, преобразования и генерации кода. Используется в редакторах, анализаторах кода, рефакторинге, шаблонах и IDE. Позволяет создавать собственные анализаторы и исправления (Code Fix Providers)."
  },
  {
    q: "Что такое SOLID и как они применяются в крупных проектах на C#?",
    a: "SOLID — это 5 принципов проектирования: **S**ingle Responsibility, **O**pen/Closed, **L**iskov Substitution, **I**nterface Segregation, **D**ependency Inversion. Применяются в C# через использование интерфейсов, внедрение зависимостей, разделение ответственностей и использование паттернов проектирования."
  },
  {
    q: "Что такое DDD (Domain Driven Design)? Назовите основные концепции.",
    a: "DDD — это подход к проектированию сложных систем вокруг предметной области. Основные концепции: **Entity**, **Value Object**, **Aggregate Root**, **Repository**, **Service**, **Bounded Context**. Часто используется в микросервисах и enterprise-приложениях для разделения зон ответственности."
  },
  {
    q: "Что такое CQRS и Event Sourcing? Когда их использовать?",
    a: "CQRS — разделение модели команд и запросов. Event Sourcing — хранение изменений состояния в виде событий. Используются вместе в системах с высокими требованиями к аудиту, восстановлению и горизонтальным шкалами. Реализуются через Mediator, Event Store, Materialized Views."
  },
  {
    q: "Что такое Mediator и Pipeline в C#? Приведите пример использования.",
    a: "Mediator — это паттерн, централизующий логику между компонентами. Реализуется через библиотеки вроде MediatR. Pipeline — это цепочка обработчиков (например, логирование, валидация, кэширование), которая оборачивает обработку запроса или команды."
  },
  {
    q: "Что такое Dependency Injection в ASP.NET Core? Какие lifetime вы знаете?",
    a: "DI в ASP.NET Core реализован через встроенный контейнер. Lifetime: `Transient` (новый экземпляр на каждый запрос), `Scoped` (на каждый HTTP-запрос), `Singleton` (единственный экземпляр на всё приложение). Поддерживает constructor injection, property injection (через сторонние контейнеры)."
  },
  {
    q: "Что такое Middleware Pipeline в ASP.NET Core и как он работает?",
    a: "Middleware Pipeline — это цепочка компонентов, обрабатывающих HTTP-запросы. Каждый middleware может обработать запрос, передать дальше или остановить. Регистрируются в методе `Configure` через `app.Use...()`. Позволяет добавлять логику перед и после обработки контроллеров."
  },
  {
    q: "Что такое Entity Framework Core и какие особенности у него есть по сравнению с EF6?",
    a: "EF Core — это переписанная версия ORM, ориентированная на производительность и кроссплатформенность. Особенности: LINQ to Entities, Change Tracking, Value Conversions, Query Types, Reverse Engineering, лучшая поддержка NoSQL, ограниченная поддержка lazy loading и нет DataSet."
  },
  {
    q: "Что такое Compiled Queries в EF Core и зачем они нужны?",
    a: "Compiled Queries — это заранее скомпилированные LINQ-запросы, которые не компилируются повторно при каждом вызове. Это значительно повышает производительность. Объявляются с помощью `EF.Functions.IsNull`, `EF.CompileQuery` и т.д."
  },
  {
    q: "Что такое Interceptor и Query Filter в EF Core?",
    a: "Interceptor — это механизм, позволяющий перехватывать и модифицировать SQL-запросы и команды. Query Filter — глобальный фильтр, применяемый ко всем запросам к сущности (например, soft delete). Оба используются для логики уровня доступа и аудита."
  },
  {
    q: "Что такое gRPC и как он отличается от REST в ASP.NET Core?",
    a: "gRPC — это протокол RPC поверх HTTP/2, использующий Protocol Buffers для сериализации. Быстрее, меньше размер сообщений, поддерживает streaming. REST — основан на HTTP и JSON. gRPC лучше для микросервисов, REST — для общего доступа и браузерных клиентов."
  },
  {
    q: "Что такое OpenTelemetry и как он используется в .NET?",
    a: "OpenTelemetry — это стандарт для сбора метрик, логов и трейсов в распределённых системах. В .NET интегрируется через SDK, позволяет отправлять данные в Jaeger, Prometheus, Azure Application Insights. Помогает отслеживать производительность и ошибки в продакшене."
  },
  {
    q: "Что такое Health Checks и Metrics в ASP.NET Core?",
    a: "Health Checks — проверки состояния сервисов (БД, внешние API). Metrics — сбор числовых данных о работе приложения (запросы/сек, задержки). Используются для мониторинга, алертов и автоматического восстановления."
  },
  {
    q: "Что такое Circuit Breaker и Retry Policy? Как реализовать в .NET?",
    a: "Circuit Breaker — паттерн, предотвращающий дальнейшие попытки обращения к недоступному сервису. Retry Policy — повторяет запросы при временных ошибках. Реализуются через Polly, Resilience4j, IHttpClientFactory, HttpClient + DelegatingHandler."
  },
  {
    q: "Что такое CI/CD и как его настроить для .NET-проектов?",
    a: "CI/CD — практики автоматизации сборки, тестирования и деплоя. Для .NET: GitHub Actions, GitLab CI, Azure DevOps, Jenkins. Сценарии: restore, build, test, publish, deploy (через Docker, Kubernetes, Azure App Service и т.д.)."
  },
  {
    q: "Что такое profiling и какие инструменты вы знаете для .NET?",
    a: "Profiling — анализ производительности приложения: CPU, память, GC. Инструменты: VisualVM, dotTrace, dotMemory, PerfView, VS Diagnostic Tools, MiniProfiler. Профилирование помогает находить узкие места и оптимизировать код."
  },
  {
    q: "Что такое microservices и какие проблемы они решают?",
    a: "Микросервисы — это архитектура, при которой приложение состоит из множества независимо развертываемых сервисов. Решает проблемы масштабируемости, сложности, монолита. Требует управления сервисами, коммуникацией, отказоустойчивостью и мониторингом."
  },
  {
    q: "Что такое Clean Architecture и как её реализовать в .NET?",
    a: "Clean Architecture — это архитектура, отделяющая бизнес-логику от внешних деталей (БД, UI, REST). Реализуется через Domain, Application, Infrastructure, Web/API. Используются паттерны: Repository, UoW, DI, Mediator. Упрощает тестирование и замену слоёв."
  }
];