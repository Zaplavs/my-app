export default [
  {
    q: "Что такое C# и какие его основные особенности?",
    a: "C# — это современный, строго типизированный, объектно-ориентированный язык программирования, разработанный Microsoft для платформы .NET. Основные особенности: автоматическое управление памятью (GC), поддержка LINQ, async/await, делегаты, события, generics и интеграция с Windows API."
  },
  {
    q: "Что такое .NET и какие его компоненты вы знаете?",
    a: ".NET — это программная платформа от Microsoft, позволяющая создавать приложения разных типов (веб, десктоп, мобильные и др.). Основные компоненты: CLR (Common Language Runtime), CTS (Common Type System), CLS (Common Language Specification), BCL (Base Class Library)."
  },
  {
    q: "Что такое CLR и зачем он нужен?",
    a: "CLR (Common Language Runtime) — это исполняющая среда .NET, отвечающая за выполнение кода, управление памятью, безопасность, сборку мусора и обработку исключений. Он преобразует IL-код (Intermediate Language) в машинный код с помощью JIT-компилятора."
  },
  {
    q: "Какие примитивные типы данных существуют в C#?",
    a: "В C# есть следующие примитивные типы: `int`, `double`, `float`, `decimal` (числа), `char` (символ), `bool` (логический тип), `byte`, `short`, `long` и другие. Все они являются структурами (value types) и хранятся в стеке."
  },
  {
    q: "Чем отличаются типы данных value type и reference type?",
    a: "Value type (например, `int`, `bool`, `struct`) хранятся в стеке и содержат само значение. Reference type (например, `class`, `string`, `object`) хранятся в куче, а в стеке — ссылка на них. При присваивании копируется значение для value type и ссылка — для reference type."
  },
  {
    q: "Что такое переменные и константы в C#?",
    a: "Переменные — это именованные области памяти, в которых хранится значение. Объявляются с указанием типа и могут менять своё значение. Константы (`const`) — это значения, которые известны на этапе компиляции и не могут быть изменены. Используются для хранения фиксированных значений."
  },
  {
    q: "Что такое операторы ветвления и какие из них вы знаете?",
    a: "Операторы ветвления позволяют выполнять разные участки кода в зависимости от условия. Основные: `if`, `else if`, `else`, `switch`, `case`. `if` проверяет условие, `switch` сравнивает значение с несколькими возможными вариантами."
  },
  {
    q: "Что такое циклы в C#? Назовите их типы.",
    a: "Циклы используются для многократного выполнения блока кода. В C# есть: `for` (счётчик), `while` (пока условие истинно), `do-while` (выполняется минимум один раз), `foreach` (для итерации по коллекциям)."
  },
  {
    q: "Что такое массивы в C# и как их объявить?",
    a: "Массив — это структура данных, хранящая элементы одного типа. Объявляется так: `int[] numbers = new int[5];` или с инициализацией: `int[] numbers = {1, 2, 3};`. Доступ к элементам осуществляется по индексу, начиная с 0."
  },
  {
    q: "Что такое строки в C#? Какие основные методы работы со строками?",
    a: "Строка (`string`) — это последовательность символов Unicode. Основные методы: `Length` (длина), `Substring()` (подстрока), `IndexOf()` (поиск), `Replace()` (замена), `Split()` (разделение), `ToUpper()` и `ToLower()` (преобразование регистра)."
  },
  {
    q: "Что такое методы и как их объявить в C#?",
    a: "Метод — это блок кода, который можно вызывать по имени. Объявляется с указанием возвращаемого типа, имени и параметров. Пример: `int Sum(int a, int b) { return a + b; }`. Если метод ничего не возвращает, используется тип `void`."
  },
  {
    q: "Что такое параметры метода и как они передаются?",
    a: "Параметры — это входные данные, передаваемые в метод. По умолчанию передаются по значению. Чтобы передать по ссылке, используются ключевые слова `ref` (значение может изменяться) и `out` (обязательно инициализируется в методе). Также есть `params` для передачи переменного числа аргументов."
  },
  {
    q: "Что такое классы и объекты в C#?",
    a: "Класс — это шаблон, описывающий состояние и поведение. Объект — это экземпляр класса. Класс содержит поля, свойства, методы и конструкторы. Объявляется с помощью ключевого слова `class`. Пример: `Car myCar = new Car();`."
  },
  {
    q: "Что такое конструктор и деструктор в C#?",
    a: "Конструктор — это специальный метод, который вызывается при создании объекта. Может быть перегружен. Деструктор вызывается перед удалением объекта сборщиком мусора и используется редко. Объявляется как `~ClassName()`."
  },
  {
    q: "Что такое модификаторы доступа в C#?",
    a: "Модификаторы доступа определяют, где можно использовать классы, методы, поля и свойства. Основные: `public` (доступен везде), `private` (только внутри класса), `protected` (внутри класса и его наследников), `internal` (внутри сборки)."
  },
  {
    q: "Что такое свойства (properties) и зачем они нужны?",
    a: "Свойства — это методы доступа к приватным полям. Они обеспечивают контроль над чтением и записью значений. Пример: `public string Name { get; set; }`. Можно добавить логику в `get` и `set`, чтобы защитить данные."
  },
  {
    q: "Что такое структуры (struct) и чем они отличаются от классов?",
    a: "Структуры (`struct`) — это типы значений, хранящиеся в стеке. Они легче классов и не поддерживают наследование. Используются для небольших объектов с простым поведением. Классы — это reference type, структуры — value type."
  },
  {
    q: "Что такое наследование в C#?",
    a: "Наследование — это механизм, позволяющий одному классу (производному) наследовать поля и методы другого класса (базового). Помогает повторно использовать код. Реализуется через `class Derived : Base`. Класс может наследовать только один базовый класс."
  },
  {
    q: "Что такое абстрактные классы и интерфейсы?",
    a: "Абстрактный класс — это класс, который не может быть создан напрямую и может содержать абстрактные методы. Интерфейс содержит только сигнатуры методов, свойств и событий. Класс может реализовывать несколько интерфейсов, но наследовать только один класс."
  },
  {
    q: "Что такое перегрузка и переопределение методов?",
    a: "Перегрузка — это создание методов с одинаковым именем, но разными параметрами. Переопределение — это изменение реализации метода в производном классе. Для переопределения используется ключевое слово `override`."
  },
  {
    q: "Что такое полиморфизм и как он реализуется в C#?",
    a: "Полиморфизм — это способность объекта вести себя по-разному в зависимости от контекста. Реализуется через наследование и переопределение методов. Например, метод `Draw()` в классах `Circle`, `Square` может работать по-разному."
  },
  {
    q: "Что такое исключения (exceptions) и как их обрабатывать?",
    a: "Исключения — это ошибки, возникающие во время выполнения программы. Обрабатываются с помощью блоков `try`, `catch`, `finally`. `try` — код, который может вызвать ошибку, `catch` — обработка, `finally` — всегда выполняется, например, для закрытия ресурсов."
  },
  {
    q: "Что такое коллекции в C#? Назовите основные типы.",
    a: "Коллекции — это структуры данных для хранения и управления группами объектов. Основные типы: `List<T>`, `Dictionary<TKey, TValue>`, `Queue<T>`, `Stack<T>`, `HashSet<T>`. Они находятся в пространстве имён `System.Collections.Generic`."
  },
  {
    q: "Что такое обобщения (generics) и зачем они нужны?",
    a: "Generics позволяют создавать классы, интерфейсы и методы, которые работают с любым типом данных, обеспечивая типобезопасность. Пример: `List<string> names = new List<string>();`. Generics избегают приведения типов и повышают производительность."
  },
  {
    q: "Что такое LINQ и как его использовать?",
    a: "LINQ (Language Integrated Query) — это набор методов для запросов к коллекциям, массивам, БД. Используется через методы вроде `Where()`, `Select()`, `OrderBy()`. Пример: `var filtered = list.Where(x => x.Age > 20);`."
  },
  {
    q: "Что такое делегаты и события?",
    a: "Делегат — это тип, представляющий ссылку на метод. События — это специальный вид делегатов, используемый для реализации шаблона Observer. Делегаты позволяют передавать методы как параметры, события — уведомлять об изменениях."
  },
  {
    q: "Что такое async и await в C#?",
    a: "`async` и `await` — ключевые слова, позволяющие писать асинхронный код, не блокируя поток. Метод, помеченный `async`, возвращает `Task` или `Task<T>`. `await` приостанавливает выполнение метода, пока задача не завершится."
  },
  {
    q: "Что такое файлы проекта .csproj и .sln?",
    a: "Файл `.csproj` — это файл проекта C#, который содержит информацию о сборке, ссылках, файлах исходного кода. `.sln` — файл решения, в котором объединены несколько проектов. Используются в Visual Studio и других IDE для управления проектами."
  },
  {
    q: "Какие инструменты используются для разработки на C#?",
    a: "Основные инструменты: **Visual Studio** (мощная IDE от Microsoft), **Visual Studio Code** (лёгкий редактор с поддержкой C# через расширения), **Rider** (от JetBrains), **.NET CLI** (консольные команды для создания и запуска проектов)."
  },
  {
    q: "Что такое NuGet и зачем он нужен?",
    a: "NuGet — это менеджер пакетов для .NET. Позволяет подключать и управлять библиотеками и зависимостями в проекте. Пакеты можно устанавливать через Visual Studio, .NET CLI или редактировать вручную в файле `.csproj`."
  }
];