export default [
  {
    q: "Что такое управляемый и неуправляемый код в .NET?",
    a: "Управляемый код — это код, который выполняется под контролем CLR (.NET Runtime), имеет автоматическое управление памятью (GC) и проверку типов безопасности. Неуправляемый код (например, Win32 API или C++ библиотеки) работает вне среды .NET и не управляется CLR."
  },
  {
    q: "Что такое сборка мусора (Garbage Collection) в .NET? Какие поколения объектов вы знаете?",
    a: "GC — это механизм автоматического управления памятью, который освобождает память от объектов, на которые больше нет ссылок. В .NET есть три поколения: Gen 0 (новые объекты), Gen 1 (промежуточные), Gen 2 (долгоживущие). Чем выше поколение — тем реже GC его проверяет."
  },
  {
    q: "Что такое IDisposable и оператор using в C#?",
    a: "`IDisposable` — это интерфейс, реализуя который класс может освобождать неуправляемые ресурсы (например, файлы, соединения с БД). Метод `Dispose()` вызывается явно. Оператор `using` гарантирует, что `Dispose()` будет вызван автоматически после выхода из блока."
  },
  {
    q: "В чём разница между IEnumerable<T> и IQueryable<T>?",
    a: "`IEnumerable<T>` используется для локальных коллекций и выполняет фильтрацию на клиенте (в памяти). `IQueryable<T>` применяется при работе с LINQ to SQL/Entity Framework и формирует запрос к источнику данных (например, к БД), что повышает производительность."
  },
  {
    q: "Что такое async/await и как он работает под капотом?",
    a: "`async/await` — это синтаксический сахар над Task-based Asynchronous Pattern. При использовании `await`, метод приостанавливается, но поток освобождается для выполнения других задач. После завершения задачи продолжение выполняется в контексте синхронизации (например, UI-поток)."
  },
  {
    q: "Какие существуют способы передачи параметров в методы (`in`, `ref`, `out`)?",
    a: "`in` — передаётся по ссылке, но значение нельзя изменить внутри метода. `ref` — позволяет изменять значение переменной внутри метода. `out` — переменная должна быть присвоена внутри метода. Используется, когда нужно вернуть несколько значений."
  },
  {
    q: "Что такое интерфейсы и абстрактные классы? Когда что использовать?",
    a: "Интерфейсы содержат только сигнатуры методов, свойств и событий. Класс может реализовывать несколько интерфейсов. Абстрактный класс может иметь реализацию и состояние. Используйте интерфейсы, если нужна гибкость и множественная реализация, абстрактный класс — если есть общая реализация."
  },
  {
    q: "Что такое SOLID и как они применяются в C#?",
    a: "SOLID — это 5 принципов проектирования: **S**ingle Responsibility, **O**pen/Closed, **L**iskov Substitution, **I**nterface Segregation, **D**ependency Inversion. Применяются в C# через разделение ответственностей, использование интерфейсов, инверсию зависимостей и т.д."
  },
  {
    q: "Что такое Dependency Injection и как он реализован в ASP.NET Core?",
    a: "DI — это способ внедрения зависимостей без жёсткой привязки. В ASP.NET Core DI встроен в сам фреймворк. Сервисы регистрируются через `services.AddTransient()`, `AddScoped()`, `AddSingleton()` и внедряются через конструктор контроллеров или других сервисов."
  },
  {
    q: "Что такое Entity Framework и какие основные компоненты вы знаете?",
    a: "EF — это ORM для работы с БД через классы. Основные компоненты: `DbContext` (сессия с БД), `DbSet<TEntity>` (набор сущностей), LINQ-запросы, Migrations (миграции), Change Tracker (отслеживание изменений). Поддерживает Code First, Database First."
  },
  {
    q: "Что такое миграции в EF Core и как их применять?",
    a: "Миграции — это способ обновления схемы БД в соответствии с изменениями в коде модели. Создаются через команды `Add-Migration`, `Update-Database`. Формируют SQL-скрипты для создания/изменения таблиц, индексов и ограничений."
  },
  {
    q: "Что такое LINQ и как он работает с коллекциями и БД?",
    a: "LINQ (Language Integrated Query) — это набор методов расширений для работы с данными. С коллекциями работает через `IEnumerable<T>`, с БД — через `IQueryable<T>`. Запросы могут быть написаны в синтаксисе методов или query-выражений."
  },
  {
    q: "Что такое делегаты, предикаты и действия?",
    a: "Делегат — это тип, представляющий ссылку на метод. `Predicate<T>` — это делегат, возвращающий bool (используется в фильтрации). `Action<T>` — выполняет действие без возврата значения. `Func<T, TResult>` — возвращает результат."
  },
  {
    q: "Что такое события и как их реализовать в C#?",
    a: "События — это специальный вид делегатов, используемых для реализации шаблона Observer. Объявляются с помощью ключевого слова `event`. Позволяют подписываться на изменения и уведомлять подписчиков. Используется в GUI и системах событий."
  },
  {
    q: "Что такое CancellationToken и зачем он нужен?",
    a: "`CancellationToken` используется для отмены асинхронных операций. Передаётся в метод, и если токен получает сигнал отмены, операция может быть прервана. Используется в долгих задачах, веб-запросах, фоновых службах."
  },
  {
    q: "Что такое Parallel и Task? В чём разница?",
    a: "`Task` — это высокоуровневая абстракция для асинхронного и параллельного программирования. `Parallel` — часть TPL, предназначенная для параллельного выполнения циклов (`For`, `ForEach`). `Task` более гибкий и часто используется вместе с `async/await`."
  },
  {
    q: "Что такое PLINQ и когда его использовать?",
    a: "PLINQ (Parallel LINQ) — это параллельная реализация LINQ. Выполняет запросы на нескольких потоках с помощью `.AsParallel()`. Используется, когда нужно ускорить обработку больших локальных коллекций на CPU."
  },
  {
    q: "Что такое паттерн Repository и как его реализовать в C#?",
    a: "Repository — это паттерн, абстрагирующий работу с источником данных (БД, файлы). Реализуется через интерфейс, определяющий CRUD-операции, и конкретную реализацию, работающую с EF или другим ORM. Упрощает тестирование и замену слоя доступа к данным."
  },
  {
    q: "Что такое Unit of Work и как он связан с Repository?",
    a: "Unit of Work — это паттерн, координирующий работу нескольких Repository и гарантирующий согласованность изменений. В EF `DbContext` играет роль UoW. Он отслеживает изменения и коммитит их одной транзакцией."
  },
  {
    q: "Что такое AutoMapper и как он используется?",
    a: "AutoMapper — это библиотека для автоматического маппинга между объектами (например, DTO и доменные модели). Настройка происходит через профили. Упрощает преобразование объектов и уменьшает boilerplate-код."
  },
  {
    q: "Что такое Mediator и CQRS? Когда использовать?",
    a: "Mediator — это паттерн, который централизует коммуникацию между компонентами. CQRS (Command Query Responsibility Segregation) разделяет чтение и запись. Часто используются вместе в сложных приложениях для улучшения читаемости, тестируемости и масштабируемости."
  },
  {
    q: "Что такое partial class и когда её использовать?",
    a: "Partial class — это возможность разделения определения класса на несколько файлов. Полезна при работе с автогенерируемым кодом (например, дизайнер Windows Forms или WPF). Все части объединяются во время компиляции."
  },
  {
    q: "Что такое extension methods и как их создать?",
    a: "Extension methods — это статические методы, которые добавляют функциональность к существующим типам без изменения их исходного кода. Объявляются в статическом классе и первый параметр помечается ключевым словом `this`."
  },
  {
    q: "Что такое nullable reference types и как они помогают?",
    a: "Nullable Reference Types — это функция, которая позволяет указать, может ли ссылочный тип быть null. Если переменная объявлена как `string name;`, компилятор предупреждает, если она может быть null. Это помогает избежать NullReferenceException."
  },
  {
    q: "Что такое сериализация и десериализация в C#?",
    a: "Сериализация — это процесс преобразования объекта в поток данных (JSON, XML). Десериализация — обратный процесс. Используется для сохранения состояния, передачи данных между сервисами. В .NET есть `JsonSerializer`, `DataContractSerializer`, `XmlSerializer`."
  },
  {
    q: "Что такое ADO.NET и чем он отличается от Entity Framework?",
    a: "ADO.NET — это низкоуровневый API для работы с БД через `SqlConnection`, `SqlCommand`, `DataSet`. Entity Framework — это ORM, предоставляющая высокоуровневый доступ к данным. EF строится на основе ADO.NET, но скрывает детали работы с SQL."
  },
  {
    q: "Что такое unit-тестирование и какие фреймворки вы знаете?",
    a: "Unit-тестирование — это подход к тестированию отдельных модулей кода. В C# популярные фреймворки: xUnit, NUnit, MSTest. Тесты пишутся как методы, помеченные атрибутами (`[Fact]`, `[Test]`), и проверяют ожидаемое поведение."
  },
  {
    q: "Что такое Moq и как им пользоваться?",
    a: "Moq — это фреймворк для создания mock-объектов при unit-тестировании. Позволяет имитировать поведение зависимостей, чтобы тестировать один класс изолированно. Например, можно создать mock репозитория и задать возвращаемые значения без обращения к БД."
  },
  {
    q: "Что такое ASP.NET Core и какие его особенности?",
    a: "ASP.NET Core — это кроссплатформенный фреймворк для создания веб-приложений и сервисов. Особенности: высокая производительность, встроенный DI, middleware pipeline, поддержка MVC, Razor Pages, Web API, gRPC и SignalR."
  },
  {
    q: "Что такое middleware в ASP.NET Core?",
    a: "Middleware — это компоненты, обрабатывающие HTTP-запросы и формирующие ответ. Они работают в виде конвейера: каждый может обработать запрос, передать дальше или остановить. Регистрируются в методе `Configure` через `app.Use...()`."
  },
  {
    q: "Что такое Tag Helpers и View Components в ASP.NET Core MVC?",
    a: "Tag Helpers — это элементы Razor, которые добавляют серверный код в HTML-элементы. Например, `asp-controller`, `asp-action`. View Components — аналог контроллеров для частичных представлений, используются для повторно используемых UI-компонентов."
  }
];