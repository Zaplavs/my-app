export default [
  {
    q: "Что такое Java и в чём её основные особенности?",
    a: "Java — это статически типизированный, объектно-ориентированный язык программирования, который работает на виртуальной машине (JVM). Основные особенности: кроссплатформенность («write once, run anywhere»), автоматическое управление памятью, строгая типизация.",
    tags: ["введение", "особенности"],
    level: "junior"
  },
  {
    q: "Какие примитивные типы данных существуют в Java?",
    a: "В Java 8 примитивных типов: byte, short, int, long (целые числа), float, double (дробные), char (символ), boolean (логический тип).",
    tags: ["типы данных", "основы"],
    level: "junior"
  },
  {
    q: "Чем отличаются == и .equals() при сравнении объектов?",
    a: "'==' сравнивает ссылки на объекты в памяти, а метод .equals() сравнивает их содержимое. Для строк рекомендуется использовать .equals(), чтобы избежать ошибок.",
    tags: ["строки", "операторы", "сравнение"],
    level: "junior"
  },
  {
    q: "Что такое JVM, JRE и JDK?",
    a: "JVM (Java Virtual Machine) — виртуальная машина, которая исполняет байт-код Java. JRE — среда выполнения, включающая JVM и библиотеки. JDK — набор разработчика, включающий компилятор, отладчик и другие инструменты.",
    tags: ["инструменты", "основы"],
    level: "junior"
  },
  {
    q: "Как создать объект в Java?",
    a: "Объект создаётся с помощью ключевого слова new и вызова конструктора класса. Пример: MyClass obj = new MyClass();",
    tags: ["объекты", "классы"],
    level: "junior"
  },
  {
    q: "Что такое класс и объект?",
    a: "Класс — это шаблон или чертёж, описывающий поведение и состояние. Объект — это экземпляр класса, хранящий конкретные данные.",
    tags: ["объекты", "классы"],
    level: "junior"
  },
  {
    q: "Что такое конструктор?",
    a: "Конструктор — это специальный метод, который вызывается при создании объекта. Он используется для инициализации состояния объекта.",
    tags: ["конструкторы", "классы"],
    level: "junior"
  },
  {
    q: "Что такое перегрузка методов?",
    a: "Перегрузка методов — это возможность иметь несколько методов с одинаковым именем, но разными параметрами (тип и/или количество). Это не относится к возвращаемому типу.",
    tags: ["методы", "полиморфизм"],
    level: "junior"
  },
  {
    q: "Что такое наследование?",
    a: "Наследование — это механизм, при котором один класс (потомок) наследует поля и методы другого класса (родителя). Позволяет повторно использовать код и строить иерархию классов.",
    tags: ["наследование", "ООП"],
    level: "junior"
  },
  {
    q: "Что такое инкапсуляция?",
    a: "Инкапсуляция — это принцип ООП, позволяющий скрывать детали реализации класса от внешнего мира. Доступ к внутреннему состоянию осуществляется через методы (например, getter и setter).",
    tags: ["ООП", "принципы"],
    level: "junior"
  },
  {
    q: "Что такое полиморфизм?",
    a: "Полиморфизм — это способность объекта принимать разные формы. В Java реализуется через перегрузку методов (compile-time) и переопределение методов (run-time).",
    tags: ["ООП", "принципы"],
    level: "junior"
  },
  {
    q: "Что такое абстрактный класс?",
    a: "Абстрактный класс — это класс, который не может быть создан напрямую и может содержать как реализованные, так и абстрактные методы. Используется как базовый класс для других классов.",
    tags: ["классы", "ООП"],
    level: "junior"
  },
  {
    q: "Что такое интерфейс?",
    a: "Интерфейс — это полностью абстрактный класс, в котором все методы являются public и abstract по умолчанию. С Java 8 в интерфейсах можно определять дефолтные и статические методы.",
    tags: ["интерфейсы", "ООП"],
    level: "junior"
  },
  {
    q: "Что такое String, StringBuilder и StringBuffer?",
    a: "String — неизменяемый класс для работы со строками. StringBuilder и StringBuffer — изменяемые. StringBuffer потокобезопасен, а StringBuilder — нет, но быстрее.",
    tags: ["строки", "коллекции"],
    level: "junior"
  },
  {
    q: "Как работают массивы в Java?",
    a: "Массив — это фиксированная коллекция элементов одного типа. Создаётся с помощью new int[5]. Доступ к элементам по индексу. Индексы начинаются с 0.",
    tags: ["массивы", "коллекции"],
    level: "junior"
  },
  {
    q: "Что такое ArrayList и чем он отличается от массива?",
    a: "ArrayList — это динамический массив, который может менять размер. В отличие от обычного массива, позволяет добавлять и удалять элементы без указания размера заранее.",
    tags: ["коллекции", "ArrayList"],
    level: "junior"
  },
  {
    q: "Что такое обобщения (Generics)?",
    a: "Generics — это механизм, позволяющий писать код, независимый от конкретного типа. Например: List<String> list = new ArrayList<>();",
    tags: ["Generics", "коллекции"],
    level: "junior"
  },
  {
    q: "Что такое исключения и как они обрабатываются в Java?",
    a: "Исключения — это ошибки во время выполнения программы. Обрабатываются с помощью блока try-catch-finally. Исключения бывают checked (проверяемые) и unchecked (непроверяемые).",
    tags: ["исключения", "обработка ошибок"],
    level: "junior"
  },
  {
    q: "Что такое сборка мусора (Garbage Collection)?",
    a: "Сборка мусора — это процесс автоматического освобождения памяти, занимаемой объектами, которые больше не используются. Это одна из особенностей JVM.",
    tags: ["память", "производительность"],
    level: "junior"
  },
  {
    q: "Как запустить Java-приложение из командной строки?",
    a: "Для этого нужно сначала скомпилировать файл с помощью javac MyProgram.java, затем запустить его с помощью java MyProgram.",
    tags: ["компиляция", "запуск"],
    level: "junior"
  },
  {
    q: "Что такое модификаторы доступа в Java?",
    a: "Модификаторы доступа определяют видимость полей, методов и классов. Основные: private, default (package-private), protected, public.",
    tags: ["модификаторы", "ООП"],
    level: "junior"
  }
];