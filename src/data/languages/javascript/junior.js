export default [
  {
    q: "Что такое JavaScript и где он используется?",
    a: "JavaScript — это динамически типизированный язык программирования, который в основном используется для создания интерактивного поведения на веб-страницах. Он работает в браузерах, а также на сервере (Node.js), мобильных приложениях (React Native) и других платформах."
  },
  {
    q: "Какие типы данных существуют в JavaScript?",
    a: "В JavaScript есть 8 типов данных: number (число), string (строка), boolean (логическое значение), null (отсутствие значения), undefined (неопределенное значение), object (объект), symbol (уникальный идентификатор), bigint (очень большие числа)."
  },
  {
    q: "В чём разница между let, const и var?",
    a: "var — устаревший способ объявления переменной, имеет функциональную область видимости и поднимается (hoisting). let и const появились в ES6. let позволяет менять значение, const — константа, значение нельзя переназначить после объявления. Оба имеют блочную область видимости."
  },
  {
    q: "Что такое hoisting (поднятие) в JavaScript?",
    a: "Hoisting — это механизм, при котором переменные и функции перемещаются в начало области видимости перед выполнением кода. При этом переменные через var инициализируются как undefined, а функции полностью поднимаются. let и const тоже поднимаются, но не инициализируются до объявления (Temporal Dead Zone)."
  },
  {
    q: "Чем отличаются == и ===?",
    a: "Оператор == сравнивает значения с приведением типов (например, '5' == 5 → true). Оператор === проверяет значение и тип без приведения (строгое сравнение): '5' === 5 → false."
  },
  {
    q: "Что такое замыкание? Приведите пример.",
    a: "Замыкание — это функция, которая имеет доступ к переменным внешней функции даже после её завершения. Пример:\n\nfunction outer() {\n  let count = 0;\n  return function inner() {\n    count++;\n    return count;\n  };\n}\nconst counter = outer();\ncounter(); // 1\ncounter(); // 2"
  },
  {
    q: "Как работают функции в JavaScript?",
    a: "Функции в JavaScript являются объектами первого класса, то есть их можно передавать как аргументы другим функциям, возвращать из функций и присваивать переменным. Они могут быть объявлены через function declaration, function expression или arrow function."
  },
  {
    q: "Что такое область видимости (scope)?",
    a: "Область видимости определяет, какие переменные и функции доступны в определённом участке кода. В JavaScript есть глобальная, функциональная и блочная области видимости. let и const ограничены блоком { }, var — функцией."
  },
  {
    q: "Что такое callback-функция?",
    a: "Callback-функция — это функция, переданная в другую функцию в качестве аргумента и вызванная позже. Используется в асинхронном программировании, например, в обработчиках событий или setTimeout.\n\nsetTimeout(function() {\n  console.log('Привет');\n}, 1000);"
  },
  {
    q: "Как работают массивы в JavaScript? Какие методы вы знаете?",
    a: "Массивы — это структуры данных для хранения упорядоченных элементов. Основные методы: push(), pop(), shift(), unshift(), slice(), splice(), map(), filter(), forEach(). Массивы изменяемы и индексируются с нуля."
  },
  {
    q: "Что такое объекты в JavaScript и как с ними работать?",
    a: "Объекты — это коллекции пар ключ-значение. Создаются с помощью фигурных скобок {}. К свойствам можно обращаться через точку obj.name или квадратные скобки obj['name']. Объекты изменяемы и могут содержать любые типы данных, включая другие объекты и функции (методы)."
  },
  {
    q: "Что означает this в JavaScript?",
    a: "this — это ссылка на контекст выполнения функции. Значение this зависит от того, как вызывается функция. В обычной функции this указывает на глобальный объект (window в браузере) или undefined в strict mode. В методе объекта this ссылается на сам объект. У стрелочных функций нет своего this — они берут его из внешнего контекста."
  },
  {
    q: "Что такое стрелочные функции и чем они отличаются от обычных?",
    a: "Стрелочные функции (arrow functions) создаются с помощью синтаксиса () => {}. Они не имеют собственного this, arguments, super и не могут быть использованы как конструкторы (нет new.target). Чаще всего используются как короткие анонимные функции."
  },
  {
    q: "Как работает оператор typeof?",
    a: "typeof возвращает тип переданного значения в виде строки: 'number', 'string', 'boolean', 'object', 'function', 'undefined'. Например: typeof 42 → 'number', typeof {} → 'object'."
  },
  {
    q: "Что такое JSON и как с ним работать в JavaScript?",
    a: "JSON (JavaScript Object Notation) — это формат обмена данными, основанный на синтаксисе JavaScript. В JS используется для сериализации/десериализации данных. JSON.stringify(obj) преобразует объект в строку, JSON.parse(str) — обратно."
  },
  {
    q: "Что такое DOM и как с ним взаимодействовать?",
    a: "DOM (Document Object Model) — это представление HTML-документа в виде дерева объектов, с которым можно взаимодействовать с помощью JavaScript. Для работы с DOM используются методы: document.getElementById(), querySelector(), addEventListener(), innerHTML, createElement(), appendChild() и другие."
  },
  {
    q: "Как работают события в JavaScript? Что такое event listener?",
    a: "События — это действия, происходящие в браузере (например, клик, загрузка страницы, отправка формы). Слушатель событий (event listener) — это функция, которая выполняется при возникновении события. Добавляется через addEventListener('click', handler)."
  },
  {
    q: "Что такое Promise и как он используется?",
    a: "Promise — это объект, представляющий результат асинхронной операции. Может находиться в состоянии pending, fulfilled или rejected. Используется с then() для получения результата и catch() для обработки ошибок. Также может использоваться с async/await для более читаемого кода."
  },
  {
    q: "Что такое async/await и как его использовать?",
    a: "async/await — это синтаксический сахар над Promises, позволяющий писать асинхронный код как синхронный. Функция с async всегда возвращает Promise. await приостанавливает выполнение до завершения Promise. Пример:\n\nasync function getData() {\n  const res = await fetch('https://api.example.com/data ');\n  return await res.json();\n}"
  },
  {
    q: "Как работают условия if/else и switch в JavaScript?",
    a: "if/else позволяет выполнять разный код в зависимости от истинности условия. switch сравнивает выражение с несколькими case и выполняет соответствующий блок кода. После выполнения case обычно используется break, чтобы остановить дальнейшее выполнение."
  },
  {
    q: "Какие циклы существуют в JavaScript?",
    a: "Основные циклы: for, while, do...while, for...in (для объектов), for...of (для итерируемых объектов). Цикл for состоит из инициализации, условия и шага. while и do...while выполняются до тех пор, пока условие истинно."
  },
  {
    q: "Что такое NaN и как его проверить?",
    a: "NaN (Not a Number) — это значение, которое возвращается, если операция не может вернуть число. isNaN() и Number.isNaN() проверяют, является ли значение NaN. Number.isNaN() предпочтительнее, так как не пытается привести типы."
  },
  {
    q: "Что такое тернарный оператор?",
    a: "Тернарный оператор — это короткая форма if/else: condition ? exprIfTrue : exprIfFalse. Например: let age = 18; let canVote = age >= 18 ? 'Да' : 'Нет';"
  },
  {
    q: "Как работают шаблонные строки (template literals)?",
    a: "Шаблонные строки — это способ создания строк с использованием обратных кавычек `` и вставки выражений через ${}. Позволяют легко добавлять переменные, многострочные тексты и динамические значения. Пример: `Имя: ${name}, Возраст: ${age}`."
  },
  {
    q: "Как работает оператор spread (...) в JavaScript?",
    a: "Оператор spread распаковывает элементы из массива или объекта. Используется для копирования, объединения и передачи аргументов. Пример: const arr = [1, 2, 3]; const newArr = [...arr, 4];"
  },
  {
    q: "Что такое деструктуризация объектов и массивов?",
    a: "Деструктуризация позволяет извлекать значения из массивов или объектов в переменные. Пример:\n\nconst user = { name: 'Alice', age: 25 };\nconst { name, age } = user;\n\nconst [a, b] = [1, 2];"
  },
  {
    q: "Как работает работа с локальным хранилищем (localStorage)?",
    a: "localStorage — это встроенный в браузер API для хранения данных в виде строк. Методы: localStorage.setItem('key', 'value'), localStorage.getItem('key'), localStorage.removeItem('key'), localStorage.clear(). Данные сохраняются даже после закрытия браузера."
  },
  {
    q: "Что такое BOM и какие объекты он предоставляет?",
    a: "BOM (Browser Object Model) — это набор объектов, предоставляемых браузером для работы с окнами и вкладками. Основные объекты: window, navigator, location, history, screen. Например, window.location.href возвращает текущий URL."
  },
  {
    q: "Что такое Event Loop и как он работает?",
    a: "Event Loop — это механизм, который управляет выполнением кода, обработкой событий и асинхронными операциями в JavaScript. Он работает в однопоточном режиме, используя стек вызовов, очередь макрозадач и очередь микрозадач. Это позволяет JavaScript выполнять асинхронный код без блокировки основного потока."
  },
  {
    q: "Какие ошибки могут возникнуть в JavaScript и как их обрабатывать?",
    a: "Виды ошибок: SyntaxError (ошибка синтаксиса), ReferenceError (обращение к несуществующей переменной), TypeError (неправильный тип). Обработка происходит через try/catch/finally. finally выполняется всегда, независимо от исключения."
  }
];