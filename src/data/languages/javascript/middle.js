export default [
  {
    q: "Что такое замыкание (closure) в JavaScript?",
    a: "Замыкание — это комбинация функции и лексического окружения, в котором эта функция была объявлена. Замыкания позволяют сохранять доступ к переменным внешней функции даже после её завершения."
  },
  {
    q: "В чём разница между `==` и `===`?",
    a: "`==` сравнивает значения с приведением типов, а `===` — строгое сравнение без приведения типов. Например, `5 == '5'` вернёт true, а `5 === '5'` — false."
  },
  {
    q: "Как работает `this` в JavaScript?",
    a: "`this` указывает на контекст вызова функции. Его значение зависит от того, как вызывается функция: через метод объекта, как конструктор, с `call`, `apply`, или в обычном вызове. В строгом режиме `this` может быть undefined."
  },
  {
    q: "Что такое hoisting в JavaScript?",
    a: "Hoisting — это механизм, при котором объявления переменных (`var`) и функций поднимаются в начало области видимости. Однако присвоение значения остаётся на месте. Объявления `let` и `const` тоже поднимаются, но не инициализируются сразу (Temporal Dead Zone)."
  },
  {
    q: "Чем отличаются `let`, `const`, `var`?",
    a: "`var` имеет функциональную область видимости и поднимается целиком. `let` и `const` блочно-облачны, не поднимаются полностью, и имеют TDZ. `const` нельзя переопределять, но можно мутировать объекты/массивы."
  },
  {
    q: "Что такое прототипное наследование?",
    a: "Прототипное наследование — это механизм наследования в JS, где объект может иметь ссылку на другой объект (прототип), который используется для поиска свойств. Если свойство не найдено в объекте, поиск продолжается в его прототипе."
  },
  {
    q: "Что такое event loop в JavaScript?",
    a: "Event Loop — это механизм, который управляет выполнением кода, обрабатывает события и очередь колбэков. Он берет задачи из стека вызовов, если он свободен, и из очередей обратных вызовов (макрозадачи, микрозадачи)."
  },
  {
    q: "Какие различия между `setTimeout`, `setInterval`, `requestAnimationFrame`?",
    a: "`setTimeout` выполняет код один раз через указанное время, `setInterval` — периодически, `requestAnimationFrame` оптимизирован для анимаций и вызывается перед перерисовкой экрана."
  },
  {
    q: "Что такое промис (Promise)?",
    a: "Promise — это объект, представляющий результат асинхронной операции. Может находиться в состоянии fulfilled (успех), rejected (ошибка), pending (ожидание). Позволяет использовать `.then()` и `.catch()`."
  },
  {
    q: "Что означают ключевые слова `async` и `await`?",
    a: "`async` делает функцию асинхронной и всегда возвращает Promise. `await` используется внутри async-функций для ожидания результата Promise, что упрощает работу с асинхронным кодом."
  },
  {
    q: "Что такое IIFE и зачем он нужен?",
    a: "IIFE (Immediately Invoked Function Expression) — это функция, которая вызывается сразу после своего объявления. Используется для создания локальной области видимости, чтобы избежать загрязнения глобального пространства имён."
  },
  {
    q: "Что такое callback-функция?",
    a: "Callback-функция — это функция, переданная в другую функцию в качестве аргумента и вызванная позже. Широко используется в асинхронном программировании до появления промисов."
  },
  {
    q: "Что такое каррирование (currying)?",
    a: "Каррирование — это техника преобразования функции с несколькими аргументами в последовательность функций, каждая из которых принимает один аргумент. Например: `add(a)(b)` вместо `add(a, b)`."
  },
  {
    q: "Как работает метод `bind`?",
    a: "`bind` создаёт новую функцию, привязывая к ней значение `this` и, при необходимости, аргументы. Эта функция может быть вызвана позже, например как обработчик события."
  },
  {
    q: "В чём разница между `null` и `undefined`?",
    a: "`undefined` означает, что значение не было присвоено, либо переменная объявлена, но не инициализирована. `null` — это намеренно присвоенное значение, представляющее отсутствие объекта."
  },
  {
    q: "Что такое деструктуризация объектов и массивов?",
    a: "Деструктуризация — это способ извлекать значения из объектов или массивов и присваивать их переменным. Например: `const { name } = user;` или `const [a, b] = arr;`."
  },
  {
    q: "Как работает spread-оператор и rest-параметры?",
    a: "Spread (`...`) раскладывает массив или объект на элементы. Rest (`...args`) собирает оставшиеся аргументы в массив. Spread часто используется для клонирования или слияния, rest — в функциях."
  },
  {
    q: "Что такое модульный паттерн (module pattern)?",
    a: "Модульный паттерн использует IIFE для инкапсуляции данных и методов, предоставляя только те, которые нужны внешне. Это помогает создавать приватные переменные и методы в JS."
  },
  {
    q: "Что такое шаблон проектирования Singleton?",
    a: "Singleton гарантирует, что класс имеет только один экземпляр, и предоставляет глобальную точку доступа к нему. В JS реализуется через замыкания или модульный паттерн."
  },
  {
    q: "Что такое debounce и throttle?",
    a: "Debounce ограничивает частоту вызова функции, выполняя её только спустя заданный интервал без повторного вызова. Throttle ограничивает вызов функции раз в определённый интервал времени, игнорируя остальные."
  },
  {
    q: "Как работает `reduce` в массивах?",
    a: "`reduce` применяет функцию-аккумулятор к каждому элементу массива, сводя его к одному значению. Используется для суммирования, группировки, фильтрации и других задач."
  },
  {
    q: "Что такое JSON и как работать с ним в JS?",
    a: "JSON (JavaScript Object Notation) — формат обмена данными. В JS используются методы `JSON.stringify()` для сериализации объекта в строку и `JSON.parse()` для обратного преобразования."
  },
  {
    q: "Что такое DOM и BOM?",
    a: "DOM (Document Object Model) — это API для работы с HTML-документом. BOM (Browser Object Model) — объекты браузера, такие как `window`, `location`, `navigator`. Не стандартизированы, но широко используются."
  },
  {
    q: "Как работает `event.preventDefault()` и `event.stopPropagation()`?",
    a: "`preventDefault()` предотвращает стандартное действие браузера (например, отправку формы). `stopPropagation()` останавливает всплытие события, чтобы оно не достигло родительских элементов."
  },
  {
    q: "Что такое Webpack и зачем он нужен?",
    a: "Webpack — это сборщик модулей. Он объединяет файлы JavaScript, CSS, изображения и другие ресурсы в единые бандлы, позволяет использовать ES6+ модули, транспилировать код, минифицировать и оптимизировать."
  },
  {
    q: "Что такое HTTP-заголовки и какие вы знаете?",
    a: "HTTP-заголовки — это дополнительные данные, передаваемые в запросах и ответах. Примеры: `Content-Type`, `Authorization`, `Accept`, `Cache-Control`. Они управляют поведением клиента и сервера."
  },
  {
    q: "Что такое CORS и как он работает?",
    a: "CORS (Cross-Origin Resource Sharing) — это механизм безопасности, позволяющий серверу указать, какие источники могут запрашивать его ресурсы. Браузер проверяет заголовки ответа, прежде чем разрешить запрос."
  },
  {
    q: "Что такое шаблон Observer?",
    a: "Observer — это поведенческий паттерн, в котором один объект уведомляет всех зависимых от него объектов (наблюдателей) о произошедших изменениях. Используется для реализации подписки на события."
  },
  {
    q: "Как работают генераторы (generators) в JS?",
    a: "Генераторы — это специальный вид функций, которые могут приостанавливать своё выполнение и возобновлять его. Объявляются с помощью `function*`. Возвращают объект-итератор, и используют `yield` для возврата значений."
  },
  {
    q: "Что такое Proxy и Reflect в JavaScript?",
    a: "`Proxy` позволяет создать обёртку вокруг объекта, перехватывая операции над ним (например, чтение, запись). `Reflect` содержит статические методы, соответствующие таким операциям, и часто используется вместе с Proxy."
  }
];