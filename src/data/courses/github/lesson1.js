export default {
  id: 1,
  title: "Введение в системы контроля версий",
  contentBlocks: [
    {
      type: 'text',
      text: `
        <p>
          <strong>Система контроля версий</strong> (Version Control System или VCS) — это инструмент, который позволяет отслеживать изменения в файлах и сохранять их историю. 
          Это особенно полезно при разработке программного обеспечения, когда несколько человек работают над одним проектом.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Что такое система контроля версий?</h3>
        <p>
          Системы контроля версий позволяют сохранять разные версии файлов, сравнивать, восстанавливать и понимать, кто и что изменил. 
          Такие системы помогают избежать ситуации, когда вы случайно перезаписываете важные изменения или теряете старую, но нужную версию кода.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Типы систем контроля версий</h3>
      `
    },
    {
      type: 'text',
      text: `
        <ul class="list-disc pl-5 space-y-1 mb-4">
          <li><strong>Локальные VCS</strong> — хранят все данные локально на вашем компьютере. Пример: RCS.</li>
          <li><strong>Централизованные VCS (CVCS)</strong> — используют один центральный сервер для хранения всех версий файлов. Примеры: SVN, CVS.</li>
          <li><strong>Распределённые VCS (DVCS)</strong> — каждый пользователь имеет полную копию репозитория с историей изменений. Пример: Git, Mercurial.</li>
        </ul>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Централизованная система контроля версий</h3>
        <p>
          В централизованных системах есть один главный сервер, где хранится вся история проекта. Разработчики делают копии файлов у себя, вносят изменения и отправляют их обратно на сервер.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <ul class="list-disc pl-5 space-y-1 mb-4">
          <li>Плюсы: проще в управлении, удобен контроль доступа.</li>
          <li>Минусы: если сервер выходит из строя — можно потерять данные. Работа возможна только при наличии соединения с сервером.</li>
        </ul>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Распределённая система контроля версий</h3>
        <p>
          В распределённых системах контроля версий у каждого разработчика есть полная копия репозитория, включая всю историю изменений. Это позволяет работать автономно и обмениваться изменениями напрямую между коллегами.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <ul class="list-disc pl-5 space-y-1 mb-4">
          <li>Плюсы: отказоустойчивость, возможность работать без подключения к сети, более гибкая система ветвления и слияния.</li>
          <li>Минусы: немного сложнее для новичков, больше данных хранится локально.</li>
        </ul>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Почему именно Git?</h3>
        <p>
          <strong>Git</strong> — самая популярная распределённая система контроля версий на сегодняшний день. Она была создана Линусом Торвальдсом в 2005 году для управления разработкой ядра Linux.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <ul class="list-disc pl-5 space-y-1 mb-4">
          <li>Быстрый и эффективный: операции выполняются локально, поэтому они очень быстрые.</li>
          <li>Открытый исходный код: любой может изучить его устройство и даже модифицировать.</li>
          <li>Широкое сообщество: огромное количество документации, инструментов и платформ (например, GitHub, GitLab).</li>
          <li>Гибкость: поддерживает различные рабочие процессы и стратегии ветвления.</li>
        </ul>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Как работает Git?</h3>
        <p>
          Git отслеживает изменения в файлах и фиксирует их в виде так называемых <strong>коммитов</strong>. Каждый коммит содержит информацию о том, кто его сделал, когда и какие изменения были внесены.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <p>
          Также Git использует понятие <strong>веток</strong>, которые позволяют параллельно работать над разными функциями проекта и затем объединять эти изменения.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <p>
          Это лишь базовое представление о системах контроля версий. Далее мы рассмотрим установку Git, работу с командной строкой и основные команды для начала работы.
        </p>
      `
    }
  ],
  task: "Назовите одно преимущество распределённой системы контроля версий перед централизованной.",
  exampleAnswer: "Одно из преимуществ распределённой системы — возможность работать автономно, без постоянного подключения к серверу."
};