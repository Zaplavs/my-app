export default {
  id: 5,
  title: "Основные команды Git: add и commit",
  contentBlocks: [
    {
      type: 'text',
      text: `
        <p>
          Теперь, когда вы создали свой первый репозиторий, пришло время научиться добавлять файлы и сохранять изменения с помощью двух самых важных команд Git:
          <code>git add</code> и <code>git commit</code>.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Как работает Git: краткий обзор</h3>
        <p>
          Git отслеживает изменения в трёх основных состояниях:
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <ul class="list-disc pl-5 space-y-1 mb-4">
          <li><strong>Рабочая директория (working directory)</strong> — ваши обычные файлы на диске.</li>
          <li><strong>Индекс (staging area)</strong> — промежуточная область, куда вы добавляете изменения перед коммитом.</li>
          <li><strong>Репозиторий (repository)</strong> — место, где хранятся зафиксированные версии проекта (коммиты).</li>
        </ul>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Добавление файлов в индекс: git add</h3>
        <p>
          Чтобы подготовить изменения к сохранению, используется команда:
        </p>
      `
    },
    {
      type: 'code',
      code: `git add имя_файла`
    },
    {
      type: 'text',
      text: `
        <p>
          Эта команда добавляет указанный файл в <strong>индекс</strong> — временную область, которая будет использована при следующем коммите.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <p>
          Если вы хотите добавить все файлы из текущей директории:
        </p>
      `
    },
    {
      type: 'code',
      code: `git add .`
    },
    {
      type: 'text',
      text: `
        <p>
          Это удобно, когда вы хотите закоммитить все изменения сразу.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Совершение коммита: git commit</h3>
        <p>
          После того как нужные файлы добавлены в индекс, можно выполнить коммит — зафиксировать текущее состояние проекта:
        </p>
      `
    },
    {
      type: 'code',
      code: `git commit -m "Ваше сообщение к коммиту"`
    },
    {
      type: 'text',
      text: `
        <p>
          Каждый коммит должен иметь понятное описание. Сообщение после флага <code>-m</code> объясняет, что было изменено.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Пример использования:</h3>
      `
    },
    {
      type: 'code',
      code: `echo "Hello, Git!" > README.txt\ngit add README.txt\ngit commit -m "Добавлен файл README с приветствием"`
    },
    {
      type: 'text',
      text: `
        <p>
          Таким образом, файл <code>README.txt</code> был создан, добавлен в индекс и зафиксирован в истории проекта.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Сообщения к коммитам: правила написания</h3>
        <p>
          Хорошее сообщение к коммиту помогает другим разработчикам (и вам самим) быстро понять, что было изменено.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <ul class="list-disc pl-5 space-y-1 mb-4">
          <li>Пишите кратко, но информативно (рекомендуется не более 50 символов).</li>
          <li>Начинайте с глагола в повелительном наклонении: <em>"Исправлен баг"</em>, а не <em>"Исправляю баг"</em>.</li>
          <li>Если нужно, добавьте подробности в теле сообщения (без <code>-m</code> Git откроет текстовый редактор для расширенного описания).</li>
          <li>Избегайте общих формулировок вроде <em>"Изменения"</em> или <em>"Обнова"</em>.</li>
        </ul>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Хорошие примеры сообщений:</h3>
      `
    },
    {
      type: 'text',
      text: `
        <ul class="list-disc pl-5 space-y-1 mb-4">
          <li><code>Исправлено падение приложения при загрузке данных</code></li>
          <li><code>Добавлена проверка email в форму регистрации</code></li>
          <li><code>Обновлён README с инструкцией по установке</code></li>
        </ul>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Итог</h3>
        <p>
          Вы узнали, как использовать две самые важные команды Git:
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <ul class="list-disc pl-5 space-y-1 mb-4">
          <li><code>git add</code> — добавляет файлы в индекс.</li>
          <li><code>git commit</code> — фиксирует изменения с описанием.</li>
        </ul>
      `
    },
    {
      type: 'text',
      text: `
        <p>
          Также вы теперь знаете, как правильно оформлять сообщения к коммитам, чтобы сделать историю изменений читаемой и полезной.
        </p>
        <p>
          В следующем уроке мы разберём, как просматривать историю коммитов и проверять изменения до коммита.
        </p>
      `
    }
  ],
  task: "Создайте файл index.html, добавьте его в индекс и сделайте коммит с осмысленным сообщением.",
  exampleAnswer: "Выполнены команды:\necho \"<h1>Hello World</h1>\" > index.html\ngit add index.html\ngit commit -m \"Создан index.html с заголовком\""
};