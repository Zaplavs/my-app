// src/data/courses/c/lesson12/part3.jsx
import React, { useState } from 'react';
import { Monitor, FileText, Play, Code, Edit3, HardDrive, CheckCircle, Database } from 'lucide-react';

const Part3 = () => {
  const [completedTasks, setCompletedTasks] = useState({
    task1: false,
    task2: false,
    task3: false
  });

  const handleTaskComplete = (task) => {
    setCompletedTasks(prev => ({
      ...prev,
      [task]: !prev[task]
    }));
  };

  return (
    <div className="space-y-8 text-gray-200">
      {/* –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ */}
      <div className="bg-gradient-to-r from-blue-900/30 to-purple-900/30 backdrop-blur-sm border border-blue-700/30 rounded-2xl p-6 shadow-lg">
        <div className="flex items-start gap-4">
          <div className="bg-blue-500/20 p-3 rounded-lg">
            <Monitor className="w-6 h-6 text-blue-400" />
          </div>
          <div>
            <h1 className="text-2xl md:text-3xl font-bold text-white mb-2">üíª –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –≤ C</h1>
            <p className="text-gray-300">
              <span className="font-medium text-yellow-400">üéØ –¶–µ–ª—å:</span> –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –æ—Å–≤–æ–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ —Å –ø–æ–º–æ—â—å—é malloc() –∏ free().
            </p>
          </div>
        </div>
      </div>

      {/* –ó–∞–¥–∞–Ω–∏–µ 1: –ü—Ä–æ—Å—Ç–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ */}
      <div className={`bg-gray-800/40 backdrop-blur-sm border rounded-2xl p-6 shadow-xl ${completedTasks.task1 ? 'border-green-700/50' : 'border-gray-700/50'}`}>
        <h2 className="flex items-center gap-2 text-xl font-bold text-white mb-4">
          <FileText className="w-5 h-5 text-green-400" />
          –ó–∞–¥–∞–Ω–∏–µ 1: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
        </h2>
        <div className="prose prose-invert max-w-none text-gray-300 leading-relaxed">
          <p>
            –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –º–∞—Å—Å–∏–≤–æ–º —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª:
          </p>
        </div>
        <div className="mt-6 space-y-6">
          <div className="bg-gray-900/50 p-5 rounded-xl border border-green-700/30">
            <h3 className="font-bold text-green-300 mb-3 flex items-center gap-2">
              <span className="bg-gray-700 w-6 h-6 rounded-full flex items-center justify-center text-sm">1</span>
              –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –º–∞—Å—Å–∏–≤–æ–º
            </h3>
            <ul className="list-disc pl-6 space-y-2 text-gray-300">
              <li>–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª <code className="bg-gray-700 px-1.5 py-0.5 rounded">dynamic_array.c</code></li>
              <li>–ó–∞–ø—Ä–æ—Å–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞</li>
              <li>–í—ã–¥–µ–ª–∏—Ç–µ –ø–∞–º—è—Ç—å –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª —Å –ø–æ–º–æ—â—å—é <code className="bg-gray-700 px-1.5 py-0.5 rounded">malloc()</code></li>
              <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —É—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∞ –ø–∞–º—è—Ç—å</li>
              <li>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏ –∏–Ω–¥–µ–∫—Å–æ–≤)</li>
              <li>–í—ã–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å–∏–≤ –Ω–∞ —ç–∫—Ä–∞–Ω</li>
              <li>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ –ø–∞–º—è—Ç—å —Å –ø–æ–º–æ—â—å—é <code className="bg-gray-700 px-1.5 py-0.5 rounded">free()</code></li>
            </ul>
          </div>
          
          <div className="bg-gray-900/50 p-5 rounded-xl border border-blue-700/30">
            <h3 className="font-bold text-blue-300 mb-3 flex items-center gap-2">
              <span className="bg-gray-700 w-6 h-6 rounded-full flex items-center justify-center text-sm">2</span>
              –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            </h3>
            <div className="bg-gray-800 p-4 rounded-lg mt-3 text-sm">
              <pre className="text-green-300">
{`#include <stdio.h>
#include <stdlib.h>

int main() {
    int n;
    
    printf("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: ");
    scanf("%d", &n);
    
    // –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    int *arr = (int*)malloc(n * sizeof(int));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    if (arr == NULL) {
        printf("–û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏!\\n");
        return 1;
    }
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
    printf("–ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏ –∏–Ω–¥–µ–∫—Å–æ–≤:\\n");
    for (int i = 0; i < n; i++) {
        arr[i] = i * i;
    }
    
    // –í—ã–≤–æ–¥ –º–∞—Å—Å–∏–≤–∞
    printf("–ú–∞—Å—Å–∏–≤:\\n");
    for (int i = 0; i < n; i++) {
        printf("arr[%d] = %d\\n", i, arr[i]);
    }
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    free(arr);
    arr = NULL;
    
    printf("–ü–∞–º—è—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\\n");
    
    return 0;
}`}
              </pre>
            </div>
            <div className="mt-3 p-3 bg-black rounded text-sm">
              <p className="text-white">–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã:</p>
              <p className="text-gray-300 text-xs">
                –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: 5<br/>
                –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏ –∏–Ω–¥–µ–∫—Å–æ–≤:<br/>
                –ú–∞—Å—Å–∏–≤:<br/>
                arr[0] = 0<br/>
                arr[1] = 1<br/>
                arr[2] = 4<br/>
                arr[3] = 9<br/>
                arr[4] = 16<br/>
                –ü–∞–º—è—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
              </p>
            </div>
          </div>
        </div>
        
        <div className="mt-6 flex items-center">
          <input
            type="checkbox"
            id="task1"
            checked={completedTasks.task1}
            onChange={() => handleTaskComplete('task1')}
            className="w-5 h-5 text-blue-600 rounded focus:ring-blue-500"
          />
          <label htmlFor="task1" className="ml-2 text-gray-300">
            –Ø —Å–æ–∑–¥–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –º–∞—Å—Å–∏–≤–æ–º —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
          </label>
          {completedTasks.task1 && <CheckCircle className="ml-2 w-5 h-5 text-green-400" />}
        </div>
      </div>

      {/* –ó–∞–¥–∞–Ω–∏–µ 2: –†–∞–±–æ—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –º–∞—Å—Å–∏–≤–æ–º –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª */}
      <div className={`bg-gray-800/40 backdrop-blur-sm border rounded-2xl p-6 shadow-xl ${completedTasks.task2 ? 'border-green-700/50' : 'border-gray-700/50'}`}>
        <h2 className="flex items-center gap-2 text-xl font-bold text-white mb-4">
          <Edit3 className="w-5 h-5 text-purple-400" />
          –ó–∞–¥–∞–Ω–∏–µ 2: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        </h2>
        <div className="prose prose-invert max-w-none text-gray-300 leading-relaxed">
          <p>
            –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –º–∞—Å—Å–∏–≤–æ–º –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–æ–π:
          </p>
        </div>
        <div className="mt-6 space-y-6">
          <div className="bg-gray-900/50 p-5 rounded-xl border border-purple-700/30">
            <h3 className="font-bold text-purple-300 mb-3">–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:</h3>
            <ul className="list-disc pl-6 space-y-2 text-gray-300">
              <li>–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª <code className="bg-gray-700 px-1.5 py-0.5 rounded">float_array.c</code></li>
              <li>–ó–∞–ø—Ä–æ—Å–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞</li>
              <li>–í—ã–¥–µ–ª–∏—Ç–µ –ø–∞–º—è—Ç—å –¥–ª—è –º–∞—Å—Å–∏–≤–∞ <code className="bg-gray-700 px-1.5 py-0.5 rounded">float</code> —Å –ø–æ–º–æ—â—å—é <code className="bg-gray-700 px-1.5 py-0.5 rounded">malloc()</code></li>
              <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏</li>
              <li>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</li>
              <li>–ù–∞–π–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏—è</li>
              <li>–í—ã–≤–µ–¥–∏—Ç–µ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</li>
              <li>–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ –ø–∞–º—è—Ç—å</li>
            </ul>
            <div className="mt-4 bg-gray-800 p-3 rounded">
              <pre className="text-purple-300 text-sm">
{`#include <stdio.h>
#include <stdlib.h>

int main() {
    int n;
    
    printf("–°–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏? ");
    scanf("%d", &n);
    
    // –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ float
    float *numbers = (float*)malloc(n * sizeof(float));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    if (numbers == NULL) {
        printf("–û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏!\\n");
        return 1;
    }
    
    // –í–≤–æ–¥ —á–∏—Å–µ–ª
    printf("–í–≤–µ–¥–∏—Ç–µ %d —á–∏—Å–µ–ª:\\n", n);
    for (int i = 0; i < n; i++) {
        printf("–ß–∏—Å–ª–æ %d: ", i + 1);
        scanf("%f", &numbers[i]);
    }
    
    // –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º—É–º–∞, –º–∞–∫—Å–∏–º—É–º–∞ –∏ —Å—É–º–º—ã
    float min = numbers[0], max = numbers[0], sum = 0;
    
    for (int i = 0; i < n; i++) {
        if (numbers[i] < min) min = numbers[i];
        if (numbers[i] > max) max = numbers[i];
        sum += numbers[i];
    }
    
    float average = sum / n;
    
    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    printf("\\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\\n");
    printf("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: %.2f\\n", min);
    printf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: %.2f\\n", max);
    printf("–°—Ä–µ–¥–Ω–µ–µ: %.2f\\n", average);
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    free(numbers);
    numbers = NULL;
    
    printf("–ü–∞–º—è—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞.\\n");
    
    return 0;
}`}
              </pre>
            </div>
          </div>
        </div>
        
        <div className="mt-6 flex items-center">
          <input
            type="checkbox"
            id="task2"
            checked={completedTasks.task2}
            onChange={() => handleTaskComplete('task2')}
            className="w-5 h-5 text-blue-600 rounded focus:ring-blue-500"
          />
          <label htmlFor="task2" className="ml-2 text-gray-300">
            –Ø —Å–æ–∑–¥–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –º–∞—Å—Å–∏–≤–æ–º –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª
          </label>
          {completedTasks.task2 && <CheckCircle className="ml-2 w-5 h-5 text-green-400" />}
        </div>
      </div>

      {/* –ó–∞–¥–∞–Ω–∏–µ 3: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ */}
      <div className={`bg-gray-800/40 backdrop-blur-sm border rounded-2xl p-6 shadow-xl ${completedTasks.task3 ? 'border-green-700/50' : 'border-gray-700/50'}`}>
        <h2 className="flex items-center gap-2 text-xl font-bold text-white mb-4">
          <Database className="w-5 h-5 text-cyan-400" />
          –ó–∞–¥–∞–Ω–∏–µ 3: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫
        </h2>
        <div className="prose prose-invert max-w-none text-gray-300 leading-relaxed">
          <p>
            –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é:
          </p>
        </div>
        <div className="mt-6 space-y-6">
          <div className="bg-gray-900/50 p-5 rounded-xl border border-cyan-700/30">
            <h3 className="font-bold text-cyan-300 mb-3">–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:</h3>
            <ul className="list-disc pl-6 space-y-2 text-gray-300">
              <li>–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª <code className="bg-gray-700 px-1.5 py-0.5 rounded">memory_safety.c</code></li>
              <li>–°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–µ–ª—è–µ—Ç –ø–∞–º—è—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å</li>
              <li>–°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–∞–º—è—Ç—å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ NULL</li>
              <li>–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π</li>
              <li>–ü–æ–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ NULL –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º</li>
              <li>–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —É—Ç–µ—á–∫–æ–π –ø–∞–º—è—Ç–∏ –∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ, –ø–æ—á–µ–º—É –æ–Ω–∞ –æ–ø–∞—Å–Ω–∞</li>
            </ul>
            <div className="mt-4 bg-gray-800 p-3 rounded">
              <pre className="text-cyan-300 text-xs">
{`#include <stdio.h>
#include <stdlib.h>

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
int* create_array(int size) {
    if (size <= 0) {
        printf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞!\\n");
        return NULL;
    }
    
    int *arr = (int*)malloc(size * sizeof(int));
    
    if (arr == NULL) {
        printf("–û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏!\\n");
        return NULL;
    }
    
    printf("–ü–∞–º—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∞ –¥–ª—è %d —ç–ª–µ–º–µ–Ω—Ç–æ–≤\\n", size);
    return arr;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
void destroy_array(int **arr_ptr) {
    if (arr_ptr == NULL || *arr_ptr == NULL) {
        printf("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å: —É–∫–∞–∑–∞—Ç–µ–ª—å NULL\\n");
        return;
    }
    
    free(*arr_ptr);
    *arr_ptr = NULL;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ NULL
    printf("–ü–∞–º—è—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞\\n");
}

int main() {
    int size;
    
    printf("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: ");
    scanf("%d", &size);
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    int *my_array = create_array(size);
    
    if (my_array != NULL) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤
        for (int i = 0; i < size; i++) {
            my_array[i] = i + 1;
        }
        
        printf("–ú–∞—Å—Å–∏–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω: ");
        for (int i = 0; i < size; i++) {
            printf("%d ", my_array[i]);
        }
        printf("\\n");
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ
        destroy_array(&my_array);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å NULL
    if (my_array == NULL) {
        printf("–£–∫–∞–∑–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ NULL - –±–µ–∑–æ–ø–∞—Å–Ω–æ\\n");
    }
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
    printf("\\n–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è:\\n");
    destroy_array(&my_array);  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
    
    return 0;
}`}
              </pre>
            </div>
            <div className="mt-4 p-3 bg-yellow-900/20 border border-yellow-700/30 rounded-lg">
              <p className="text-yellow-300 text-sm">
                ‚ö†Ô∏è <span className="font-medium">–í–∞–∂–Ω–æ:</span> –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞—Ç–µ–ª—å (&my_array) 
                –≤ —Ñ—É–Ω–∫—Ü–∏—é destroy_array() ‚Äî —ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å!
              </p>
            </div>
          </div>
        </div>
        
        <div className="mt-6 flex items-center">
          <input
            type="checkbox"
            id="task3"
            checked={completedTasks.task3}
            onChange={() => handleTaskComplete('task3')}
            className="w-5 h-5 text-blue-600 rounded focus:ring-blue-500"
          />
          <label htmlFor="task3" className="ml-2 text-gray-300">
            –Ø —Å–æ–∑–¥–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π –ø–∞–º—è—Ç–∏
          </label>
          {completedTasks.task3 && <CheckCircle className="ml-2 w-5 h-5 text-green-400" />}
        </div>
      </div>

      {/* –ó–∞–∫–ª—é—á–µ–Ω–∏–µ */}
      <div className="bg-gray-800/40 backdrop-blur-sm border border-gray-700/50 rounded-2xl p-6 shadow-xl">
        <div className="flex items-start gap-3">
          <div className="bg-green-500/20 p-2 rounded-lg flex-shrink-0">
            <CheckCircle className="w-5 h-5 text-green-400" />
          </div>
          <div>
            <h3 className="font-bold text-white mb-2">–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ</h3>
            <p className="text-gray-300">
              –¢–µ–ø–µ—Ä—å –≤—ã —É–≤–µ—Ä–µ–Ω–Ω–æ –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç—å—é –≤ C. 
              –í—ã –Ω–∞—É—á–∏–ª–∏—Å—å –≤—ã–¥–µ–ª—è—Ç—å –ø–∞–º—è—Ç—å —Å –ø–æ–º–æ—â—å—é <code className="bg-gray-700 px-1.5 py-0.5 rounded">malloc()</code>, 
              –æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å –µ—ë —Å –ø–æ–º–æ—â—å—é <code className="bg-gray-700 px-1.5 py-0.5 rounded">free()</code>, 
              –∏ÊúÄÈáçË¶ÅÁöÑÊòØ - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã.
              –í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –Ω–∞—É—á–∏–º—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥–∏—Å–∫.
            </p>
            {Object.values(completedTasks).every(task => task) && (
              <div className="mt-3 p-3 bg-green-900/20 border border-green-700/30 rounded-lg flex items-center">
                <CheckCircle className="w-5 h-5 text-green-400 mr-2 flex-shrink-0" />
                <span className="text-green-300">–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –í—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.</span>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Part3;