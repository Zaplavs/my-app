import React, { useState } from 'react';
import { CheckCircle, XCircle, RotateCcw, Award, RotateCcw as LoopIcon, Code, HelpCircle, Hash, ArrowRight, X } from 'lucide-react';

const Part2 = () => {
  // –î–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞ "–ú–∞—Å—Å–∏–≤—ã –≤ Go"
  const quizData = [
    {
      id: 1,
      question: "–ö–∞–∫ –æ–±—ä—è–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ 5 —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –≤ Go?",
      options: [
        "arr int[5]",
        "arr := [5]int",
        "arr := []int{5}",
        "arr := new int[5]"
      ],
      correctAnswer: 1 // arr := [5]int
    },
    {
      id: 2,
      question: "–° –∫–∞–∫–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω—É–º–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –≤ Go?",
      options: [
        "–° 1",
        "–° 0",
        "–° -1",
        "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö"
      ],
      correctAnswer: 1 // –° 0
    },
    {
      id: 3,
      question: "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É –º–∞—Å—Å–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, arr[10] –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –∏–∑ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)?",
      options: [
        "–í–µ—Ä–Ω—ë—Ç—Å—è –Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
        "–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –≤—ã–¥–∞—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
        "–ü—Ä–æ–∏–∑–æ–π–¥—ë—Ç panic (–æ—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É —Å –º—É—Å–æ—Ä–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º"
      ],
      correctAnswer: 2 // –ü—Ä–æ–∏–∑–æ–π–¥—ë—Ç panic
    },
    {
      id: 4,
      question: "–ö–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞?",
      options: [
        "size()",
        "length()",
        "len()",
        "count()"
      ],
      correctAnswer: 2 // len()
    },
    {
      id: 5,
      question: "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞?",
      options: [
        "days := [..]string{\"–ü–Ω\", \"–í—Ç\", \"–°—Ä\"}",
        "days := [...]string{\"–ü–Ω\", \"–í—Ç\", \"–°—Ä\"}",
        "days := []string{\"–ü–Ω\", \"–í—Ç\", \"–°—Ä\"}",
        "days := string[]{\"–ü–Ω\", \"–í—Ç\", \"–°—Ä\"}"
      ],
      correctAnswer: 1 // days := [...]string{"–ü–Ω", "–í—Ç", "–°—Ä"}
    },
    {
      id: 6,
      question: "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?\n\narr := [3]int{1, 2, 3}\nfmt.Println(len(arr))",
      options: [
        "0",
        "1",
        "3",
        "–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"
      ],
      correctAnswer: 2 // 3
    },
    {
      id: 7,
      question: "–ö–∞–∫ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –º–∞—Å—Å–∏–≤—ã –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ Go?",
      options: [
        "–ü–æ —Å—Å—ã–ª–∫–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)",
        "–ü–æ –∑–Ω–∞—á–µ–Ω–∏—é (–ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–æ–ø–∏—è)",
        "–ü–æ —É–∫–∞–∑–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ)",
        "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –º–∞—Å—Å–∏–≤–∞"
      ],
      correctAnswer: 1 // –ü–æ –∑–Ω–∞—á–µ–Ω–∏—é (–ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–æ–ø–∏—è)
    },
    {
      id: 8,
      question: "–ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –ø–æ—Å–ª–µ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è?",
      options: [
        "–î–∞, —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ resize()",
        "–î–∞, –¥–æ–±–∞–≤–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ append()",
        "–ù–µ—Ç, —Ä–∞–∑–º–µ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω",
        "–î–∞, –Ω–æ —Ç–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–∞—Ç—å"
      ],
      correctAnswer: 2 // –ù–µ—Ç, —Ä–∞–∑–º–µ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω
    },
    {
      id: 9,
      question: "–Ø–≤–ª—è—é—Ç—Å—è –ª–∏ [3]int –∏ [5]int –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ —Ç–∏–ø–æ–º –≤ Go?",
      options: [
        "–î–∞, –æ–±–∞ ‚Äî –º–∞—Å—Å–∏–≤—ã —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª",
        "–ù–µ—Ç, —Ä–∞–∑–º–µ—Ä ‚Äî —á–∞—Å—Ç—å —Ç–∏–ø–∞",
        "–î–∞, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ",
        "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
      ],
      correctAnswer: 1 // –ù–µ—Ç, —Ä–∞–∑–º–µ—Ä ‚Äî —á–∞—Å—Ç—å —Ç–∏–ø–∞
    },
    {
      id: 10,
      question: "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?\n\nfunc modify(arr [2]int) {\n    arr[0] = 999\n}\n\nfunc main() {\n    nums := [2]int{1, 2}\n    modify(nums)\n    fmt.Println(nums[0])\n}",
      options: [
        "999",
        "1",
        "0",
        "–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"
      ],
      correctAnswer: 1 // 1 (—Ç.–∫. –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–æ–ø–∏—è)
    },
    {
      id: 11,
      question: "–ö–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤, –∑–∞–¥–∞–≤ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤?",
      options: [
        "arr := [5]int{1=10, 3=30}",
        "arr := [5]int{1:10, 3:30}",
        "arr := [5]int{index1:10, index3:30}",
        "arr := [5]int{pos(1):10, pos(3):30}"
      ],
      correctAnswer: 1 // arr := [5]int{1:10, 3:30}
    },
    {
      id: 12,
      question: "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ int –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏?",
      options: [
        "nil",
        "undefined",
        "0",
        "1"
      ],
      correctAnswer: 2 // 0
    },
    {
      id: 13,
      question: "–ö–∞–∫–æ–π –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ –∏–∑ N —ç–ª–µ–º–µ–Ω—Ç–æ–≤?",
      options: [
        "N",
        "N+1",
        "N-1",
        "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö"
      ],
      correctAnswer: 2 // N-1
    },
    {
      id: 14,
      question: "–ö–∞–∫–æ–π —Ç–∏–ø –∏–º–µ–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –æ–±—ä—è–≤–ª–µ–Ω–Ω–∞—è –∫–∞–∫: var matrix [3][3]int?",
      options: [
        "–°—Ä–µ–∑ —Å—Ä–µ–∑–æ–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª",
        "–ú–∞—Å—Å–∏–≤ –∏–∑ 9 —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª",
        "–ú–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤: 3 –º–∞—Å—Å–∏–≤–∞ –ø–æ 3 int",
        "–î–≤—É–º–µ—Ä–Ω—ã–π —Å—Ä–µ–∑"
      ],
      correctAnswer: 2 // –ú–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤: 3 –º–∞—Å—Å–∏–≤–∞ –ø–æ 3 int
    }
  ];

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
  const [userAnswers, setUserAnswers] = useState(Array(quizData.length).fill(null));
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(0);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
  const handleAnswerSelect = (questionIndex, optionIndex) => {
    if (submitted) return; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const newAnswers = [...userAnswers];
    newAnswers[questionIndex] = optionIndex;
    setUserAnswers(newAnswers);
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
  const handleSubmit = () => {
    let newScore = 0;
    userAnswers.forEach((answer, index) => {
      if (answer === quizData[index].correctAnswer) {
        newScore++;
      }
    });
    setScore(newScore);
    setSubmitted(true);
  };

  // –°–±—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
  const handleReset = () => {
    setUserAnswers(Array(quizData.length).fill(null));
    setSubmitted(false);
    setScore(0);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã
  const allAnswered = userAnswers.every(answer => answer !== null);

  return (
    <div className="space-y-6">
      <div className="bg-gradient-to-r from-green-900/30 to-teal-900/30 backdrop-blur-sm border border-green-700/30 rounded-2xl p-6 shadow-lg">
        <div className="flex items-start gap-4">
          <div className="bg-green-500/20 p-3 rounded-lg">
            <LoopIcon className="w-6 h-6 text-green-400" />
          </div>
          <div>
            <h1 className="text-2xl md:text-3xl font-bold text-white mb-2">üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –ú–∞—Å—Å–∏–≤—ã –≤ Go</h1>
            <p className="text-gray-300">
              –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ —Ç–µ–º–µ <span className="font-medium text-yellow-400">–º–∞—Å—Å–∏–≤–æ–≤ –≤ Go</span>.
            </p>
            <p className="text-gray-400 text-sm mt-2">–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.</p>
          </div>
        </div>
      </div>

      <div className="bg-gray-800/40 backdrop-blur-sm border border-gray-700/50 rounded-2xl p-6 shadow-xl">
        {quizData.map((q, questionIndex) => {
          const isSelected = userAnswers[questionIndex] !== null;
          const isCorrect = userAnswers[questionIndex] === q.correctAnswer;
          
          return (
            <div 
              key={q.id} 
              className={`mb-8 last:mb-0 p-4 rounded-lg ${
                submitted && isSelected && isCorrect 
                  ? 'bg-green-900/20 border border-green-700/30' 
                  : submitted && isSelected && !isCorrect 
                    ? 'bg-red-900/20 border border-red-700/30' 
                    : 'bg-gray-900/50'
              }`}
            >
              <h3 className="font-medium text-white mb-3 flex items-start gap-2">
                <span className="flex-shrink-0">{questionIndex + 1}.</span>
                <span>{q.question}</span>
              </h3>
              <div className="space-y-2">
                {q.options.map((option, optionIndex) => {
                  let optionStyle = "block w-full text-left p-3 rounded-lg transition-colors duration-200 ";
                  if (submitted) {
                    if (optionIndex === q.correctAnswer) {
                      optionStyle += "bg-green-700 text-white"; // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    } else if (optionIndex === userAnswers[questionIndex] && optionIndex !== q.correctAnswer) {
                      optionStyle += "bg-red-700 text-white"; // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                    } else {
                      optionStyle += "bg-gray-800 text-gray-400 cursor-not-allowed"; // –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    }
                  } else {
                    // –°—Ç–∏–ª–∏ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    if (userAnswers[questionIndex] === optionIndex) {
                      optionStyle += "bg-blue-600 text-white"; // –í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    } else {
                      optionStyle += "bg-gray-800 hover:bg-gray-700 text-gray-300"; // –ù–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π
                    }
                  }

                  return (
                    <button
                      key={optionIndex}
                      onClick={() => handleAnswerSelect(questionIndex, optionIndex)}
                      className={optionStyle}
                      disabled={submitted} // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    >
                      <div className="flex items-center">
                        <span className="mr-2 font-mono flex-shrink-0">{String.fromCharCode(65 + optionIndex)}.</span>
                        <span>{option}</span>
                        {submitted && optionIndex === q.correctAnswer && (
                          <CheckCircle className="ml-auto w-5 h-5 text-green-400 flex-shrink-0" />
                        )}
                        {submitted && optionIndex === userAnswers[questionIndex] && optionIndex !== q.correctAnswer && (
                          <XCircle className="ml-auto w-5 h-5 text-red-400 flex-shrink-0" />
                        )}
                        {!submitted && userAnswers[questionIndex] === optionIndex && (
                          <span className="ml-auto w-5 h-5 rounded-full bg-blue-400 flex-shrink-0"></span>
                        )}
                      </div>
                    </button>
                  );
                })}
              </div>
              {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
              {submitted && isSelected && (
                <div className={`mt-3 text-sm p-2 rounded flex items-start gap-2 ${isCorrect ? 'bg-green-900/30 text-green-300' : 'bg-red-900/30 text-red-300'}`}>
                  {isCorrect ? (
                    <>
                      <CheckCircle className="w-5 h-5 flex-shrink-0 mt-0.5" />
                      <span>–í–µ—Ä–Ω–æ!</span>
                    </>
                  ) : (
                    <>
                      <XCircle className="w-5 h-5 flex-shrink-0 mt-0.5" />
                      <span>–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {String.fromCharCode(65 + q.correctAnswer)}.</span>
                    </>
                  )}
                </div>
              )}
            </div>
          );
        })}

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex flex-wrap items-center justify-between gap-4 pt-4 mt-6 border-t border-gray-700">
          {!submitted ? (
            <button
              onClick={handleSubmit}
              disabled={!allAnswered}
              className={`px-6 py-3 rounded-lg font-medium flex items-center gap-2 transition-all duration-300 ${
                allAnswered
                  ? 'bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white shadow-lg hover:shadow-xl transform hover:scale-[1.02] cursor-pointer'
                  : 'bg-gray-700 text-gray-500 cursor-not-allowed'
              }`}
            >
              <CheckCircle className="w-5 h-5" />
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã
            </button>
          ) : (
            <div className="flex flex-wrap items-center gap-4">
              <div className="flex items-center gap-2 bg-gray-900 px-4 py-3 rounded-lg">
                <Award className="w-5 h-5 text-yellow-400 flex-shrink-0" />
                <span className="font-bold text-white">–†–µ–∑—É–ª—å—Ç–∞—Ç: </span>
                <span className="font-bold text-xl text-yellow-400">{score}</span>
                <span className="text-gray-400">/ {quizData.length}</span>
              </div>
              <button
                onClick={handleReset}
                className="px-6 py-3 bg-gray-700 hover:bg-gray-600 text-white rounded-lg font-medium flex items-center gap-2 transition-colors duration-200 whitespace-nowrap"
              >
                <RotateCcw className="w-5 h-5" />
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Part2;