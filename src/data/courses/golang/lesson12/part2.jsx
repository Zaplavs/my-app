import React, { useState } from 'react';
import { CheckCircle, XCircle, RotateCcw, Award, RotateCcw as LoopIcon, Code, HelpCircle, Hash, ArrowRight, X } from 'lucide-react';

const Part2 = () => {
  // –î–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞ "–°–ª–∞–π—Å—ã (–°—Ä–µ–∑—ã) –≤ Go"
  const quizData = [
    {
      id: 1,
      question: "–ß–µ–º —Å–ª–∞–π—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –º–∞—Å—Å–∏–≤–∞ –≤ Go?",
      options: [
        "–°–ª–∞–π—Å –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä, –º–∞—Å—Å–∏–≤ ‚Äî –Ω–µ—Ç",
        "–ú–∞—Å—Å–∏–≤ –≤—Å–µ–≥–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞, —Å–ª–∞–π—Å ‚Äî —Å—Ç—Ä–æ–∫–∏",
        "–°–ª–∞–π—Å –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é, –º–∞—Å—Å–∏–≤ ‚Äî –ø–æ —Å—Å—ã–ª–∫–µ",
        "–£ –º–∞—Å—Å–∏–≤–∞ –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ len(), —É —Å–ª–∞–π—Å–∞ –µ—Å—Ç—å"
      ],
      correctAnswer: 0 // –°–ª–∞–π—Å –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä, –º–∞—Å—Å–∏–≤ ‚Äî –Ω–µ—Ç
    },
    {
      id: 2,
      question: "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—ä—è–≤–∏—Ç—å —Å–ª–∞–π—Å —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª?",
      options: [
        "var slice int[]",
        "var slice []int",
        "var slice [ ]int",
        "var slice array<int>"
      ],
      correctAnswer: 1 // var slice []int
    },
    {
      id: 3,
      question: "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è cap() –ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ —Å–ª–∞–π—Å—É?",
      options: [
        "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ª–∞–π—Å–µ",
        "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Å–ª–∞–π—Å –º–æ–∂–µ—Ç –≤–º–µ—Å—Ç–∏—Ç—å –±–µ–∑ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏",
        "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ë–º–∫–æ—Å—Ç—å –≤ –±–∞–π—Ç–∞—Ö",
        "–ö–æ–ø–∏—Ä—É–µ—Ç —Å–ª–∞–π—Å"
      ],
      correctAnswer: 1 // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Å–ª–∞–π—Å –º–æ–∂–µ—Ç –≤–º–µ—Å—Ç–∏—Ç—å –±–µ–∑ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    },
    {
      id: 4,
      question: "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ª–∞–π—Å?",
      options: [
        "slice.add(5)",
        "slice.push(5)",
        "slice = append(slice, 5)",
        "append(slice, 5)"
      ],
      correctAnswer: 2 // slice = append(slice, 5)
    },
    {
      id: 5,
      question: "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å append() –Ω–∞ —Å–ª–∞–π—Å–µ, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –µ–≥–æ —ë–º–∫–æ—Å—Ç—å?",
      options: [
        "–ü—Ä–æ–∏–∑–æ–π–¥—ë—Ç –æ—à–∏–±–∫–∞",
        "Go –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–µ–ª–∏—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–∫–æ–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ",
        "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å panic"
      ],
      correctAnswer: 1 // Go –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–µ–ª–∏—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–∫–æ–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
    },
    {
      id: 6,
      question: "–ö–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–∞–π—Å–∞ –≤ –¥—Ä—É–≥–æ–π?",
      options: [
        "clone()",
        "duplicate()",
        "copy()",
        "paste()"
      ],
      correctAnswer: 2 // copy()
    },
    {
      id: 7,
      question: "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?\n\narr := []int{1, 2, 3, 4, 5}\nslice := arr[1:4]\nfmt.Println(len(slice), cap(slice))",
      options: [
        "3 3",
        "3 4",
        "4 4",
        "4 5"
      ],
      correctAnswer: 1 // 3 4 (–¥–ª–∏–Ω–∞=3, —ë–º–∫–æ—Å—Ç—å=4, —Ç.–∫. –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞)
    },
    {
      id: 8,
      question: "–ü—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Å–ª–∞–π—Å–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?",
      options: [
        "–ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö",
        "–ö–æ–ø–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π—Å–∞ (—É–∫–∞–∑–∞—Ç–µ–ª—å, –¥–ª–∏–Ω–∞, —ë–º–∫–æ—Å—Ç—å)",
        "–ü–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –∫–∞–∫ —É–∫–∞–∑–∞—Ç–µ–ª—å",
        "–°–æ–∑–¥–∞—ë—Ç—Å—è –ø–æ–ª–Ω–∞—è –∫–æ–ø–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"
      ],
      correctAnswer: 1 // –ö–æ–ø–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π—Å–∞ (—É–∫–∞–∑–∞—Ç–µ–ª—å, –¥–ª–∏–Ω–∞, —ë–º–∫–æ—Å—Ç—å)
    },
    {
      id: 9,
      question: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–ª–∞–π—Å —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π 0 –∏ —ë–º–∫–æ—Å—Ç—å—é 100?",
      options: [
        "slice := make([]int, 100)",
        "slice := make([]int, 0, 100)",
        "slice := []int{cap: 100}",
        "slice := new([]int, 100)"
      ],
      correctAnswer: 1 // slice := make([]int, 0, 100)
    },
    {
      id: 10,
      question: "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∑–∞–ø–∏—Å—å slice[2:5]?",
      options: [
        "–≠–ª–µ–º–µ–Ω—Ç—ã —Å –∏–Ω–¥–µ–∫—Å–∞ 2 –ø–æ 5 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ",
        "–≠–ª–µ–º–µ–Ω—Ç—ã —Å –∏–Ω–¥–µ–∫—Å–∞ 2 –ø–æ 4 (5 –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è)",
        "–≠–ª–µ–º–µ–Ω—Ç—ã —Å –∏–Ω–¥–µ–∫—Å–∞ 3 –ø–æ 5",
        "–¢—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ª–∞–π—Å–∞"
      ],
      correctAnswer: 1 // –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∏–Ω–¥–µ–∫—Å–∞ 2 –ø–æ 4 (5 –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è)
    },
    {
      id: 11,
      question: "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?\n\noriginal := []int{1, 2, 3, 4, 5}\nsubset := original[1:3]\nsubset[0] = 999\nfmt.Println(original[1])",
      options: [
        "2",
        "999",
        "1",
        "–û—à–∏–±–∫–∞"
      ],
      correctAnswer: 1 // 999 (—Ç.–∫. —Å–ª–∞–π—Å—ã —Ä–∞–∑–¥–µ–ª—è—é—Ç –ø–∞–º—è—Ç—å)
    },
    {
      id: 12,
      question: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–ª–∞–π—Å –∏–∑ –º–∞—Å—Å–∏–≤–∞ arr := [5]int{1, 2, 3, 4, 5}?",
      options: [
        "slice := arr.slice()",
        "slice := arr[0:len(arr)]",
        "slice := []int(arr)",
        "slice := convert(arr)"
      ],
      correctAnswer: 1 // slice := arr[0:len(arr)] –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ arr[:]
    },
    {
      id: 13,
      question: "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ slice[:]? (–ø–æ–ª–Ω–∞—è –Ω–∞—Ä–µ–∑–∫–∞)",
      options: [
        "–°–æ–∑–¥–∞—ë—Ç nil-—Å–ª–∞–π—Å",
        "–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã",
        "–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Å–ª–∞–π—Å, —Å—Å—ã–ª–∞—é—â–∏–π—Å—è –Ω–∞ —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ",
        "–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤–æ–º –º–∞—Å—Å–∏–≤–µ"
      ],
      correctAnswer: 2 // –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Å–ª–∞–π—Å, —Å—Å—ã–ª–∞—é—â–∏–π—Å—è –Ω–∞ —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ
    },
    {
      id: 14,
      question: "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–æ–≥–æ —Å–ª–∞–π—Å–∞ –≤ –∫–æ–Ω–µ—Ü –¥—Ä—É–≥–æ–≥–æ?",
      options: [
        "slice1 = append(slice1, slice2)",
        "slice1 = append(slice1, slice2...)",
        "slice1.add(slice2)",
        "copy(slice1, slice2)"
      ],
      correctAnswer: 1 // slice1 = append(slice1, slice2...)
    }
  ];

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
  const [userAnswers, setUserAnswers] = useState(Array(quizData.length).fill(null));
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(0);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
  const handleAnswerSelect = (questionIndex, optionIndex) => {
    if (submitted) return; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const newAnswers = [...userAnswers];
    newAnswers[questionIndex] = optionIndex;
    setUserAnswers(newAnswers);
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
  const handleSubmit = () => {
    let newScore = 0;
    userAnswers.forEach((answer, index) => {
      if (answer === quizData[index].correctAnswer) {
        newScore++;
      }
    });
    setScore(newScore);
    setSubmitted(true);
  };

  // –°–±—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
  const handleReset = () => {
    setUserAnswers(Array(quizData.length).fill(null));
    setSubmitted(false);
    setScore(0);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã
  const allAnswered = userAnswers.every(answer => answer !== null);

  return (
    <div className="space-y-6">
      <div className="bg-gradient-to-r from-green-900/30 to-teal-900/30 backdrop-blur-sm border border-green-700/30 rounded-2xl p-6 shadow-lg">
        <div className="flex items-start gap-4">
          <div className="bg-green-500/20 p-3 rounded-lg">
            <LoopIcon className="w-6 h-6 text-green-400" />
          </div>
          <div>
            <h1 className="text-2xl md:text-3xl font-bold text-white mb-2">üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –°–ª–∞–π—Å—ã (–°—Ä–µ–∑—ã) –≤ Go</h1>
            <p className="text-gray-300">
              –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ —Ç–µ–º–µ <span className="font-medium text-yellow-400">—Å–ª–∞–π—Å–æ–≤ –≤ Go</span>.
            </p>
            <p className="text-gray-400 text-sm mt-2">–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.</p>
          </div>
        </div>
      </div>

      <div className="bg-gray-800/40 backdrop-blur-sm border border-gray-700/50 rounded-2xl p-6 shadow-xl">
        {quizData.map((q, questionIndex) => {
          const isSelected = userAnswers[questionIndex] !== null;
          const isCorrect = userAnswers[questionIndex] === q.correctAnswer;
          
          return (
            <div 
              key={q.id} 
              className={`mb-8 last:mb-0 p-4 rounded-lg ${
                submitted && isSelected && isCorrect 
                  ? 'bg-green-900/20 border border-green-700/30' 
                  : submitted && isSelected && !isCorrect 
                    ? 'bg-red-900/20 border border-red-700/30' 
                    : 'bg-gray-900/50'
              }`}
            >
              <h3 className="font-medium text-white mb-3 flex items-start gap-2">
                <span className="flex-shrink-0">{questionIndex + 1}.</span>
                <span>{q.question}</span>
              </h3>
              <div className="space-y-2">
                {q.options.map((option, optionIndex) => {
                  let optionStyle = "block w-full text-left p-3 rounded-lg transition-colors duration-200 ";
                  if (submitted) {
                    if (optionIndex === q.correctAnswer) {
                      optionStyle += "bg-green-700 text-white"; // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    } else if (optionIndex === userAnswers[questionIndex] && optionIndex !== q.correctAnswer) {
                      optionStyle += "bg-red-700 text-white"; // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                    } else {
                      optionStyle += "bg-gray-800 text-gray-400 cursor-not-allowed"; // –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    }
                  } else {
                    // –°—Ç–∏–ª–∏ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    if (userAnswers[questionIndex] === optionIndex) {
                      optionStyle += "bg-blue-600 text-white"; // –í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    } else {
                      optionStyle += "bg-gray-800 hover:bg-gray-700 text-gray-300"; // –ù–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π
                    }
                  }

                  return (
                    <button
                      key={optionIndex}
                      onClick={() => handleAnswerSelect(questionIndex, optionIndex)}
                      className={optionStyle}
                      disabled={submitted} // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    >
                      <div className="flex items-center">
                        <span className="mr-2 font-mono flex-shrink-0">{String.fromCharCode(65 + optionIndex)}.</span>
                        <span>{option}</span>
                        {submitted && optionIndex === q.correctAnswer && (
                          <CheckCircle className="ml-auto w-5 h-5 text-green-400 flex-shrink-0" />
                        )}
                        {submitted && optionIndex === userAnswers[questionIndex] && optionIndex !== q.correctAnswer && (
                          <XCircle className="ml-auto w-5 h-5 text-red-400 flex-shrink-0" />
                        )}
                        {!submitted && userAnswers[questionIndex] === optionIndex && (
                          <span className="ml-auto w-5 h-5 rounded-full bg-blue-400 flex-shrink-0"></span>
                        )}
                      </div>
                    </button>
                  );
                })}
              </div>
              {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
              {submitted && isSelected && (
                <div className={`mt-3 text-sm p-2 rounded flex items-start gap-2 ${isCorrect ? 'bg-green-900/30 text-green-300' : 'bg-red-900/30 text-red-300'}`}>
                  {isCorrect ? (
                    <>
                      <CheckCircle className="w-5 h-5 flex-shrink-0 mt-0.5" />
                      <span>–í–µ—Ä–Ω–æ!</span>
                    </>
                  ) : (
                    <>
                      <XCircle className="w-5 h-5 flex-shrink-0 mt-0.5" />
                      <span>–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {String.fromCharCode(65 + q.correctAnswer)}.</span>
                    </>
                  )}
                </div>
              )}
            </div>
          );
        })}

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex flex-wrap items-center justify-between gap-4 pt-4 mt-6 border-t border-gray-700">
          {!submitted ? (
            <button
              onClick={handleSubmit}
              disabled={!allAnswered}
              className={`px-6 py-3 rounded-lg font-medium flex items-center gap-2 transition-all duration-300 ${
                allAnswered
                  ? 'bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white shadow-lg hover:shadow-xl transform hover:scale-[1.02] cursor-pointer'
                  : 'bg-gray-700 text-gray-500 cursor-not-allowed'
              }`}
            >
              <CheckCircle className="w-5 h-5" />
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã
            </button>
          ) : (
            <div className="flex flex-wrap items-center gap-4">
              <div className="flex items-center gap-2 bg-gray-900 px-4 py-3 rounded-lg">
                <Award className="w-5 h-5 text-yellow-400 flex-shrink-0" />
                <span className="font-bold text-white">–†–µ–∑—É–ª—å—Ç–∞—Ç: </span>
                <span className="font-bold text-xl text-yellow-400">{score}</span>
                <span className="text-gray-400">/ {quizData.length}</span>
              </div>
              <button
                onClick={handleReset}
                className="px-6 py-3 bg-gray-700 hover:bg-gray-600 text-white rounded-lg font-medium flex items-center gap-2 transition-colors duration-200 whitespace-nowrap"
              >
                <RotateCcw className="w-5 h-5" />
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Part2;