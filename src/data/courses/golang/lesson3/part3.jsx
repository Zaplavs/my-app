// src/data/courses/go/lesson3/part3.jsx
import React, { useState } from 'react';
import { Variable, Type, Hash, Calculator, Text, ToggleLeft, ArrowRightLeft, CheckCircle, Award } from 'lucide-react';

const Part3 = () => {
  // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ —É—Ä–æ–∫—É
  const practicalTasks = [
    {
      id: 1,
      title: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏",
      description: "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∏–∑—É—á–µ–Ω–Ω—ã—Ö –≤ —É—Ä–æ–∫–µ.",
      steps: [
        "–û–±—ä—è–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 'userName' —Ç–∏–ø–∞ string —Å –ø–æ–º–æ—â—å—é var –∏ –ø—Ä–∏—Å–≤–æ–π—Ç–µ –µ–π –≤–∞—à–µ –∏–º—è",
        "–û–±—ä—è–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 'userAge' —Ç–∏–ø–∞ int —Å –ø–æ–º–æ—â—å—é –∫—Ä–∞—Ç–∫–æ–π —Ñ–æ—Ä–º—ã := –∏ –ø—Ä–∏—Å–≤–æ–π—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç",
        "–û–±—ä—è–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 'height' —Ç–∏–ø–∞ float64 –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"
      ],
      verification: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ",
      expectedOutput: "userName = '–í–∞—à–µ –∏–º—è', userAge = –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç, height = 0",
      difficulty: "Ïâ¨Ïö¥"
    },
    {
      id: 2,
      title: "–†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö",
      description: "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö —Ç–∏–ø–æ–≤, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤ —É—Ä–æ–∫–µ.",
      steps: [
        "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ int –∏ –ø—Ä–∏—Å–≤–æ–π—Ç–µ –µ–π –ª—é–±–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ",
        "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ float64 –∏ –ø—Ä–∏—Å–≤–æ–π—Ç–µ –µ–π —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π",
        "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ string –∏ –ø—Ä–∏—Å–≤–æ–π—Ç–µ –µ–π –ª—é–±—É—é —Å—Ç—Ä–æ–∫—É",
        "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ bool –∏ –ø—Ä–∏—Å–≤–æ–π—Ç–µ –µ–π –∑–Ω–∞—á–µ–Ω–∏–µ true –∏–ª–∏ false"
      ],
      verification: "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏",
      expectedOutput: "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—Å–µ—Ö —á–µ—Ç—ã—Ä–µ—Ö –±–∞–∑–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω—ã",
      difficulty: "Ïâ¨Ïö¥"
    },
    {
      id: 3,
      title: "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç",
      description: "–û–±—ä—è–≤–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤.",
      steps: [
        "–û–±—ä—è–≤–∏—Ç–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É 'pi' —Ç–∏–ø–∞ float64 —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 3.14159",
        "–û–±—ä—è–≤–∏—Ç–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É 'appName' —Ç–∏–ø–∞ string —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "–û–±—ä—è–≤–∏—Ç–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É 'maxUsers' —Ç–∏–ø–∞ int —Å –ª—é–±—ã–º —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º"
      ],
      verification: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ",
      expectedOutput: "pi = 3.14159, appName = '–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', maxUsers = —á–∏—Å–ª–æ",
      difficulty: "Ïâ¨Ïö¥"
    },
    {
      id: 4,
      title: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö",
      description: "–ü–æ–ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.",
      steps: [
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å –∫—Ä—É–≥–ª—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç—Ä–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: name, age, city",
        "–ü—Ä–∏—Å–≤–æ–π—Ç–µ –∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        "–û–±—ä—è–≤–∏—Ç–µ —Ç—Ä–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —Å –ø–æ–º–æ—â—å—é —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
      ],
      verification: "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω—ã –∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
      expectedOutput: "–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
      difficulty: "Ï§ëÍ∞Ñ"
    },
    {
      id: 5,
      title: "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤",
      description: "–ü–æ–ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —á–∏—Å–ª–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –¥—Ä—É–≥ –≤ –¥—Ä—É–≥–∞.",
      steps: [
        "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ int —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 42",
        "–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–µ –≤ —Ç–∏–ø float64 –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é",
        "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ float64 —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 99.9",
        "–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–µ –≤ —Ç–∏–ø int –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é"
      ],
      verification: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ç–µ—Ä—é —Ç–æ—á–Ω–æ—Å—Ç–∏",
      expectedOutput: "int(42) -> float64(42), float64(99.9) -> int(99)",
      difficulty: "Ï§ëÍ∞Ñ"
    },
    {
      id: 6,
      title: "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏",
      description: "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏.",
      steps: [
        "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ (–∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç, —Å—Ç—É–¥–µ–Ω—Ç –ª–∏)",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö",
        "–î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç)",
        "–í—ã–≤–µ–¥–∏—Ç–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é fmt.Println()"
      ],
      verification: "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –≤—ã–≤–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
      expectedOutput: "–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö",
      difficulty: "Ï§ëÍ∞Ñ"
    }
  ];

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
  const [completedTasks, setCompletedTasks] = useState(new Set());
  const [showResults, setShowResults] = useState({});

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  const toggleTaskCompletion = (taskId) => {
    const newCompletedTasks = new Set(completedTasks);
    if (newCompletedTasks.has(taskId)) {
      newCompletedTasks.delete(taskId);
    } else {
      newCompletedTasks.add(taskId);
    }
    setCompletedTasks(newCompletedTasks);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  const saveResult = (taskId, result) => {
    setShowResults(prev => ({
      ...prev,
      [taskId]: result
    }));
  };

  return (
    <div className="space-y-6">
      <div className="bg-gradient-to-r from-blue-900/30 to-purple-900/30 backdrop-blur-sm border border-blue-700/30 rounded-2xl p-6 shadow-lg">
        <div className="flex items-start gap-4">
          <div className="bg-blue-500/20 p-3 rounded-lg">
            <Variable className="w-6 h-6 text-blue-400" />
          </div>
          <div>
            <h1 className="text-2xl md:text-3xl font-bold text-white mb-2">üõ†Ô∏è –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö</h1>
            <p className="text-gray-300">
              –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Go.
            </p>
            <p className="text-gray-400 text-sm mt-2">
              –û—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
            </p>
          </div>
        </div>
      </div>

      <div className="bg-gray-800/40 backdrop-blur-sm border border-gray-700/50 rounded-2xl p-6 shadow-xl">
        <div className="mb-6 p-4 bg-gray-900/50 rounded-lg border border-gray-700">
          <h3 className="font-bold text-white mb-2 flex items-center gap-2">
            <Calculator className="w-5 h-5 text-green-400" />
            –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:
          </h3>
          <ul className="list-disc pl-5 space-y-2 text-gray-300 text-sm">
            <li>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π Go —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, task1.go)</li>
            <li>–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å–ª–µ–¥—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–º —à–∞–≥–∞–º</li>
            <li>–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ —á–µ–∫–±–æ–∫—Å, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ</li>
            <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã 'go run filename.go' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º</li>
          </ul>
        </div>

        {practicalTasks.map((task) => (
          <div 
            key={task.id} 
            className={`mb-6 last:mb-0 p-5 rounded-xl border ${
              completedTasks.has(task.id) 
                ? 'border-green-700/50 bg-green-900/10' 
                : 'border-gray-700/50 bg-gray-900/50'
            }`}
          >
            <div className="flex items-start justify-between mb-4">
              <div className="flex items-start gap-3">
                <div className={`p-2 rounded-lg ${
                  task.difficulty === 'Ïâ¨Ïö¥' 
                    ? 'bg-green-500/20 text-green-400' 
                    : task.difficulty === 'Ï§ëÍ∞Ñ' 
                      ? 'bg-yellow-500/20 text-yellow-400'
                      : 'bg-red-500/20 text-red-400'
                }`}>
                  {task.difficulty === 'Ïâ¨Ïö¥' && <Variable className="w-5 h-5" />}
                  {task.difficulty === 'Ï§ëÍ∞Ñ' && <Type className="w-5 h-5" />}
                  {task.difficulty === 'Ïñ¥Î†§Ïö¥' && <Hash className="w-5 h-5" />}
                </div>
                <div>
                  <h3 className="font-bold text-white text-lg">{task.title}</h3>
                  <p className="text-gray-400 text-sm">{task.description}</p>
                </div>
              </div>
              <button
                onClick={() => toggleTaskCompletion(task.id)}
                className={`p-2 rounded-lg transition-colors ${
                  completedTasks.has(task.id)
                    ? 'bg-green-500/20 text-green-400 hover:bg-green-500/30'
                    : 'bg-gray-700 text-gray-400 hover:bg-gray-600'
                }`}
              >
                <CheckCircle className={`w-6 h-6 ${completedTasks.has(task.id) ? 'fill-current' : ''}`} />
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <h4 className="font-medium text-white mb-2">–®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</h4>
                <ol className="list-decimal pl-5 space-y-2 text-gray-300">
                  {task.steps.map((step, index) => (
                    <li key={index} className="pl-2">{step}</li>
                  ))}
                </ol>
              </div>

              <div className="bg-gray-800/50 p-4 rounded-lg">
                <h4 className="font-medium text-white mb-2 flex items-center gap-2">
                  <ToggleLeft className="w-4 h-4 text-purple-400" />
                  –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
                </h4>
                <p className="text-gray-300 text-sm mb-3">{task.verification}</p>
                <div className="text-gray-400 text-xs">
                  <span className="font-medium">–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</span> {task.expectedOutput}
                </div>
              </div>

              <div className="flex flex-wrap items-center justify-between gap-3 pt-3 border-t border-gray-700">
                <div className="text-sm">
                  <span className={`px-2 py-1 rounded ${
                    task.difficulty === 'Ïâ¨Ïö¥' 
                      ? 'bg-green-900/30 text-green-300' 
                      : task.difficulty === 'Ï§ëÍ∞Ñ' 
                        ? 'bg-yellow-900/30 text-yellow-300'
                        : 'bg-red-900/30 text-red-300'
                  }`}>
                    {task.difficulty === 'Ïâ¨Ïö¥' && 'Ïâ¨Ïö¥'}
                    {task.difficulty === 'Ï§ëÍ∞Ñ' && 'Ï§ëÍ∞Ñ'}
                    {task.difficulty === 'Ïñ¥Î†§Ïö¥' && 'Ïñ¥Î†§Ïö¥'}
                  </span>
                </div>
                <div className="text-sm text-gray-400">
                  –ó–∞–¥–∞–Ω–∏–µ {task.id} –∏–∑ {practicalTasks.length}
                </div>
              </div>
            </div>
          </div>
        ))}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
        <div className="mt-8 pt-6 border-t border-gray-700">
          <div className="bg-gray-900/50 p-4 rounded-lg">
            <h3 className="font-bold text-white mb-3 flex items-center gap-2">
              <Award className="w-5 h-5 text-yellow-400" />
              –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            </h3>
            <div className="flex items-center justify-between">
              <div className="flex-1">
                <div className="w-full bg-gray-700 rounded-full h-2.5">
                  <div 
                    className="bg-green-600 h-2.5 rounded-full transition-all duration-500" 
                    style={{ width: `${(completedTasks.size / practicalTasks.length) * 100}%` }}
                  ></div>
                </div>
                <div className="flex justify-between text-sm text-gray-400 mt-2">
                  <span>–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completedTasks.size}</span>
                  <span>–í—Å–µ–≥–æ: {practicalTasks.length}</span>
                </div>
              </div>
              <div className={`ml-4 px-3 py-1 rounded-lg font-bold ${
                completedTasks.size === practicalTasks.length
                  ? 'bg-green-900/30 text-green-300'
                  : 'bg-gray-700 text-gray-300'
              }`}>
                {Math.round((completedTasks.size / practicalTasks.length) * 100)}%
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Part3;