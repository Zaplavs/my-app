export default {
  id: 3,
  title: "Работа со строками",
  contentBlocks: [
    {
      type: 'text',
      text: `
        <p>
          Строки — один из самых часто используемых типов данных в Python. Они служат для хранения текстовой информации.
          В этом уроке вы узнаете, как создавать строки, объединять их, использовать специальные символы и удобно форматировать текст.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Создание строк</h3>
        <p>
          Строки в Python можно создавать с использованием одинарных или двойных кавычек:
        </p>
      `
    },
    {
      type: 'code',
      code: `message1 = 'Привет, мир!'\nmessage2 = "Добро пожаловать на сайт."`
    },
    {
      type: 'text',
      text: `
        <p>
          Оба варианта корректны. Разница только в удобстве: если в строке есть апостроф, лучше использовать двойные кавычки, и наоборот.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Конкатенация строк</h3>
        <p>
          Конкатенация — это операция объединения двух или более строк. Для этого используется знак <code>+</code>.
        </p>
      `
    },
    {
      type: 'code',
      code: `first_name = "Анна"\nlast_name = "Иванова"\nfull_name = first_name + " " + last_name\nprint(full_name)  # Анна Иванова`
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Экранирование символов</h3>
        <p>
          Иногда нужно использовать кавычки внутри строки. Чтобы не сломать синтаксис, применяется экранирование — символ <code>\\</code> перед спецсимволом.
        </p>
      `
    },
    {
      type: 'code',
      code: `quote = "Он сказал: \\"Жизнь прекрасна!\\""\nprint(quote)  # Он сказал: "Жизнь прекрасна!"`
    },
    {
      type: 'text',
      text: `
        <p>
          Также можно использовать разные кавычки для строки и внутри строки:
        </p>
      `
    },
    {
      type: 'code',
      code: `quote = 'Он сказал: "Жизнь прекрасна!"'`
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Многострочные строки</h3>
        <p>
          Если нужно сохранить текст из нескольких строк, используйте тройные кавычки:
        </p>
      `
    },
    {
      type: 'code',
      code: `long_text = """Это первая строка.\nЭто вторая строка.\nИ это всё одна переменная."""\nprint(long_text)`
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">f-строки (форматирование)</h3>
        <p>
          В Python 3.6+ появились f-строки — удобный способ вставлять значения переменных прямо в строку.
        </p>
      `
    },
    {
      type: 'code',
      code: `name = "Петр"\nage = 25\nprint(f"Привет, {name}! Тебе {age} лет.")`
    },
    {
      type: 'text',
      text: `
        <p>
          Вы можете даже выполнять простые выражения внутри фигурных скобок:
        </p>
      `
    },
    {
      type: 'code',
      code: `a = 5\nb = 10\nprint(f"Сумма {a} и {b} равна {a + b}")`
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Другие методы форматирования (устаревшие)</h3>
        <p>
          Хотя f-строки — самый удобный способ, иногда можно встретить старые методы:
        </p>
      `
    },
    {
      type: 'code',
      code: `"Hello, {name}".format(name="World")  # через .format()\n\n# Через %:\n"Значение: %d" % 42`
    },
    {
      type: 'text',
      text: `
        <p>
          Эти способы работают, но менее читабельны и рекомендуются скорее для ознакомления.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Полезные функции и методы строк</h3>
        <p>
          У строк есть множество встроенных методов. Вот несколько полезных:
        </p>
      `
    },
    {
      type: 'code',
      code: `text = "программирование"\nprint(text.upper())       # ПРОГРАММИРОВАНИЕ\nprint(text.capitalize())  # Программирование\nprint(text.replace("м", "мМ"))  # проММированиеНие`
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Доступ к отдельным символам</h3>
        <p>
          Каждый символ в строке имеет индекс. Нумерация начинается с нуля:
        </p>
      `
    },
    {
      type: 'code',
      code: `text = "Python"\nprint(text[0])  # P\nprint(text[-1]) # n (последний символ)`
    }
  ],
  task: "Создайте строку с вашим именем и возрастом с помощью f-строки и выведите её на экран.",
  exampleAnswer: "name = \"Мария\"\nage = 22\nprint(f\"Меня зовут {name}, мне {age} года.\")"
};