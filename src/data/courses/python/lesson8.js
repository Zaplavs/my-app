export default {
  id: 8,
  title: "Списки (часть 1)",
  contentBlocks: [
    {
      type: 'text',
      text: `
        <p>
          Списки — это один из самых полезных типов данных в Python. Они позволяют хранить несколько элементов в одной переменной.
          В отличие от строк, списки могут содержать элементы разных типов.
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Как создать список?</h3>
        <p>
          Список создаётся с помощью квадратных скобок <code>[]</code>, а элементы разделяются запятыми:
        </p>
      `
    },
    {
      type: 'code',
      code: `fruits = ["яблоко", "банан", "вишня"]\nnumbers = [1, 2, 3, 4, 5]\nmixed = ["текст", 42, True]`
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Доступ к элементам списка</h3>
        <p>
          Каждый элемент списка имеет свой индекс — порядковый номер, начиная с нуля. 
          Обращение к элементу происходит через квадратные скобки.
        </p>
      `
    },
    {
      type: 'code',
      code: `fruits = ["яблоко", "банан", "вишня"]\nprint(fruits[0])  # яблоко\nprint(fruits[1])  # банан\nprint(fruits[-1]) # вишня (последний элемент)`
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Изменение элементов списка</h3>
        <p>
          Элементы списка можно изменять, обращаясь к ним по индексу и присваивая новое значение:
        </p>
      `
    },
    {
      type: 'code',
      code: `fruits = ["яблоко", "банан", "вишня"]\nfruits[1] = "апельсин"\nprint(fruits)  # ['яблоко', 'апельсин', 'вишня']`
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Добавление элементов в список</h3>
        <p>
          Чтобы добавить новый элемент в конец списка, используется метод <code>append()</code>.
        </p>
      `
    },
    {
      type: 'code',
      code: `fruits = ["яблоко", "банан", "вишня"]\nfruits.append("груша")\nprint(fruits)  # ['яблоко', 'банан', 'вишня', 'груша']`
    },
    {
      type: 'text',
      text: `
        <p>
          Также можно добавить элемент на определённую позицию с помощью метода <code>insert()</code>:
        </p>
      `
    },
    {
      type: 'code',
      code: `fruits = ["яблоко", "банан", "вишня"]\nfruits.insert(1, "манго")\nprint(fruits)  # ['яблоко', 'манго', 'банан', 'вишня']`
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Удаление элементов из списка</h3>
        <p>
          Удалить элемент можно разными способами:
        </p>
      `
    },
    {
      type: 'text',
      text: `
        <ul class="list-disc pl-5 space-y-1 mb-4">
          <li><code>remove()</code> — удаляет элемент по значению.</li>
          <li><code>pop()</code> — удаляет элемент по индексу и возвращает его.</li>
          <li><code>del</code> — удаляет элемент или весь список.</li>
        </ul>
      `
    },
    {
      type: 'code',
      code: `fruits = ["яблоко", "банан", "вишня"]\n\nfruits.remove("банан")  # удаление по значению\nprint(fruits)  # ['яблоко', 'вишня']\n\nitem = fruits.pop(1)\nprint("Удалённый элемент:", item)\nprint(fruits)  # ['яблоко']\n\ndel fruits[0]\nprint(fruits)  # []`
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Проверка наличия элемента в списке</h3>
        <p>
          Чтобы проверить, есть ли элемент в списке, используйте оператор <code>in</code>:
        </p>
      `
    },
    {
      type: 'code',
      code: `fruits = ["яблоко", "банан", "вишня"]\nif "банан" in fruits:\n    print("Банан есть в списке.")\nelse:\n    print("Банана нет.")`
    },
    {
      type: 'text',
      text: `
        <h3 class="font-bold mt-4 mb-2">Длина списка</h3>
        <p>
          Чтобы узнать количество элементов в списке, используйте функцию <code>len()</code>:
        </p>
      `
    },
    {
      type: 'code',
      code: `fruits = ["яблоко", "банан", "вишня"]\nprint("Количество фруктов:", len(fruits))`
    }
  ],
  task: "Создайте список из 5 чисел. Замените третий элемент на число 100. Удалите второй элемент. Выведите обновлённый список.",
  exampleAnswer: "numbers = [10, 20, 30, 40, 50]\nnumbers[2] = 100  # замена третьего элемента\nnumbers.pop(1)   # удаление второго элемента\nprint(numbers)"
};