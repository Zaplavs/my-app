// src/data/courses/fastapi/lesson13/part3.jsx
import React, { useState } from 'react';
import { Database, Play, CheckCircle, Terminal, Eye, Settings } from 'lucide-react';

const Part3 = () => {
  const [completedTasks, setCompletedTasks] = useState({
    task1: false,
    task2: false,
    task3: false
  });

  const handleTaskComplete = (task) => {
    setCompletedTasks(prev => ({
      ...prev,
      [task]: !prev[task]
    }));
  };

  return (
    <div className="space-y-8 text-gray-200">
      {/* –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ */}
      <div className="bg-gradient-to-r from-blue-900/30 to-purple-900/30 backdrop-blur-sm border border-blue-700/30 rounded-2xl p-6 shadow-lg">
        <div className="flex items-start gap-4">
          <div className="bg-blue-500/20 p-3 rounded-lg">
            <Database className="w-6 h-6 text-blue-400" />
          </div>
          <div>
            <h1 className="text-2xl md:text-3xl font-bold text-white mb-2">üíª –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–æ–∑–¥–∞–Ω–∏–µ API —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö</h1>
            <p className="text-gray-300">
              <span className="font-medium text-yellow-400">üéØ –¶–µ–ª—å:</span> –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Å–≤–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
            </p>
          </div>
        </div>
      </div>

      {/* –ó–∞–¥–∞–Ω–∏–µ 1: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü */}
      <div className={`bg-gray-800/40 backdrop-blur-sm border rounded-2xl p-6 shadow-xl ${completedTasks.task1 ? 'border-green-700/50' : 'border-gray-700/50'}`}>
        <h2 className="flex items-center gap-2 text-xl font-bold text-white mb-4">
          <Play className="w-5 h-5 text-green-400" />
          –ó–∞–¥–∞–Ω–∏–µ 1: –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –±–ª–æ–≥–∞
        </h2>
        <div className="prose prose-invert max-w-none text-gray-300 leading-relaxed">
          <p>
            –°–æ–∑–¥–∞–π—Ç–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏ –≤ –±–ª–æ–≥–µ.
          </p>
        </div>
        <div className="mt-6 space-y-6">
          <div className="bg-gray-900/50 p-5 rounded-xl border border-green-700/30">
            <h3 className="font-bold text-green-300 mb-3 flex items-center gap-2">
              <span className="bg-gray-700 w-6 h-6 rounded-full flex items-center justify-center text-sm">1</span>
              –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª blog_api.py
            </h3>
            <ul className="list-disc pl-6 space-y-2 text-gray-300">
              <li>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª <code className="bg-gray-700 px-1.5 py-0.5 rounded">blog_api.py</code>.</li>
              <li>–î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</li>
            </ul>
            <div className="bg-gray-800 p-4 rounded-lg mt-3 text-sm overflow-x-auto">
              <pre className="whitespace-pre-wrap text-gray-300">
{`import sqlite3
from fastapi import Depends, FastAPI, HTTPException, status
from pydantic import BaseModel
from typing import List, Optional
import time

app = FastAPI(title="–ë–ª–æ–≥ API —Å SQLite")

# Pydantic –º–æ–¥–µ–ª–∏
class PostCreate(BaseModel):
    title: str
    content: str
    author: str

class PostUpdate(BaseModel):
    title: Optional[str] = None
    content: Optional[str] = None
    author: Optional[str] = None

class Post(BaseModel):
    id: int
    title: str
    content: str
    author: str
    created_at: str

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('blog.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å—Ç–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS posts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            content TEXT NOT NULL,
            author TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS comments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            post_id INTEGER NOT NULL,
            author TEXT NOT NULL,
            content TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (post_id) REFERENCES posts (id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()`}
              </pre>
            </div>
          </div>
        </div>
        <div className="mt-6 flex items-center">
          <input
            type="checkbox"
            id="task1"
            checked={completedTasks.task1}
            onChange={() => handleTaskComplete('task1')}
            className="w-5 h-5 text-blue-600 rounded focus:ring-blue-500"
          />
          <label htmlFor="task1" className="ml-2 text-gray-300">
            –Ø —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª blog_api.py –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          </label>
          {completedTasks.task1 && <CheckCircle className="ml-2 w-5 h-5 text-green-400" />}
        </div>
      </div>

      {/* –ó–∞–¥–∞–Ω–∏–µ 2: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π */}
      <div className={`bg-gray-800/40 backdrop-blur-sm border rounded-2xl p-6 shadow-xl ${completedTasks.task2 ? 'border-green-700/50' : 'border-gray-700/50'}`}>
        <h2 className="flex items-center gap-2 text-xl font-bold text-white mb-4">
          <Terminal className="w-5 h-5 text-purple-400" />
          –ó–∞–¥–∞–Ω–∏–µ 2: –î–æ–±–∞–≤—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
        </h2>
        <div className="prose prose-invert max-w-none text-gray-300 leading-relaxed">
          <p>
            –î–æ–±–∞–≤—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ –ë–î –∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
          </p>
        </div>
        <div className="mt-6 space-y-6">
          <div className="bg-gray-900/50 p-5 rounded-xl border border-purple-700/30">
            <h3 className="font-bold text-purple-300 mb-3 flex items-center gap-2">
              <span className="bg-gray-700 w-6 h-6 rounded-full flex items-center justify-center text-sm">1</span>
              –î–æ–±–∞–≤—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            </h3>
            <ul className="list-disc pl-6 space-y-2 text-gray-300">
              <li>–î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –≤ —Ñ–∞–π–ª <code className="bg-gray-700 px-1.5 py-0.5 rounded">blog_api.py</code>:</li>
            </ul>
            <div className="bg-gray-800 p-3 rounded-lg mt-3 text-sm">
              <pre className="whitespace-pre-wrap text-gray-300">
{`# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
def get_db():
    conn = sqlite3.connect('blog.db')
    conn.row_factory = sqlite3.Row
    try:
        yield conn
    finally:
        conn.close()`}
              </pre>
            </div>
          </div>
          <div className="bg-gray-900/50 p-5 rounded-xl border border-blue-700/30">
            <h3 className="font-bold text-blue-300 mb-3 flex items-center gap-2">
              <span className="bg-gray-700 w-6 h-6 rounded-full flex items-center justify-center text-sm">2</span>
              –†–µ–∞–ª–∏–∑—É–π—Ç–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤
            </h3>
            <ul className="list-disc pl-6 space-y-2 text-gray-300">
              <li>–î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ —Ñ–∞–π–ª:</li>
            </ul>
            <div className="bg-gray-800 p-4 rounded-lg mt-3 text-sm overflow-x-auto">
              <pre className="whitespace-pre-wrap text-gray-300">
{`# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
@app.post("/posts/", response_model=Post, status_code=status.HTTP_201_CREATED)
def create_post(post: PostCreate, db: sqlite3.Connection = Depends(get_db)):
    cursor = db.cursor()
    cursor.execute(
        "INSERT INTO posts (title, content, author) VALUES (?, ?, ?)",
        (post.title, post.content, post.author)
    )
    db.commit()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    post_id = cursor.lastrowid
    cursor.execute("SELECT * FROM posts WHERE id = ?", (post_id,))
    created_post = cursor.fetchone()
    
    return dict(created_post)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤
@app.get("/posts/", response_model=List[Post])
def read_posts(skip: int = 0, limit: int = 10, db: sqlite3.Connection = Depends(get_db)):
    cursor = db.cursor()
    cursor.execute("SELECT * FROM posts ORDER BY created_at DESC LIMIT ? OFFSET ?", (limit, skip))
    posts = cursor.fetchall()
    return [dict(post) for post in posts]

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
@app.get("/posts/{post_id}", response_model=Post)
def read_post(post_id: int, db: sqlite3.Connection = Depends(get_db)):
    cursor = db.cursor()
    cursor.execute("SELECT * FROM posts WHERE id = ?", (post_id,))
    post = cursor.fetchone()
    
    if post is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    return dict(post)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
@app.put("/posts/{post_id}", response_model=Post)
def update_post(
    post_id: int, 
    post_update: PostUpdate, 
    db: sqlite3.Connection = Depends(get_db)
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    cursor = db.cursor()
    cursor.execute("SELECT * FROM posts WHERE id = ?", (post_id,))
    existing_post = cursor.fetchone()
    
    if existing_post is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if post_update.title is not None:
        cursor.execute("UPDATE posts SET title = ? WHERE id = ?", (post_update.title, post_id))
    
    if post_update.content is not None:
        cursor.execute("UPDATE posts SET content = ? WHERE id = ?", (post_update.content, post_id))
    
    if post_update.author is not None:
        cursor.execute("UPDATE posts SET author = ? WHERE id = ?", (post_update.author, post_id))
    
    db.commit()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    cursor.execute("SELECT * FROM posts WHERE id = ?", (post_id,))
    updated_post = cursor.fetchone()
    
    return dict(updated_post)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
@app.delete("/posts/{post_id}")
def delete_post(post_id: int, db: sqlite3.Connection = Depends(get_db)):
    cursor = db.cursor()
    cursor.execute("SELECT * FROM posts WHERE id = ?", (post_id,))
    post = cursor.fetchone()
    
    if post is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    cursor.execute("DELETE FROM posts WHERE id = ?", (post_id,))
    db.commit()
    
    return {"message": "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}`}
              </pre>
            </div>
          </div>
        </div>
        <div className="mt-6 flex items-center">
          <input
            type="checkbox"
            id="task2"
            checked={completedTasks.task2}
            onChange={() => handleTaskComplete('task2')}
            className="w-5 h-5 text-blue-600 rounded focus:ring-blue-500"
          />
          <label htmlFor="task2" className="ml-2 text-gray-300">
            –Ø –¥–æ–±–∞–≤–∏–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
          </label>
          {completedTasks.task2 && <CheckCircle className="ml-2 w-5 h-5 text-green-400" />}
        </div>
      </div>

      {/* –ó–∞–¥–∞–Ω–∏–µ 3: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */}
      <div className={`bg-gray-800/40 backdrop-blur-sm border rounded-2xl p-6 shadow-xl ${completedTasks.task3 ? 'border-green-700/50' : 'border-gray-700/50'}`}>
        <h2 className="flex items-center gap-2 text-xl font-bold text-white mb-4">
          <Eye className="w-5 h-5 text-cyan-400" />
          –ó–∞–¥–∞–Ω–∏–µ 3: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API
        </h2>
        <div className="prose prose-invert max-w-none text-gray-300 leading-relaxed">
          <p>
            –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.
          </p>
        </div>
        <div className="mt-6 space-y-6">
          <div className="bg-gray-900/50 p-5 rounded-xl border border-cyan-700/30">
            <h3 className="font-bold text-cyan-300 mb-3">–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ—Å—Ç—ã:</h3>
            <ul className="list-disc pl-6 space-y-2 text-gray-300">
              <li>–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–æ–º <code className="bg-gray-700 px-1.5 py-0.5 rounded">blog_api.py</code>.</li>
              <li>–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:</li>
              <div className="bg-gray-800 p-3 rounded-lg mt-2 text-sm">
                <pre className="whitespace-pre-wrap text-gray-300">uvicorn blog_api:app --reload</pre>
              </div>
              <li>–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ <code className="bg-gray-700 px-1.5 py-0.5 rounded">http://127.0.0.1:8000/docs</code>.</li>
              <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç <code className="bg-gray-700 px-1.5 py-0.5 rounded">POST /posts/</code> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤:</li>
              <ul className="list-disc pl-6 mt-2 space-y-1">
                <li>–ó–∞–≥–æ–ª–æ–≤–æ–∫: "–ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç", –ê–≤—Ç–æ—Ä: "–ê–≤—Ç–æ—Ä 1", –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞"</li>
                <li>–ó–∞–≥–æ–ª–æ–≤–æ–∫: "–í—Ç–æ—Ä–æ–π –ø–æ—Å—Ç", –ê–≤—Ç–æ—Ä: "–ê–≤—Ç–æ—Ä 2", –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Å—Ç–∞"</li>
              </ul>
            </ul>
          </div>
          <div className="bg-gray-900/50 p-5 rounded-xl border border-red-700/30">
            <h3 className="font-bold text-red-300 mb-3">–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</h3>
            <ul className="list-disc pl-6 space-y-2 text-gray-300">
              <li>–ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ <code className="bg-gray-700 px-1.5 py-0.5 rounded">GET /posts/</code>.</li>
              <li>–ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ <code className="bg-gray-700 px-1.5 py-0.5 rounded">GET /posts/1</code>.</li>
              <li>–û–±–Ω–æ–≤–∏—Ç–µ –ø–æ—Å—Ç —á–µ—Ä–µ–∑ <code className="bg-gray-700 px-1.5 py-0.5 rounded">PUT /posts/1</code>.</li>
              <li>–£–¥–∞–ª–∏—Ç–µ –ø–æ—Å—Ç —á–µ—Ä–µ–∑ <code className="bg-gray-700 px-1.5 py-0.5 rounded">DELETE /posts/2</code>.</li>
            </ul>
          </div>
          <div className="bg-gray-900/50 p-5 rounded-xl border border-yellow-700/30">
            <h3 className="font-bold text-yellow-300 mb-3">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:</h3>
            <ul className="list-disc pl-6 space-y-2 text-gray-300">
              <li>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä (Ctrl+C) –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.</li>
              <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</li>
              <li>–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ <code className="bg-gray-700 px-1.5 py-0.5 rounded">blog.db</code> (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DB Browser for SQLite).</li>
            </ul>
          </div>
        </div>
        <div className="mt-6 flex items-center">
          <input
            type="checkbox"
            id="task3"
            checked={completedTasks.task3}
            onChange={() => handleTaskComplete('task3')}
            className="w-5 h-5 text-blue-600 rounded focus:ring-blue-500"
          />
          <label htmlFor="task3" className="ml-2 text-gray-300">
            –Ø –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
          </label>
          {completedTasks.task3 && <CheckCircle className="ml-2 w-5 h-5 text-green-400" />}
        </div>
      </div>

      {/* –ó–∞–∫–ª—é—á–µ–Ω–∏–µ */}
      <div className="bg-gray-800/40 backdrop-blur-sm border border-gray-700/50 rounded-2xl p-6 shadow-xl">
        <div className="flex items-start gap-3">
          <div className="bg-green-500/20 p-2 rounded-lg flex-shrink-0">
            <CheckCircle className="w-5 h-5 text-green-400" />
          </div>
          <div>
            <h3 className="font-bold text-white mb-2">–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ</h3>
            <p className="text-gray-300">
              –¢–µ–ø–µ—Ä—å –≤—ã —É–º–µ–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∞—Ç—å SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é! –í—ã —Å–æ–∑–¥–∞–ª–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ API —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª–∏ –≤—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –Ω–∞—É—á–∏–ª–∏—Å—å —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
              –í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ä–∞–±–æ—Ç—É —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
            </p>
            {Object.values(completedTasks).every(task => task) && (
              <div className="mt-3 p-3 bg-green-900/20 border border-green-700/30 rounded-lg flex items-center">
                <CheckCircle className="w-5 h-5 text-green-400 mr-2 flex-shrink-0" />
                <span className="text-green-300">–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –í—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.</span>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Part3;